(self.webpackChunkjustice40_tool=self.webpackChunkjustice40_tool||[]).push([[143],{1506:function(module){eval('function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlDQUF5Qyx5QkFBeUIsU0FBUyx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcz8zYzk2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1506\n')},7154:function(module){eval('function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE1NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHLEVBQUUseUJBQXlCLFNBQVMseUJBQXlCO0FBQ2hFO0FBQ0E7O0FBRUEsMkJBQTJCLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcz9hNTU5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7154\n')},5354:function(module,__unused_webpack_exports,__webpack_require__){eval('var setPrototypeOf = __webpack_require__(9489);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM1NC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQyxJQUFxQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzPzU1YjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5354\n')},5318:function(module){eval('function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxOC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlDQUF5Qyx5QkFBeUIsU0FBUyx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz80ZWE0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5318\n')},7316:function(module){eval('function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMxNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0RBQWdELHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcz9mMGU0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7316\n')},9489:function(module){eval('function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ4OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsRUFBRSx5QkFBeUIsU0FBUyx5QkFBeUI7QUFDaEU7QUFDQTs7QUFFQSxrQ0FBa0MseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcz80YTRiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9489\n')},5024:function(n,I,g){var e={"./en":4574,"./en.js":4574,"./es":3745,"./es.js":3745,"./ses":6867,"./ses.js":6867};function t(n){var I=c(n);return g(I)}function c(n){if(!g.o(e,n)){var I=new Error("Cannot find module '"+n+"'");throw I.code="MODULE_NOT_FOUND",I}return e[n]}t.keys=function(){return Object.keys(e)},t.resolve=c,n.exports=t,t.id=5024},161:function(n,I,g){var e={"./en":8079,"./en.js":8079,"./en.json":1549,"./es":4033,"./es.js":4033,"./es.json":7110,"./ses":9584,"./ses.js":9584,"./ses.json":8779};function t(n){var I=c(n);return g(I)}function c(n){if(!g.o(e,n)){var I=new Error("Cannot find module '"+n+"'");throw I.code="MODULE_NOT_FOUND",I}return e[n]}t.keys=function(){return Object.keys(e)},t.resolve=c,n.exports=t,t.id=161},3012:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar intl_utils_1 = __webpack_require__(2650);\n\nfunction validateInstance(instance, method) {\n  if (!(instance instanceof PluralRules)) {\n    throw new TypeError(\"Method Intl.PluralRules.prototype.\" + method + \" called on incompatible receiver \" + String(instance));\n  }\n}\n/**\n * https://tc39.es/ecma402/#sec-torawprecision\n * @param x\n * @param minPrecision\n * @param maxPrecision\n */\n\n\nfunction toRawPrecision(x, minPrecision, maxPrecision) {\n  var m = x.toPrecision(maxPrecision);\n\n  if (~m.indexOf('.') && maxPrecision > minPrecision) {\n    var cut = maxPrecision - minPrecision;\n\n    while (cut > 0 && m[m.length - 1] === '0') {\n      m = m.slice(0, m.length - 1);\n      cut--;\n    }\n\n    if (m[m.length - 1] === '.') {\n      return m.slice(0, m.length - 1);\n    }\n  }\n\n  return m;\n}\n/**\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x\n * @param minInteger\n * @param minFraction\n * @param maxFraction\n */\n\n\nfunction toRawFixed(x, minInteger, minFraction, maxFraction) {\n  var cut = maxFraction - minFraction;\n  var m = x.toFixed(maxFraction);\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, m.length - 1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, m.length - 1);\n  }\n\n  var int = m.split('.')[0].length;\n\n  if (int < minInteger) {\n    var z = '';\n\n    for (; z.length < minInteger - int; z += '0') {\n      ;\n    }\n\n    m = z + m;\n  }\n\n  return m;\n}\n\nfunction formatNumericToString(internalSlotMap, pl, x) {\n  var minimumSignificantDigits = intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumSignificantDigits');\n  var maximumSignificantDigits = intl_utils_1.getInternalSlot(internalSlotMap, pl, 'maximumSignificantDigits');\n\n  if (minimumSignificantDigits !== undefined && maximumSignificantDigits !== undefined) {\n    return toRawPrecision(x, minimumSignificantDigits, maximumSignificantDigits);\n  }\n\n  return toRawFixed(x, intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumIntegerDigits'), intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumFractionDigits'), intl_utils_1.getInternalSlot(internalSlotMap, pl, 'maximumFractionDigits'));\n}\n\nvar PluralRules =\n/** @class */\nfunction () {\n  function PluralRules(locales, options) {\n    // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js\n    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n    var newTarget = this && this instanceof PluralRules ? this.constructor : void 0;\n\n    if (!newTarget) {\n      throw new TypeError(\"Intl.PluralRules must be called with 'new'\");\n    }\n\n    var requestedLocales = intl_utils_1.getCanonicalLocales(locales);\n    var opt = Object.create(null);\n    var opts = options === undefined ? Object.create(null) : intl_utils_1.toObject(options);\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'initializedPluralRules', true);\n    var matcher = intl_utils_1.getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher;\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type', intl_utils_1.getOption(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal'));\n    intl_utils_1.setNumberFormatDigitOptions(PluralRules.__INTERNAL_SLOT_MAP__, this, opts, 0, 3);\n    var r = intl_utils_1.createResolveLocale(PluralRules.getDefaultLocale)(PluralRules.availableLocales, requestedLocales, opt, PluralRules.relevantExtensionKeys, PluralRules.localeData);\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);\n  }\n\n  PluralRules.prototype.resolvedOptions = function () {\n    var _this = this;\n\n    validateInstance(this, 'resolvedOptions');\n    var opts = Object.create(null);\n    opts.locale = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');\n    opts.type = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');\n    ['minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'].forEach(function (field) {\n      var val = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, _this, field);\n\n      if (val !== undefined) {\n        opts[field] = val;\n      }\n    });\n    opts.pluralCategories = __spreadArrays(PluralRules.localeData[opts.locale].categories[opts.type]);\n    return opts;\n  };\n\n  PluralRules.prototype.select = function (val) {\n    validateInstance(this, 'select');\n    var locale = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');\n    var type = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');\n    return PluralRules.localeData[locale].fn(formatNumericToString(PluralRules.__INTERNAL_SLOT_MAP__, this, Math.abs(Number(val))), type == 'ordinal');\n  };\n\n  PluralRules.prototype.toString = function () {\n    return '[object Intl.PluralRules]';\n  };\n\n  PluralRules.supportedLocalesOf = function (locales, options) {\n    return intl_utils_1.supportedLocales(PluralRules.availableLocales, intl_utils_1.getCanonicalLocales(locales), options);\n  };\n\n  PluralRules.__addLocaleData = function () {\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    var _loop_1 = function _loop_1(datum) {\n      var availableLocales = Object.keys(__spreadArrays(datum.availableLocales, Object.keys(datum.aliases), Object.keys(datum.parentLocales)).reduce(function (all, k) {\n        all[k] = true;\n        return all;\n      }, {}));\n      availableLocales.forEach(function (locale) {\n        try {\n          PluralRules.localeData[locale] = intl_utils_1.unpackData(locale, datum);\n        } catch (e) {\n          if (intl_utils_1.isMissingLocaleDataError(e)) {\n            // If we just don't have data for certain locale, that's ok\n            return;\n          }\n\n          throw e;\n        }\n      });\n    };\n\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n      var datum = data_1[_a];\n\n      _loop_1(datum);\n    }\n\n    PluralRules.availableLocales = Object.keys(PluralRules.localeData);\n\n    if (!PluralRules.__defaultLocale) {\n      PluralRules.__defaultLocale = PluralRules.availableLocales[0];\n    }\n  };\n\n  PluralRules.getDefaultLocale = function () {\n    return PluralRules.__defaultLocale;\n  };\n\n  PluralRules.localeData = {};\n  PluralRules.availableLocales = [];\n  PluralRules.__defaultLocale = 'en';\n  PluralRules.relevantExtensionKeys = [];\n  PluralRules.polyfilled = true;\n  PluralRules.__INTERNAL_SLOT_MAP__ = new WeakMap();\n  return PluralRules;\n}();\n\nexports.PluralRules = PluralRules;\n\ntry {\n  // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js\n  Object.defineProperty(PluralRules, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js\n\n  Object.defineProperty(PluralRules.prototype.constructor, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js\n\n  Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {\n    value: 1,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n} catch (ex) {// Meta fixes for test262\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGdEQUFnRCxRQUFRO0FBQ3hEO0FBQ0E7O0FBRUEsdUNBQXVDLFFBQVE7QUFDL0MscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLG1CQUFtQixtQkFBTyxDQUFDLElBQXNCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVyw2QkFBNkI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQUk7QUFDWDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxHQUFHOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLFlBQVk7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXBsdXJhbHJ1bGVzL2Rpc3QvY29yZS5qcz82MjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX19zcHJlYWRBcnJheXMgPSB0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMgfHwgZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIH1cblxuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspIHtcbiAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKykge1xuICAgICAgcltrXSA9IGFbal07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHI7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgaW50bF91dGlsc18xID0gcmVxdWlyZShcIkBmb3JtYXRqcy9pbnRsLXV0aWxzXCIpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUluc3RhbmNlKGluc3RhbmNlLCBtZXRob2QpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBQbHVyYWxSdWxlcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTWV0aG9kIEludGwuUGx1cmFsUnVsZXMucHJvdG90eXBlLlwiICsgbWV0aG9kICsgXCIgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlciBcIiArIFN0cmluZyhpbnN0YW5jZSkpO1xuICB9XG59XG4vKipcbiAqIGh0dHBzOi8vdGMzOS5lcy9lY21hNDAyLyNzZWMtdG9yYXdwcmVjaXNpb25cbiAqIEBwYXJhbSB4XG4gKiBAcGFyYW0gbWluUHJlY2lzaW9uXG4gKiBAcGFyYW0gbWF4UHJlY2lzaW9uXG4gKi9cblxuXG5mdW5jdGlvbiB0b1Jhd1ByZWNpc2lvbih4LCBtaW5QcmVjaXNpb24sIG1heFByZWNpc2lvbikge1xuICB2YXIgbSA9IHgudG9QcmVjaXNpb24obWF4UHJlY2lzaW9uKTtcblxuICBpZiAofm0uaW5kZXhPZignLicpICYmIG1heFByZWNpc2lvbiA+IG1pblByZWNpc2lvbikge1xuICAgIHZhciBjdXQgPSBtYXhQcmVjaXNpb24gLSBtaW5QcmVjaXNpb247XG5cbiAgICB3aGlsZSAoY3V0ID4gMCAmJiBtW20ubGVuZ3RoIC0gMV0gPT09ICcwJykge1xuICAgICAgbSA9IG0uc2xpY2UoMCwgbS5sZW5ndGggLSAxKTtcbiAgICAgIGN1dC0tO1xuICAgIH1cblxuICAgIGlmIChtW20ubGVuZ3RoIC0gMV0gPT09ICcuJykge1xuICAgICAgcmV0dXJuIG0uc2xpY2UoMCwgbS5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbTtcbn1cbi8qKlxuICogaHR0cHM6Ly90YzM5LmVzL2VjbWE0MDIvI3NlYy10b3Jhd2ZpeGVkXG4gKiBAcGFyYW0geFxuICogQHBhcmFtIG1pbkludGVnZXJcbiAqIEBwYXJhbSBtaW5GcmFjdGlvblxuICogQHBhcmFtIG1heEZyYWN0aW9uXG4gKi9cblxuXG5mdW5jdGlvbiB0b1Jhd0ZpeGVkKHgsIG1pbkludGVnZXIsIG1pbkZyYWN0aW9uLCBtYXhGcmFjdGlvbikge1xuICB2YXIgY3V0ID0gbWF4RnJhY3Rpb24gLSBtaW5GcmFjdGlvbjtcbiAgdmFyIG0gPSB4LnRvRml4ZWQobWF4RnJhY3Rpb24pO1xuXG4gIHdoaWxlIChjdXQgPiAwICYmIG1bbS5sZW5ndGggLSAxXSA9PT0gJzAnKSB7XG4gICAgbSA9IG0uc2xpY2UoMCwgbS5sZW5ndGggLSAxKTtcbiAgICBjdXQtLTtcbiAgfVxuXG4gIGlmIChtW20ubGVuZ3RoIC0gMV0gPT09ICcuJykge1xuICAgIG0gPSBtLnNsaWNlKDAsIG0ubGVuZ3RoIC0gMSk7XG4gIH1cblxuICB2YXIgaW50ID0gbS5zcGxpdCgnLicpWzBdLmxlbmd0aDtcblxuICBpZiAoaW50IDwgbWluSW50ZWdlcikge1xuICAgIHZhciB6ID0gJyc7XG5cbiAgICBmb3IgKDsgei5sZW5ndGggPCBtaW5JbnRlZ2VyIC0gaW50OyB6ICs9ICcwJykge1xuICAgICAgO1xuICAgIH1cblxuICAgIG0gPSB6ICsgbTtcbiAgfVxuXG4gIHJldHVybiBtO1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1lcmljVG9TdHJpbmcoaW50ZXJuYWxTbG90TWFwLCBwbCwgeCkge1xuICB2YXIgbWluaW11bVNpZ25pZmljYW50RGlnaXRzID0gaW50bF91dGlsc18xLmdldEludGVybmFsU2xvdChpbnRlcm5hbFNsb3RNYXAsIHBsLCAnbWluaW11bVNpZ25pZmljYW50RGlnaXRzJyk7XG4gIHZhciBtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBpbnRsX3V0aWxzXzEuZ2V0SW50ZXJuYWxTbG90KGludGVybmFsU2xvdE1hcCwgcGwsICdtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMnKTtcblxuICBpZiAobWluaW11bVNpZ25pZmljYW50RGlnaXRzICE9PSB1bmRlZmluZWQgJiYgbWF4aW11bVNpZ25pZmljYW50RGlnaXRzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdG9SYXdQcmVjaXNpb24oeCwgbWluaW11bVNpZ25pZmljYW50RGlnaXRzLCBtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMpO1xuICB9XG5cbiAgcmV0dXJuIHRvUmF3Rml4ZWQoeCwgaW50bF91dGlsc18xLmdldEludGVybmFsU2xvdChpbnRlcm5hbFNsb3RNYXAsIHBsLCAnbWluaW11bUludGVnZXJEaWdpdHMnKSwgaW50bF91dGlsc18xLmdldEludGVybmFsU2xvdChpbnRlcm5hbFNsb3RNYXAsIHBsLCAnbWluaW11bUZyYWN0aW9uRGlnaXRzJyksIGludGxfdXRpbHNfMS5nZXRJbnRlcm5hbFNsb3QoaW50ZXJuYWxTbG90TWFwLCBwbCwgJ21heGltdW1GcmFjdGlvbkRpZ2l0cycpKTtcbn1cblxudmFyIFBsdXJhbFJ1bGVzID1cbi8qKiBAY2xhc3MgKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1cmFsUnVsZXMobG9jYWxlcywgb3B0aW9ucykge1xuICAgIC8vIHRlc3QyNjIvdGVzdC9pbnRsNDAyL1JlbGF0aXZlVGltZUZvcm1hdC9jb25zdHJ1Y3Rvci9jb25zdHJ1Y3Rvci9uZXd0YXJnZXQtdW5kZWZpbmVkLmpzXG4gICAgLy8gQ2Fubm90IHVzZSBgbmV3LnRhcmdldGAgYmMgb2YgSUUxMSAmIFRTIHRyYW5zcGlsZXMgaXQgdG8gc29tZXRoaW5nIGVsc2VcbiAgICB2YXIgbmV3VGFyZ2V0ID0gdGhpcyAmJiB0aGlzIGluc3RhbmNlb2YgUGx1cmFsUnVsZXMgPyB0aGlzLmNvbnN0cnVjdG9yIDogdm9pZCAwO1xuXG4gICAgaWYgKCFuZXdUYXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnRsLlBsdXJhbFJ1bGVzIG11c3QgYmUgY2FsbGVkIHdpdGggJ25ldydcIik7XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3RlZExvY2FsZXMgPSBpbnRsX3V0aWxzXzEuZ2V0Q2Fub25pY2FsTG9jYWxlcyhsb2NhbGVzKTtcbiAgICB2YXIgb3B0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgb3B0cyA9IG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiBpbnRsX3V0aWxzXzEudG9PYmplY3Qob3B0aW9ucyk7XG4gICAgaW50bF91dGlsc18xLnNldEludGVybmFsU2xvdChQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18sIHRoaXMsICdpbml0aWFsaXplZFBsdXJhbFJ1bGVzJywgdHJ1ZSk7XG4gICAgdmFyIG1hdGNoZXIgPSBpbnRsX3V0aWxzXzEuZ2V0T3B0aW9uKG9wdHMsICdsb2NhbGVNYXRjaGVyJywgJ3N0cmluZycsIFsnYmVzdCBmaXQnLCAnbG9va3VwJ10sICdiZXN0IGZpdCcpO1xuICAgIG9wdC5sb2NhbGVNYXRjaGVyID0gbWF0Y2hlcjtcbiAgICBpbnRsX3V0aWxzXzEuc2V0SW50ZXJuYWxTbG90KFBsdXJhbFJ1bGVzLl9fSU5URVJOQUxfU0xPVF9NQVBfXywgdGhpcywgJ3R5cGUnLCBpbnRsX3V0aWxzXzEuZ2V0T3B0aW9uKG9wdHMsICd0eXBlJywgJ3N0cmluZycsIFsnY2FyZGluYWwnLCAnb3JkaW5hbCddLCAnY2FyZGluYWwnKSk7XG4gICAgaW50bF91dGlsc18xLnNldE51bWJlckZvcm1hdERpZ2l0T3B0aW9ucyhQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18sIHRoaXMsIG9wdHMsIDAsIDMpO1xuICAgIHZhciByID0gaW50bF91dGlsc18xLmNyZWF0ZVJlc29sdmVMb2NhbGUoUGx1cmFsUnVsZXMuZ2V0RGVmYXVsdExvY2FsZSkoUGx1cmFsUnVsZXMuYXZhaWxhYmxlTG9jYWxlcywgcmVxdWVzdGVkTG9jYWxlcywgb3B0LCBQbHVyYWxSdWxlcy5yZWxldmFudEV4dGVuc2lvbktleXMsIFBsdXJhbFJ1bGVzLmxvY2FsZURhdGEpO1xuICAgIGludGxfdXRpbHNfMS5zZXRJbnRlcm5hbFNsb3QoUGx1cmFsUnVsZXMuX19JTlRFUk5BTF9TTE9UX01BUF9fLCB0aGlzLCAnbG9jYWxlJywgci5sb2NhbGUpO1xuICB9XG5cbiAgUGx1cmFsUnVsZXMucHJvdG90eXBlLnJlc29sdmVkT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFsaWRhdGVJbnN0YW5jZSh0aGlzLCAncmVzb2x2ZWRPcHRpb25zJyk7XG4gICAgdmFyIG9wdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9wdHMubG9jYWxlID0gaW50bF91dGlsc18xLmdldEludGVybmFsU2xvdChQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18sIHRoaXMsICdsb2NhbGUnKTtcbiAgICBvcHRzLnR5cGUgPSBpbnRsX3V0aWxzXzEuZ2V0SW50ZXJuYWxTbG90KFBsdXJhbFJ1bGVzLl9fSU5URVJOQUxfU0xPVF9NQVBfXywgdGhpcywgJ3R5cGUnKTtcbiAgICBbJ21pbmltdW1JbnRlZ2VyRGlnaXRzJywgJ21pbmltdW1GcmFjdGlvbkRpZ2l0cycsICdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLCAnbWluaW11bVNpZ25pZmljYW50RGlnaXRzJywgJ21heGltdW1TaWduaWZpY2FudERpZ2l0cyddLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgdmFsID0gaW50bF91dGlsc18xLmdldEludGVybmFsU2xvdChQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18sIF90aGlzLCBmaWVsZCk7XG5cbiAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRzW2ZpZWxkXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvcHRzLnBsdXJhbENhdGVnb3JpZXMgPSBfX3NwcmVhZEFycmF5cyhQbHVyYWxSdWxlcy5sb2NhbGVEYXRhW29wdHMubG9jYWxlXS5jYXRlZ29yaWVzW29wdHMudHlwZV0pO1xuICAgIHJldHVybiBvcHRzO1xuICB9O1xuXG4gIFBsdXJhbFJ1bGVzLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsaWRhdGVJbnN0YW5jZSh0aGlzLCAnc2VsZWN0Jyk7XG4gICAgdmFyIGxvY2FsZSA9IGludGxfdXRpbHNfMS5nZXRJbnRlcm5hbFNsb3QoUGx1cmFsUnVsZXMuX19JTlRFUk5BTF9TTE9UX01BUF9fLCB0aGlzLCAnbG9jYWxlJyk7XG4gICAgdmFyIHR5cGUgPSBpbnRsX3V0aWxzXzEuZ2V0SW50ZXJuYWxTbG90KFBsdXJhbFJ1bGVzLl9fSU5URVJOQUxfU0xPVF9NQVBfXywgdGhpcywgJ3R5cGUnKTtcbiAgICByZXR1cm4gUGx1cmFsUnVsZXMubG9jYWxlRGF0YVtsb2NhbGVdLmZuKGZvcm1hdE51bWVyaWNUb1N0cmluZyhQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18sIHRoaXMsIE1hdGguYWJzKE51bWJlcih2YWwpKSksIHR5cGUgPT0gJ29yZGluYWwnKTtcbiAgfTtcblxuICBQbHVyYWxSdWxlcy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0IEludGwuUGx1cmFsUnVsZXNdJztcbiAgfTtcblxuICBQbHVyYWxSdWxlcy5zdXBwb3J0ZWRMb2NhbGVzT2YgPSBmdW5jdGlvbiAobG9jYWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBpbnRsX3V0aWxzXzEuc3VwcG9ydGVkTG9jYWxlcyhQbHVyYWxSdWxlcy5hdmFpbGFibGVMb2NhbGVzLCBpbnRsX3V0aWxzXzEuZ2V0Q2Fub25pY2FsTG9jYWxlcyhsb2NhbGVzKSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgUGx1cmFsUnVsZXMuX19hZGRMb2NhbGVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkYXRhID0gW107XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgZGF0YVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cblxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gX2xvb3BfMShkYXR1bSkge1xuICAgICAgdmFyIGF2YWlsYWJsZUxvY2FsZXMgPSBPYmplY3Qua2V5cyhfX3NwcmVhZEFycmF5cyhkYXR1bS5hdmFpbGFibGVMb2NhbGVzLCBPYmplY3Qua2V5cyhkYXR1bS5hbGlhc2VzKSwgT2JqZWN0LmtleXMoZGF0dW0ucGFyZW50TG9jYWxlcykpLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBrKSB7XG4gICAgICAgIGFsbFtrXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgICB9LCB7fSkpO1xuICAgICAgYXZhaWxhYmxlTG9jYWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBQbHVyYWxSdWxlcy5sb2NhbGVEYXRhW2xvY2FsZV0gPSBpbnRsX3V0aWxzXzEudW5wYWNrRGF0YShsb2NhbGUsIGRhdHVtKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChpbnRsX3V0aWxzXzEuaXNNaXNzaW5nTG9jYWxlRGF0YUVycm9yKGUpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBqdXN0IGRvbid0IGhhdmUgZGF0YSBmb3IgY2VydGFpbiBsb2NhbGUsIHRoYXQncyBva1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBfYSA9IDAsIGRhdGFfMSA9IGRhdGE7IF9hIDwgZGF0YV8xLmxlbmd0aDsgX2ErKykge1xuICAgICAgdmFyIGRhdHVtID0gZGF0YV8xW19hXTtcblxuICAgICAgX2xvb3BfMShkYXR1bSk7XG4gICAgfVxuXG4gICAgUGx1cmFsUnVsZXMuYXZhaWxhYmxlTG9jYWxlcyA9IE9iamVjdC5rZXlzKFBsdXJhbFJ1bGVzLmxvY2FsZURhdGEpO1xuXG4gICAgaWYgKCFQbHVyYWxSdWxlcy5fX2RlZmF1bHRMb2NhbGUpIHtcbiAgICAgIFBsdXJhbFJ1bGVzLl9fZGVmYXVsdExvY2FsZSA9IFBsdXJhbFJ1bGVzLmF2YWlsYWJsZUxvY2FsZXNbMF07XG4gICAgfVxuICB9O1xuXG4gIFBsdXJhbFJ1bGVzLmdldERlZmF1bHRMb2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFBsdXJhbFJ1bGVzLl9fZGVmYXVsdExvY2FsZTtcbiAgfTtcblxuICBQbHVyYWxSdWxlcy5sb2NhbGVEYXRhID0ge307XG4gIFBsdXJhbFJ1bGVzLmF2YWlsYWJsZUxvY2FsZXMgPSBbXTtcbiAgUGx1cmFsUnVsZXMuX19kZWZhdWx0TG9jYWxlID0gJ2VuJztcbiAgUGx1cmFsUnVsZXMucmVsZXZhbnRFeHRlbnNpb25LZXlzID0gW107XG4gIFBsdXJhbFJ1bGVzLnBvbHlmaWxsZWQgPSB0cnVlO1xuICBQbHVyYWxSdWxlcy5fX0lOVEVSTkFMX1NMT1RfTUFQX18gPSBuZXcgV2Vha01hcCgpO1xuICByZXR1cm4gUGx1cmFsUnVsZXM7XG59KCk7XG5cbmV4cG9ydHMuUGx1cmFsUnVsZXMgPSBQbHVyYWxSdWxlcztcblxudHJ5IHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvdGVzdDI2Mi9ibG9iL21hc3Rlci90ZXN0L2ludGw0MDIvUGx1cmFsUnVsZXMvbGVuZ3RoLmpzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbHVyYWxSdWxlcywgJ2xlbmd0aCcsIHtcbiAgICB2YWx1ZTogMCxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pOyAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS90ZXN0MjYyL2Jsb2IvbWFzdGVyL3Rlc3QvaW50bDQwMi9SZWxhdGl2ZVRpbWVGb3JtYXQvY29uc3RydWN0b3IvbGVuZ3RoLmpzXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsdXJhbFJ1bGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciwgJ2xlbmd0aCcsIHtcbiAgICB2YWx1ZTogMCxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pOyAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS90ZXN0MjYyL2Jsb2IvbWFzdGVyL3Rlc3QvaW50bDQwMi9SZWxhdGl2ZVRpbWVGb3JtYXQvY29uc3RydWN0b3Ivc3VwcG9ydGVkTG9jYWxlc09mL2xlbmd0aC5qc1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbHVyYWxSdWxlcy5zdXBwb3J0ZWRMb2NhbGVzT2YsICdsZW5ndGgnLCB7XG4gICAgdmFsdWU6IDEsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn0gY2F0Y2ggKGV4KSB7Ly8gTWV0YSBmaXhlcyBmb3IgdGVzdDI2MlxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3012\n")},4574:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.PluralRules && typeof Intl.PluralRules.__addLocaleData === \'function\') {\n  Intl.PluralRules.__addLocaleData({\n    "data": {\n      "en": {\n        "categories": {\n          "cardinal": ["one", "other"],\n          "ordinal": ["one", "two", "few", "other"]\n        },\n        "fn": function fn(n, ord) {\n          var s = String(n).split(\'.\'),\n              v0 = !s[1],\n              t0 = Number(s[0]) == n,\n              n10 = t0 && s[0].slice(-1),\n              n100 = t0 && s[0].slice(-2);\n          if (ord) return n10 == 1 && n100 != 11 ? \'one\' : n10 == 2 && n100 != 12 ? \'two\' : n10 == 3 && n100 != 13 ? \'few\' : \'other\';\n          return n == 1 && v0 ? \'one\' : \'other\';\n        }\n      }\n    },\n    "aliases": {},\n    "parentLocales": {\n      "en-150": "en-001",\n      "en-AG": "en-001",\n      "en-AI": "en-001",\n      "en-AU": "en-001",\n      "en-BB": "en-001",\n      "en-BM": "en-001",\n      "en-BS": "en-001",\n      "en-BW": "en-001",\n      "en-BZ": "en-001",\n      "en-CA": "en-001",\n      "en-CC": "en-001",\n      "en-CK": "en-001",\n      "en-CM": "en-001",\n      "en-CX": "en-001",\n      "en-CY": "en-001",\n      "en-DG": "en-001",\n      "en-DM": "en-001",\n      "en-ER": "en-001",\n      "en-FJ": "en-001",\n      "en-FK": "en-001",\n      "en-FM": "en-001",\n      "en-GB": "en-001",\n      "en-GD": "en-001",\n      "en-GG": "en-001",\n      "en-GH": "en-001",\n      "en-GI": "en-001",\n      "en-GM": "en-001",\n      "en-GY": "en-001",\n      "en-HK": "en-001",\n      "en-IE": "en-001",\n      "en-IL": "en-001",\n      "en-IM": "en-001",\n      "en-IN": "en-001",\n      "en-IO": "en-001",\n      "en-JE": "en-001",\n      "en-JM": "en-001",\n      "en-KE": "en-001",\n      "en-KI": "en-001",\n      "en-KN": "en-001",\n      "en-KY": "en-001",\n      "en-LC": "en-001",\n      "en-LR": "en-001",\n      "en-LS": "en-001",\n      "en-MG": "en-001",\n      "en-MO": "en-001",\n      "en-MS": "en-001",\n      "en-MT": "en-001",\n      "en-MU": "en-001",\n      "en-MW": "en-001",\n      "en-MY": "en-001",\n      "en-NA": "en-001",\n      "en-NF": "en-001",\n      "en-NG": "en-001",\n      "en-NR": "en-001",\n      "en-NU": "en-001",\n      "en-NZ": "en-001",\n      "en-PG": "en-001",\n      "en-PH": "en-001",\n      "en-PK": "en-001",\n      "en-PN": "en-001",\n      "en-PW": "en-001",\n      "en-RW": "en-001",\n      "en-SB": "en-001",\n      "en-SC": "en-001",\n      "en-SD": "en-001",\n      "en-SG": "en-001",\n      "en-SH": "en-001",\n      "en-SL": "en-001",\n      "en-SS": "en-001",\n      "en-SX": "en-001",\n      "en-SZ": "en-001",\n      "en-TC": "en-001",\n      "en-TK": "en-001",\n      "en-TO": "en-001",\n      "en-TT": "en-001",\n      "en-TV": "en-001",\n      "en-TZ": "en-001",\n      "en-UG": "en-001",\n      "en-VC": "en-001",\n      "en-VG": "en-001",\n      "en-VU": "en-001",\n      "en-WS": "en-001",\n      "en-ZA": "en-001",\n      "en-ZM": "en-001",\n      "en-ZW": "en-001",\n      "en-AT": "en-150",\n      "en-BE": "en-150",\n      "en-CH": "en-150",\n      "en-DE": "en-150",\n      "en-DK": "en-150",\n      "en-FI": "en-150",\n      "en-NL": "en-150",\n      "en-SE": "en-150",\n      "en-SI": "en-150"\n    },\n    "availableLocales": ["en"]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaW50bC1wbHVyYWxydWxlcy9kaXN0L2xvY2FsZS1kYXRhL2VuLmpzPzQ3N2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGdlbmVyYXRlZCAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5pZiAoSW50bC5QbHVyYWxSdWxlcyAmJiB0eXBlb2YgSW50bC5QbHVyYWxSdWxlcy5fX2FkZExvY2FsZURhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgSW50bC5QbHVyYWxSdWxlcy5fX2FkZExvY2FsZURhdGEoe1xuICAgIFwiZGF0YVwiOiB7XG4gICAgICBcImVuXCI6IHtcbiAgICAgICAgXCJjYXRlZ29yaWVzXCI6IHtcbiAgICAgICAgICBcImNhcmRpbmFsXCI6IFtcIm9uZVwiLCBcIm90aGVyXCJdLFxuICAgICAgICAgIFwib3JkaW5hbFwiOiBbXCJvbmVcIiwgXCJ0d29cIiwgXCJmZXdcIiwgXCJvdGhlclwiXVxuICAgICAgICB9LFxuICAgICAgICBcImZuXCI6IGZ1bmN0aW9uIGZuKG4sIG9yZCkge1xuICAgICAgICAgIHZhciBzID0gU3RyaW5nKG4pLnNwbGl0KCcuJyksXG4gICAgICAgICAgICAgIHYwID0gIXNbMV0sXG4gICAgICAgICAgICAgIHQwID0gTnVtYmVyKHNbMF0pID09IG4sXG4gICAgICAgICAgICAgIG4xMCA9IHQwICYmIHNbMF0uc2xpY2UoLTEpLFxuICAgICAgICAgICAgICBuMTAwID0gdDAgJiYgc1swXS5zbGljZSgtMik7XG4gICAgICAgICAgaWYgKG9yZCkgcmV0dXJuIG4xMCA9PSAxICYmIG4xMDAgIT0gMTEgPyAnb25lJyA6IG4xMCA9PSAyICYmIG4xMDAgIT0gMTIgPyAndHdvJyA6IG4xMCA9PSAzICYmIG4xMDAgIT0gMTMgPyAnZmV3JyA6ICdvdGhlcic7XG4gICAgICAgICAgcmV0dXJuIG4gPT0gMSAmJiB2MCA/ICdvbmUnIDogJ290aGVyJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJhbGlhc2VzXCI6IHt9LFxuICAgIFwicGFyZW50TG9jYWxlc1wiOiB7XG4gICAgICBcImVuLTE1MFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1BR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1BSVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1BVVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1CQlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1CTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1CU1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1CV1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1CWlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DQVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DQ1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DS1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DWFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1DWVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1ER1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1ETVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1FUlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1GSlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1GS1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1GTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HQlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HRFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HSFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HSVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1HWVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1IS1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1JRVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1JTFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1JTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1JTlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1JT1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1KRVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1KTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1LRVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1LSVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1LTlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1LWVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1MQ1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1MUlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1MU1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NT1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NU1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NVFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NVVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NV1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1NWVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1OQVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1ORlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1OR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1OUlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1OVVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1OWlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1QR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1QSFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1QS1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1QTlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1QV1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1SV1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TQlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TQ1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TRFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TSFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TTFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TU1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TWFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1TWlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1UQ1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1US1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1UT1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1UVFwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1UVlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1UWlwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1VR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1WQ1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1WR1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1WVVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1XU1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1aQVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1aTVwiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1aV1wiOiBcImVuLTAwMVwiLFxuICAgICAgXCJlbi1BVFwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1CRVwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1DSFwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1ERVwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1ES1wiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1GSVwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1OTFwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1TRVwiOiBcImVuLTE1MFwiLFxuICAgICAgXCJlbi1TSVwiOiBcImVuLTE1MFwiXG4gICAgfSxcbiAgICBcImF2YWlsYWJsZUxvY2FsZXNcIjogW1wiZW5cIl1cbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4574\n')},3745:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.PluralRules && typeof Intl.PluralRules.__addLocaleData === \'function\') {\n  Intl.PluralRules.__addLocaleData({\n    "data": {\n      "es": {\n        "categories": {\n          "cardinal": ["one", "other"],\n          "ordinal": ["other"]\n        },\n        "fn": function fn(n, ord) {\n          if (ord) return \'other\';\n          return n == 1 ? \'one\' : \'other\';\n        }\n      }\n    },\n    "aliases": {},\n    "parentLocales": {\n      "es-AR": "es-419",\n      "es-BO": "es-419",\n      "es-BR": "es-419",\n      "es-BZ": "es-419",\n      "es-CL": "es-419",\n      "es-CO": "es-419",\n      "es-CR": "es-419",\n      "es-CU": "es-419",\n      "es-DO": "es-419",\n      "es-EC": "es-419",\n      "es-GT": "es-419",\n      "es-HN": "es-419",\n      "es-MX": "es-419",\n      "es-NI": "es-419",\n      "es-PA": "es-419",\n      "es-PE": "es-419",\n      "es-PR": "es-419",\n      "es-PY": "es-419",\n      "es-SV": "es-419",\n      "es-US": "es-419",\n      "es-UY": "es-419",\n      "es-VE": "es-419"\n    },\n    "availableLocales": ["es"]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0NS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXBsdXJhbHJ1bGVzL2Rpc3QvbG9jYWxlLWRhdGEvZXMuanM/M2ZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZ2VuZXJhdGVkICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmlmIChJbnRsLlBsdXJhbFJ1bGVzICYmIHR5cGVvZiBJbnRsLlBsdXJhbFJ1bGVzLl9fYWRkTG9jYWxlRGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICBJbnRsLlBsdXJhbFJ1bGVzLl9fYWRkTG9jYWxlRGF0YSh7XG4gICAgXCJkYXRhXCI6IHtcbiAgICAgIFwiZXNcIjoge1xuICAgICAgICBcImNhdGVnb3JpZXNcIjoge1xuICAgICAgICAgIFwiY2FyZGluYWxcIjogW1wib25lXCIsIFwib3RoZXJcIl0sXG4gICAgICAgICAgXCJvcmRpbmFsXCI6IFtcIm90aGVyXCJdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZm5cIjogZnVuY3Rpb24gZm4obiwgb3JkKSB7XG4gICAgICAgICAgaWYgKG9yZCkgcmV0dXJuICdvdGhlcic7XG4gICAgICAgICAgcmV0dXJuIG4gPT0gMSA/ICdvbmUnIDogJ290aGVyJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJhbGlhc2VzXCI6IHt9LFxuICAgIFwicGFyZW50TG9jYWxlc1wiOiB7XG4gICAgICBcImVzLUFSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJaXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNMXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNVXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLURPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUVDXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUdUXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUhOXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLU1YXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLU5JXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBBXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBFXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBZXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVNWXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVVTXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVVZXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVZFXCI6IFwiZXMtNDE5XCJcbiAgICB9LFxuICAgIFwiYXZhaWxhYmxlTG9jYWxlc1wiOiBbXCJlc1wiXVxuICB9KTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3745\n')},6867:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.PluralRules && typeof Intl.PluralRules.__addLocaleData === \'function\') {\n  Intl.PluralRules.__addLocaleData({\n    "data": {\n      "ses": {\n        "categories": {\n          "cardinal": ["other"],\n          "ordinal": ["other"]\n        },\n        "fn": function fn(n, ord) {\n          return \'other\';\n        }\n      }\n    },\n    "aliases": {},\n    "parentLocales": {},\n    "availableLocales": ["ses"]\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg2Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCO0FBQ2pCLHVCQUF1QjtBQUN2QjtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXBsdXJhbHJ1bGVzL2Rpc3QvbG9jYWxlLWRhdGEvc2VzLmpzPzI5MzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGdlbmVyYXRlZCAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5pZiAoSW50bC5QbHVyYWxSdWxlcyAmJiB0eXBlb2YgSW50bC5QbHVyYWxSdWxlcy5fX2FkZExvY2FsZURhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgSW50bC5QbHVyYWxSdWxlcy5fX2FkZExvY2FsZURhdGEoe1xuICAgIFwiZGF0YVwiOiB7XG4gICAgICBcInNlc1wiOiB7XG4gICAgICAgIFwiY2F0ZWdvcmllc1wiOiB7XG4gICAgICAgICAgXCJjYXJkaW5hbFwiOiBbXCJvdGhlclwiXSxcbiAgICAgICAgICBcIm9yZGluYWxcIjogW1wib3RoZXJcIl1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmblwiOiBmdW5jdGlvbiBmbihuLCBvcmQpIHtcbiAgICAgICAgICByZXR1cm4gJ290aGVyJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJhbGlhc2VzXCI6IHt9LFxuICAgIFwicGFyZW50TG9jYWxlc1wiOiB7fSxcbiAgICBcImF2YWlsYWJsZUxvY2FsZXNcIjogW1wic2VzXCJdXG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6867\n')},2157:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar core_1 = __webpack_require__(3012);\n\nif (typeof Intl.PluralRules === 'undefined' || !Intl.PluralRules.polyfilled && new Intl.PluralRules('en', {\n  minimumFractionDigits: 2\n}).select(1) === 'one') {\n  Object.defineProperty(Intl, 'PluralRules', {\n    value: core_1.PluralRules,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE1Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsYUFBYSxtQkFBTyxDQUFDLElBQVE7O0FBRTdCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXBsdXJhbHJ1bGVzL2Rpc3QvcG9seWZpbGwuanM/YWRjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5cbmlmICh0eXBlb2YgSW50bC5QbHVyYWxSdWxlcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIUludGwuUGx1cmFsUnVsZXMucG9seWZpbGxlZCAmJiBuZXcgSW50bC5QbHVyYWxSdWxlcygnZW4nLCB7XG4gIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMlxufSkuc2VsZWN0KDEpID09PSAnb25lJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50bCwgJ1BsdXJhbFJ1bGVzJywge1xuICAgIHZhbHVlOiBjb3JlXzEuUGx1cmFsUnVsZXMsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2157\n")},3228:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("__webpack_require__(2157);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIyOC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBTyxDQUFDLElBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtcGx1cmFscnVsZXMvcG9seWZpbGwuanM/MWEzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL2Rpc3QvcG9seWZpbGwnKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3228\n")},9905:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar intl_utils_1 = __webpack_require__(2650);\n\nfunction unpackData(locale, localeData) {\n  var localeHierarchy = intl_utils_1.getLocaleHierarchy(locale, localeData.aliases, localeData.parentLocales);\n  var dataToMerge = localeHierarchy.map(function (l) {\n    return localeData.data[l];\n  }).filter(Boolean);\n\n  if (!dataToMerge.length) {\n    throw new Error(\"Missing locale data for \\\"\" + locale + \"\\\", lookup hierarchy: \" + localeHierarchy.join(', '));\n  }\n\n  dataToMerge.reverse();\n  return dataToMerge.reduce(function (all, d) {\n    return __assign(__assign({}, all), d);\n  }, {\n    nu: []\n  });\n}\n/**\n * https://tc39.es/proposal-intl-relative-time/#sec-singularrelativetimeunit\n * @param unit\n */\n\n\nfunction singularRelativeTimeUnit(unit) {\n  intl_utils_1.invariant(typeof unit === 'string', \"unit must be a string, instead got \" + typeof unit, TypeError);\n  if (unit === 'seconds') return 'second';\n  if (unit === 'minutes') return 'minute';\n  if (unit === 'hours') return 'hour';\n  if (unit === 'days') return 'day';\n  if (unit === 'weeks') return 'week';\n  if (unit === 'months') return 'month';\n  if (unit === 'quarters') return 'quarter';\n  if (unit === 'years') return 'year';\n\n  if (unit !== 'second' && unit !== 'minute' && unit !== 'hour' && unit !== 'day' && unit !== 'week' && unit !== 'month' && unit !== 'quarter' && unit !== 'year') {\n    throw new RangeError(\"Invalid unit \" + unit);\n  }\n\n  return unit;\n}\n\nvar NUMBERING_SYSTEM_REGEX = /^[a-z0-9]{3,8}(-[a-z0-9]{3,8})*$/i;\n/**\n * https://tc39.es/proposal-intl-relative-time/#sec-makepartslist\n * @param pattern\n * @param unit\n * @param parts\n */\n\nfunction makePartsList(pattern, unit, parts) {\n  var e_1, _a, e_2, _b;\n\n  var patternParts = intl_utils_1.partitionPattern(pattern);\n  var result = [];\n\n  try {\n    for (var patternParts_1 = __values(patternParts), patternParts_1_1 = patternParts_1.next(); !patternParts_1_1.done; patternParts_1_1 = patternParts_1.next()) {\n      var patternPart = patternParts_1_1.value;\n\n      if (intl_utils_1.isLiteralPart(patternPart)) {\n        result.push({\n          type: 'literal',\n          value: patternPart.value\n        });\n      } else {\n        intl_utils_1.invariant(patternPart.type === '0', \"Malformed pattern \" + pattern);\n\n        try {\n          for (var parts_1 = (e_2 = void 0, __values(parts)), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {\n            var part = parts_1_1.value;\n            result.push({\n              type: part.type,\n              value: part.value,\n              unit: unit\n            });\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (parts_1_1 && !parts_1_1.done && (_b = parts_1.return)) _b.call(parts_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (patternParts_1_1 && !patternParts_1_1.done && (_a = patternParts_1.return)) _a.call(patternParts_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return result;\n}\n\nfunction objectIs(x, y) {\n  if (Object.is) {\n    return Object.is(x, y);\n  } // SameValue algorithm\n\n\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } // Step 6.a: NaN == NaN\n\n\n  return x !== x && y !== y;\n}\n\nfunction toString(arg) {\n  return arg + '';\n}\n/**\n * PartitionRelativeTimePattern\n * @param rtf\n * @param value\n * @param unit\n */\n\n\nfunction partitionRelativeTimePattern(internalSlotMap, rtf, value, unit) {\n  intl_utils_1.invariant(typeof value === 'number', \"value must be number, instead got \" + typeof value, TypeError);\n  intl_utils_1.invariant(typeof unit === 'string', \"unit must be number, instead got \" + typeof value, TypeError);\n\n  if (isNaN(value) || value === Infinity || value === -Infinity) {\n    throw new RangeError(\"Invalid value \" + value);\n  }\n\n  var resolvedUnit = singularRelativeTimeUnit(unit);\n  var fields = intl_utils_1.getInternalSlot(internalSlotMap, rtf, 'fields');\n  var style = intl_utils_1.getInternalSlot(internalSlotMap, rtf, 'style');\n  var entry = resolvedUnit;\n\n  if (style === 'short') {\n    entry = unit + \"-short\";\n  } else if (style === 'narrow') {\n    entry = unit + \"-narrow\";\n  }\n\n  if (!(entry in fields)) {\n    entry = unit;\n  }\n\n  var patterns = fields[entry];\n  var numeric = intl_utils_1.getInternalSlot(internalSlotMap, rtf, 'numeric');\n\n  if (numeric === 'auto') {\n    if (toString(value) in patterns) {\n      return [{\n        type: 'literal',\n        value: patterns[toString(value)]\n      }];\n    }\n  }\n\n  var tl = 'future';\n\n  if (objectIs(value, -0) || value < 0) {\n    tl = 'past';\n  }\n\n  var po = patterns[tl];\n  var pluralRules = intl_utils_1.getInternalSlot(internalSlotMap, rtf, 'pluralRules');\n  var numberFormat = intl_utils_1.getInternalSlot(internalSlotMap, rtf, 'numberFormat');\n  var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) : // TODO: If formatToParts is not supported, we assume the whole formatted\n  // number is a part\n  [{\n    type: 'literal',\n    value: numberFormat.format(Math.abs(value)),\n    unit: unit\n  }];\n  var pr = pluralRules.select(value);\n  var pattern = po[pr];\n  return makePartsList(pattern, resolvedUnit, fv);\n}\n\nvar RelativeTimeFormat =\n/** @class */\nfunction () {\n  function RelativeTimeFormat(locales, options) {\n    // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js\n    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n    var newTarget = this && this instanceof RelativeTimeFormat ? this.constructor : void 0;\n\n    if (!newTarget) {\n      throw new TypeError(\"Intl.RelativeTimeFormat must be called with 'new'\");\n    }\n\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'initializedRelativeTimeFormat', true);\n    var requestedLocales = intl_utils_1.getCanonicalLocales(locales);\n    var opt = Object.create(null);\n    var opts = options === undefined ? Object.create(null) : intl_utils_1.toObject(options);\n    var matcher = intl_utils_1.getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher;\n    var numberingSystem = intl_utils_1.getOption(opts, 'numberingSystem', 'string', undefined, undefined);\n\n    if (numberingSystem !== undefined) {\n      if (!NUMBERING_SYSTEM_REGEX.test(numberingSystem)) {\n        throw new RangeError(\"Invalid numbering system \" + numberingSystem);\n      }\n    }\n\n    opt.nu = numberingSystem;\n    var r = intl_utils_1.createResolveLocale(RelativeTimeFormat.getDefaultLocale)(RelativeTimeFormat.availableLocales, requestedLocales, opt, RelativeTimeFormat.relevantExtensionKeys, RelativeTimeFormat.localeData);\n    var locale = r.locale,\n        nu = r.nu;\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'locale', locale);\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'style', intl_utils_1.getOption(opts, 'style', 'string', ['long', 'narrow', 'short'], 'long'));\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'numeric', intl_utils_1.getOption(opts, 'numeric', 'string', ['always', 'auto'], 'always'));\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'fields', RelativeTimeFormat.localeData[locale]);\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'numberFormat', new Intl.NumberFormat(locales));\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'pluralRules', new Intl.PluralRules(locales));\n    intl_utils_1.setInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'numberingSystem', nu);\n  }\n\n  RelativeTimeFormat.prototype.format = function (value, unit) {\n    if (typeof this !== 'object') {\n      throw new TypeError('format was called on a non-object');\n    }\n\n    if (!intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'initializedRelativeTimeFormat')) {\n      throw new TypeError('format was called on a invalid context');\n    }\n\n    return partitionRelativeTimePattern(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, Number(value), toString(unit)).map(function (el) {\n      return el.value;\n    }).join('');\n  };\n\n  RelativeTimeFormat.prototype.formatToParts = function (value, unit) {\n    if (typeof this !== 'object') {\n      throw new TypeError('formatToParts was called on a non-object');\n    }\n\n    if (!intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'initializedRelativeTimeFormat')) {\n      throw new TypeError('formatToParts was called on a invalid context');\n    }\n\n    return partitionRelativeTimePattern(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, Number(value), toString(unit));\n  };\n\n  RelativeTimeFormat.prototype.resolvedOptions = function () {\n    if (typeof this !== 'object') {\n      throw new TypeError('resolvedOptions was called on a non-object');\n    }\n\n    if (!intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'initializedRelativeTimeFormat')) {\n      throw new TypeError('resolvedOptions was called on a invalid context');\n    } // test262/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js\n\n\n    return {\n      locale: intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'locale'),\n      style: intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'style'),\n      numeric: intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'numeric'),\n      numberingSystem: intl_utils_1.getInternalSlot(RelativeTimeFormat.__INTERNAL_SLOT_MAP__, this, 'numberingSystem')\n    };\n  };\n\n  RelativeTimeFormat.supportedLocalesOf = function (locales, options) {\n    return intl_utils_1.supportedLocales(RelativeTimeFormat.availableLocales, intl_utils_1.getCanonicalLocales(locales), options);\n  };\n\n  RelativeTimeFormat.__addLocaleData = function () {\n    var e_3, _a;\n\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    var _loop_1 = function _loop_1(datum) {\n      var availableLocales = Object.keys(__spread(datum.availableLocales, Object.keys(datum.aliases), Object.keys(datum.parentLocales)).reduce(function (all, k) {\n        all[k] = true;\n        return all;\n      }, {}));\n      availableLocales.forEach(function (locale) {\n        try {\n          RelativeTimeFormat.localeData[locale] = unpackData(locale, datum);\n        } catch (e) {// If we can't unpack this data, ignore the locale\n        }\n      });\n    };\n\n    try {\n      for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n        var datum = data_1_1.value;\n\n        _loop_1(datum);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    RelativeTimeFormat.availableLocales = Object.keys(RelativeTimeFormat.localeData);\n\n    if (!RelativeTimeFormat.__defaultLocale) {\n      RelativeTimeFormat.__defaultLocale = RelativeTimeFormat.availableLocales[0];\n    }\n  };\n\n  RelativeTimeFormat.getDefaultLocale = function () {\n    return RelativeTimeFormat.__defaultLocale;\n  };\n\n  RelativeTimeFormat.localeData = {};\n  RelativeTimeFormat.availableLocales = [];\n  RelativeTimeFormat.__defaultLocale = 'en';\n  RelativeTimeFormat.relevantExtensionKeys = ['nu'];\n  RelativeTimeFormat.polyfilled = true;\n  RelativeTimeFormat.__INTERNAL_SLOT_MAP__ = new WeakMap();\n  return RelativeTimeFormat;\n}();\n\nexports[\"default\"] = RelativeTimeFormat;\n\ntry {\n  // IE11 does not have Symbol\n  if (typeof Symbol !== 'undefined') {\n    Object.defineProperty(RelativeTimeFormat.prototype, Symbol.toStringTag, {\n      value: 'Intl.RelativeTimeFormat',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  } // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js\n\n\n  Object.defineProperty(RelativeTimeFormat.prototype.constructor, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js\n\n  Object.defineProperty(RelativeTimeFormat.supportedLocalesOf, 'length', {\n    value: 1,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n} catch (e) {// Meta fix so we're test262-compliant, not important\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9905\n")},8079:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat.__addLocaleData === \'function\') {\n  Intl.RelativeTimeFormat.__addLocaleData({\n    "data": {\n      "en-001": {\n        "year-short": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yr"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yr ago"\n          },\n          "-1": "last yr"\n        },\n        "year-narrow": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yr"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yr ago"\n          },\n          "-1": "last yr"\n        },\n        "quarter-short": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtr"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtr ago"\n          },\n          "-1": "last qtr."\n        },\n        "quarter-narrow": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtr"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtr ago"\n          },\n          "-1": "last qtr."\n        },\n        "month-short": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo",\n            "other": "in {0} mo"\n          },\n          "past": {\n            "one": "{0} mo ago",\n            "other": "{0} mo ago"\n          },\n          "-1": "last mo"\n        },\n        "month-narrow": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo",\n            "other": "in {0} mo"\n          },\n          "past": {\n            "one": "{0} mo ago",\n            "other": "{0} mo ago"\n          },\n          "-1": "last mo"\n        },\n        "week-short": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wk"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wk ago"\n          },\n          "-1": "last wk"\n        },\n        "week-narrow": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wk"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wk ago"\n          },\n          "-1": "last wk"\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hr"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hr ago"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hr"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hr ago"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min",\n            "other": "in {0} min"\n          },\n          "past": {\n            "one": "{0} min ago",\n            "other": "{0} min ago"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min",\n            "other": "in {0} min"\n          },\n          "past": {\n            "one": "{0} min ago",\n            "other": "{0} min ago"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec",\n            "other": "in {0} sec"\n          },\n          "past": {\n            "one": "{0} sec ago",\n            "other": "{0} sec ago"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec",\n            "other": "in {0} sec"\n          },\n          "past": {\n            "one": "{0} sec ago",\n            "other": "{0} sec ago"\n          }\n        }\n      },\n      "en-150": {\n        "year-short": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yr"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yr ago"\n          },\n          "-1": "last yr"\n        },\n        "year-narrow": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yr"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yr ago"\n          },\n          "-1": "last yr"\n        },\n        "quarter-short": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtr"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtr ago"\n          },\n          "-1": "last qtr."\n        },\n        "quarter-narrow": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtr"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtr ago"\n          },\n          "-1": "last qtr."\n        },\n        "month-short": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo",\n            "other": "in {0} mo"\n          },\n          "past": {\n            "one": "{0} mo ago",\n            "other": "{0} mo ago"\n          },\n          "-1": "last mo"\n        },\n        "month-narrow": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo",\n            "other": "in {0} mo"\n          },\n          "past": {\n            "one": "{0} mo ago",\n            "other": "{0} mo ago"\n          },\n          "-1": "last mo"\n        },\n        "week-short": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wk"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wk ago"\n          },\n          "-1": "last wk"\n        },\n        "week-narrow": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wk"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wk ago"\n          },\n          "-1": "last wk"\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hr"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hr ago"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hr"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hr ago"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min",\n            "other": "in {0} min"\n          },\n          "past": {\n            "one": "{0} min ago",\n            "other": "{0} min ago"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min",\n            "other": "in {0} min"\n          },\n          "past": {\n            "one": "{0} min ago",\n            "other": "{0} min ago"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec",\n            "other": "in {0} sec"\n          },\n          "past": {\n            "one": "{0} sec ago",\n            "other": "{0} sec ago"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec",\n            "other": "in {0} sec"\n          },\n          "past": {\n            "one": "{0} sec ago",\n            "other": "{0} sec ago"\n          }\n        }\n      },\n      "en-AU": {\n        "year-short": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yrs"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yrs ago"\n          },\n          "-1": "last yr"\n        },\n        "year-narrow": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr",\n            "other": "in {0} yrs"\n          },\n          "past": {\n            "one": "{0} yr ago",\n            "other": "{0} yrs ago"\n          },\n          "-1": "last yr"\n        },\n        "quarter-short": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtrs"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtrs ago"\n          },\n          "-1": "last qtr."\n        },\n        "quarter-narrow": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtrs"\n          },\n          "past": {\n            "one": "in {0} qtr ago",\n            "other": "{0} qtrs ago"\n          },\n          "-1": "last qtr."\n        },\n        "month-short": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mo."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mo. ago"\n          },\n          "-1": "last mo"\n        },\n        "month-narrow": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mo."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mo. ago"\n          },\n          "-1": "last mo"\n        },\n        "week-short": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wks"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wks ago"\n          },\n          "-1": "last wk"\n        },\n        "week-narrow": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk",\n            "other": "in {0} wks"\n          },\n          "past": {\n            "one": "{0} wk ago",\n            "other": "{0} wks ago"\n          },\n          "-1": "last wk"\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hrs"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hrs ago"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr",\n            "other": "in {0} hrs"\n          },\n          "past": {\n            "one": "{0} hr ago",\n            "other": "{0} hrs ago"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} mins"\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} mins ago"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} mins"\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} mins ago"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} secs"\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} secs ago"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} secs"\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} secs ago"\n          }\n        }\n      },\n      "en-CA": {\n        "year-short": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr.",\n            "other": "in {0} yrs."\n          },\n          "past": {\n            "one": "{0} yr. ago",\n            "other": "{0} yrs. ago"\n          },\n          "-1": "last yr"\n        },\n        "year-narrow": {\n          "0": "this yr",\n          "1": "next yr",\n          "future": {\n            "one": "in {0} yr.",\n            "other": "in {0} yrs."\n          },\n          "past": {\n            "one": "{0} yr. ago",\n            "other": "{0} yrs. ago"\n          },\n          "-1": "last yr"\n        },\n        "quarter-short": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr.",\n            "other": "in {0} qtrs."\n          },\n          "past": {\n            "one": "{0} qtr. ago",\n            "other": "{0} qtrs. ago"\n          },\n          "-1": "last qtr."\n        },\n        "quarter-narrow": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr.",\n            "other": "in {0} qtrs."\n          },\n          "past": {\n            "one": "{0} qtr. ago",\n            "other": "{0} qtrs. ago"\n          },\n          "-1": "last qtr."\n        },\n        "month-short": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mos."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mos. ago"\n          },\n          "-1": "last mo"\n        },\n        "month-narrow": {\n          "0": "this mo",\n          "1": "next mo",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mos."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mos. ago"\n          },\n          "-1": "last mo"\n        },\n        "week-short": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk.",\n            "other": "in {0} wks."\n          },\n          "past": {\n            "one": "{0} wk. ago",\n            "other": "{0} wks. ago"\n          },\n          "-1": "last wk"\n        },\n        "week-narrow": {\n          "0": "this wk",\n          "1": "next wk",\n          "future": {\n            "one": "in {0} wk.",\n            "other": "in {0} wks."\n          },\n          "past": {\n            "one": "{0} wk. ago",\n            "other": "{0} wks. ago"\n          },\n          "-1": "last wk"\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr.",\n            "other": "in {0} hrs."\n          },\n          "past": {\n            "one": "{0} hr. ago",\n            "other": "{0} hrs. ago"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr.",\n            "other": "in {0} hrs."\n          },\n          "past": {\n            "one": "{0} hr. ago",\n            "other": "{0} hrs. ago"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} mins."\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} mins. ago"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} mins."\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} mins. ago"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} secs."\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} secs. ago"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} secs."\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} secs. ago"\n          }\n        }\n      },\n      "en-SG": {\n        "quarter-short": {\n          "0": "this qtr",\n          "1": "next qtr",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtrs"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtrs ago"\n          },\n          "-1": "last qtr"\n        },\n        "quarter-narrow": {\n          "0": "this qtr",\n          "1": "next qtr",\n          "future": {\n            "one": "in {0} qtr",\n            "other": "in {0} qtr"\n          },\n          "past": {\n            "one": "{0} qtr ago",\n            "other": "{0} qtr ago"\n          },\n          "-1": "last qtr"\n        },\n        "month-short": {\n          "0": "this mth",\n          "1": "next mth",\n          "future": {\n            "one": "in {0} mth",\n            "other": "in {0} mth"\n          },\n          "past": {\n            "one": "{0} mth ago",\n            "other": "{0} mth ago"\n          },\n          "-1": "last mth"\n        }\n      },\n      "en": {\n        "nu": ["latn"],\n        "year": {\n          "0": "this year",\n          "1": "next year",\n          "future": {\n            "one": "in {0} year",\n            "other": "in {0} years"\n          },\n          "past": {\n            "one": "{0} year ago",\n            "other": "{0} years ago"\n          },\n          "-1": "last year"\n        },\n        "year-short": {\n          "0": "this yr.",\n          "1": "next yr.",\n          "future": {\n            "one": "in {0} yr.",\n            "other": "in {0} yr."\n          },\n          "past": {\n            "one": "{0} yr. ago",\n            "other": "{0} yr. ago"\n          },\n          "-1": "last yr."\n        },\n        "year-narrow": {\n          "0": "this yr.",\n          "1": "next yr.",\n          "future": {\n            "one": "in {0} yr.",\n            "other": "in {0} yr."\n          },\n          "past": {\n            "one": "{0} yr. ago",\n            "other": "{0} yr. ago"\n          },\n          "-1": "last yr."\n        },\n        "quarter": {\n          "0": "this quarter",\n          "1": "next quarter",\n          "future": {\n            "one": "in {0} quarter",\n            "other": "in {0} quarters"\n          },\n          "past": {\n            "one": "{0} quarter ago",\n            "other": "{0} quarters ago"\n          },\n          "-1": "last quarter"\n        },\n        "quarter-short": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr.",\n            "other": "in {0} qtrs."\n          },\n          "past": {\n            "one": "{0} qtr. ago",\n            "other": "{0} qtrs. ago"\n          },\n          "-1": "last qtr."\n        },\n        "quarter-narrow": {\n          "0": "this qtr.",\n          "1": "next qtr.",\n          "future": {\n            "one": "in {0} qtr.",\n            "other": "in {0} qtrs."\n          },\n          "past": {\n            "one": "{0} qtr. ago",\n            "other": "{0} qtrs. ago"\n          },\n          "-1": "last qtr."\n        },\n        "month": {\n          "0": "this month",\n          "1": "next month",\n          "future": {\n            "one": "in {0} month",\n            "other": "in {0} months"\n          },\n          "past": {\n            "one": "{0} month ago",\n            "other": "{0} months ago"\n          },\n          "-1": "last month"\n        },\n        "month-short": {\n          "0": "this mo.",\n          "1": "next mo.",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mo."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mo. ago"\n          },\n          "-1": "last mo."\n        },\n        "month-narrow": {\n          "0": "this mo.",\n          "1": "next mo.",\n          "future": {\n            "one": "in {0} mo.",\n            "other": "in {0} mo."\n          },\n          "past": {\n            "one": "{0} mo. ago",\n            "other": "{0} mo. ago"\n          },\n          "-1": "last mo."\n        },\n        "week": {\n          "0": "this week",\n          "1": "next week",\n          "future": {\n            "one": "in {0} week",\n            "other": "in {0} weeks"\n          },\n          "past": {\n            "one": "{0} week ago",\n            "other": "{0} weeks ago"\n          },\n          "-1": "last week"\n        },\n        "week-short": {\n          "0": "this wk.",\n          "1": "next wk.",\n          "future": {\n            "one": "in {0} wk.",\n            "other": "in {0} wk."\n          },\n          "past": {\n            "one": "{0} wk. ago",\n            "other": "{0} wk. ago"\n          },\n          "-1": "last wk."\n        },\n        "week-narrow": {\n          "0": "this wk.",\n          "1": "next wk.",\n          "future": {\n            "one": "in {0} wk.",\n            "other": "in {0} wk."\n          },\n          "past": {\n            "one": "{0} wk. ago",\n            "other": "{0} wk. ago"\n          },\n          "-1": "last wk."\n        },\n        "day": {\n          "0": "today",\n          "1": "tomorrow",\n          "future": {\n            "one": "in {0} day",\n            "other": "in {0} days"\n          },\n          "past": {\n            "one": "{0} day ago",\n            "other": "{0} days ago"\n          },\n          "-1": "yesterday"\n        },\n        "day-short": {\n          "0": "today",\n          "1": "tomorrow",\n          "future": {\n            "one": "in {0} day",\n            "other": "in {0} days"\n          },\n          "past": {\n            "one": "{0} day ago",\n            "other": "{0} days ago"\n          },\n          "-1": "yesterday"\n        },\n        "day-narrow": {\n          "0": "today",\n          "1": "tomorrow",\n          "future": {\n            "one": "in {0} day",\n            "other": "in {0} days"\n          },\n          "past": {\n            "one": "{0} day ago",\n            "other": "{0} days ago"\n          },\n          "-1": "yesterday"\n        },\n        "hour": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hour",\n            "other": "in {0} hours"\n          },\n          "past": {\n            "one": "{0} hour ago",\n            "other": "{0} hours ago"\n          }\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr.",\n            "other": "in {0} hr."\n          },\n          "past": {\n            "one": "{0} hr. ago",\n            "other": "{0} hr. ago"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "one": "in {0} hr.",\n            "other": "in {0} hr."\n          },\n          "past": {\n            "one": "{0} hr. ago",\n            "other": "{0} hr. ago"\n          }\n        },\n        "minute": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} minute",\n            "other": "in {0} minutes"\n          },\n          "past": {\n            "one": "{0} minute ago",\n            "other": "{0} minutes ago"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} min."\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} min. ago"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "one": "in {0} min.",\n            "other": "in {0} min."\n          },\n          "past": {\n            "one": "{0} min. ago",\n            "other": "{0} min. ago"\n          }\n        },\n        "second": {\n          "0": "now",\n          "future": {\n            "one": "in {0} second",\n            "other": "in {0} seconds"\n          },\n          "past": {\n            "one": "{0} second ago",\n            "other": "{0} seconds ago"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} sec."\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} sec. ago"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "one": "in {0} sec.",\n            "other": "in {0} sec."\n          },\n          "past": {\n            "one": "{0} sec. ago",\n            "other": "{0} sec. ago"\n          }\n        }\n      }\n    },\n    "availableLocales": ["en-001", "en-150", "en-AE", "en-AG", "en-AI", "en-AS", "en-AT", "en-AU", "en-BB", "en-BE", "en-BI", "en-BM", "en-BS", "en-BW", "en-BZ", "en-CA", "en-CC", "en-CH", "en-CK", "en-CM", "en-CX", "en-CY", "en-DE", "en-DG", "en-DK", "en-DM", "en-ER", "en-FI", "en-FJ", "en-FK", "en-FM", "en-GB", "en-GD", "en-GG", "en-GH", "en-GI", "en-GM", "en-GU", "en-GY", "en-HK", "en-IE", "en-IL", "en-IM", "en-IN", "en-IO", "en-JE", "en-JM", "en-KE", "en-KI", "en-KN", "en-KY", "en-LC", "en-LR", "en-LS", "en-MG", "en-MH", "en-MO", "en-MP", "en-MS", "en-MT", "en-MU", "en-MW", "en-MY", "en-NA", "en-NF", "en-NG", "en-NL", "en-NR", "en-NU", "en-NZ", "en-PG", "en-PH", "en-PK", "en-PN", "en-PR", "en-PW", "en-RW", "en-SB", "en-SC", "en-SD", "en-SE", "en-SG", "en-SH", "en-SI", "en-SL", "en-SS", "en-SX", "en-SZ", "en-TC", "en-TK", "en-TO", "en-TT", "en-TV", "en-TZ", "en-UG", "en-UM", "en-US-POSIX", "en-US", "en-VC", "en-VG", "en-VI", "en-VU", "en-WS", "en-ZA", "en-ZM", "en-ZW", "en"],\n    "aliases": {},\n    "parentLocales": {\n      "en-150": "en-001",\n      "en-AG": "en-001",\n      "en-AI": "en-001",\n      "en-AU": "en-001",\n      "en-BB": "en-001",\n      "en-BM": "en-001",\n      "en-BS": "en-001",\n      "en-BW": "en-001",\n      "en-BZ": "en-001",\n      "en-CA": "en-001",\n      "en-CC": "en-001",\n      "en-CK": "en-001",\n      "en-CM": "en-001",\n      "en-CX": "en-001",\n      "en-CY": "en-001",\n      "en-DG": "en-001",\n      "en-DM": "en-001",\n      "en-ER": "en-001",\n      "en-FJ": "en-001",\n      "en-FK": "en-001",\n      "en-FM": "en-001",\n      "en-GB": "en-001",\n      "en-GD": "en-001",\n      "en-GG": "en-001",\n      "en-GH": "en-001",\n      "en-GI": "en-001",\n      "en-GM": "en-001",\n      "en-GY": "en-001",\n      "en-HK": "en-001",\n      "en-IE": "en-001",\n      "en-IL": "en-001",\n      "en-IM": "en-001",\n      "en-IN": "en-001",\n      "en-IO": "en-001",\n      "en-JE": "en-001",\n      "en-JM": "en-001",\n      "en-KE": "en-001",\n      "en-KI": "en-001",\n      "en-KN": "en-001",\n      "en-KY": "en-001",\n      "en-LC": "en-001",\n      "en-LR": "en-001",\n      "en-LS": "en-001",\n      "en-MG": "en-001",\n      "en-MO": "en-001",\n      "en-MS": "en-001",\n      "en-MT": "en-001",\n      "en-MU": "en-001",\n      "en-MW": "en-001",\n      "en-MY": "en-001",\n      "en-NA": "en-001",\n      "en-NF": "en-001",\n      "en-NG": "en-001",\n      "en-NR": "en-001",\n      "en-NU": "en-001",\n      "en-NZ": "en-001",\n      "en-PG": "en-001",\n      "en-PH": "en-001",\n      "en-PK": "en-001",\n      "en-PN": "en-001",\n      "en-PW": "en-001",\n      "en-RW": "en-001",\n      "en-SB": "en-001",\n      "en-SC": "en-001",\n      "en-SD": "en-001",\n      "en-SG": "en-001",\n      "en-SH": "en-001",\n      "en-SL": "en-001",\n      "en-SS": "en-001",\n      "en-SX": "en-001",\n      "en-SZ": "en-001",\n      "en-TC": "en-001",\n      "en-TK": "en-001",\n      "en-TO": "en-001",\n      "en-TT": "en-001",\n      "en-TV": "en-001",\n      "en-TZ": "en-001",\n      "en-UG": "en-001",\n      "en-VC": "en-001",\n      "en-VG": "en-001",\n      "en-VU": "en-001",\n      "en-WS": "en-001",\n      "en-ZA": "en-001",\n      "en-ZM": "en-001",\n      "en-ZW": "en-001",\n      "en-AT": "en-150",\n      "en-BE": "en-150",\n      "en-CH": "en-150",\n      "en-DE": "en-150",\n      "en-DK": "en-150",\n      "en-FI": "en-150",\n      "en-NL": "en-150",\n      "en-SE": "en-150",\n      "en-SI": "en-150"\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8079\n')},4033:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat.__addLocaleData === \'function\') {\n  Intl.RelativeTimeFormat.__addLocaleData({\n    "data": {\n      "es-419": {\n        "week-short": {\n          "0": "esta sem.",\n          "1": "próx. sem.",\n          "future": {\n            "one": "dentro de {0} sem.",\n            "other": "dentro de {0} sem."\n          },\n          "past": {\n            "one": "hace {0} sem.",\n            "other": "hace {0} sem."\n          },\n          "-1": "sem. pas."\n        },\n        "week-narrow": {\n          "0": "esta sem.",\n          "1": "próx. sem.",\n          "future": {\n            "one": "dentro de {0} sem.",\n            "other": "dentro de {0} sem."\n          },\n          "past": {\n            "one": "hace {0} sem.",\n            "other": "hace {0} sem."\n          },\n          "-1": "sem. pas."\n        }\n      },\n      "es-AR": {\n        "day-short": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} días",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} días",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "day-narrow": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} días",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} días",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "second-short": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} seg.",\n            "other": "dentro de {0} seg."\n          },\n          "past": {\n            "one": "hace {0} seg.",\n            "other": "hace {0} seg."\n          }\n        },\n        "second-narrow": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} seg.",\n            "other": "dentro de {0} seg."\n          },\n          "past": {\n            "one": "hace {0} seg.",\n            "other": "hace {0} seg."\n          }\n        }\n      },\n      "es-MX": {\n        "year": {\n          "0": "este año",\n          "1": "el año próximo",\n          "future": {\n            "one": "dentro de {0} año",\n            "other": "dentro de {0} años"\n          },\n          "past": {\n            "one": "hace {0} año",\n            "other": "hace {0} años"\n          },\n          "-1": "el año pasado"\n        },\n        "year-short": {\n          "0": "este año",\n          "1": "el próximo año",\n          "future": {\n            "one": "en {0} a",\n            "other": "en {0} a"\n          },\n          "past": {\n            "one": "hace {0} a",\n            "other": "hace {0} a"\n          },\n          "-1": "el año pasado"\n        },\n        "year-narrow": {\n          "0": "este año",\n          "1": "el próximo año",\n          "future": {\n            "one": "en {0} a",\n            "other": "en {0} a"\n          },\n          "past": {\n            "one": "-{0} a",\n            "other": "-{0} a"\n          },\n          "-1": "el año pasado"\n        },\n        "quarter": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "en {0} trimestre",\n            "other": "dentro de {0} trimetres"\n          },\n          "past": {\n            "one": "hace {0} trimestre",\n            "other": "hace {0} trimestres"\n          },\n          "-1": "el trimestre pasado"\n        },\n        "quarter-short": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "en {0} trim.",\n            "other": "en {0} trim"\n          },\n          "past": {\n            "one": "hace {0} trim.",\n            "other": "hace {0} trim."\n          },\n          "-1": "el trimestre pasado"\n        },\n        "quarter-narrow": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "en {0} trim.",\n            "other": "en {0} trim."\n          },\n          "past": {\n            "one": "-{0} T",\n            "other": "-{0} T"\n          },\n          "-1": "el trimestre pasado"\n        },\n        "month": {\n          "0": "este mes",\n          "1": "el mes próximo",\n          "future": {\n            "one": "en {0} mes",\n            "other": "en {0} meses"\n          },\n          "past": {\n            "one": "hace {0} mes",\n            "other": "hace {0} meses"\n          },\n          "-1": "el mes pasado"\n        },\n        "month-short": {\n          "0": "este mes",\n          "1": "el próximo mes",\n          "future": {\n            "one": "en {0} m",\n            "other": "en {0} m"\n          },\n          "past": {\n            "one": "hace {0} m",\n            "other": "hace {0} m"\n          },\n          "-1": "el mes pasado"\n        },\n        "month-narrow": {\n          "0": "este mes",\n          "1": "el próximo mes",\n          "future": {\n            "one": "+{0} m",\n            "other": "+{0} m"\n          },\n          "past": {\n            "one": "-{0} m",\n            "other": "-{0} m"\n          },\n          "-1": "el mes pasado"\n        },\n        "week": {\n          "0": "esta semana",\n          "1": "la semana próxima",\n          "future": {\n            "one": "dentro de {0} semana",\n            "other": "dentro de {0} semanas"\n          },\n          "past": {\n            "one": "hace {0} semana",\n            "other": "hace {0} semanas"\n          },\n          "-1": "la semana pasada"\n        },\n        "week-short": {\n          "0": "esta sem.",\n          "1": "próx. sem.",\n          "future": {\n            "one": "en {0} sem.",\n            "other": "en {0} sem."\n          },\n          "past": {\n            "one": "hace {0} sem.",\n            "other": "hace {0} sem."\n          },\n          "-1": "sem. pas."\n        },\n        "day-short": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "en {0} día",\n            "other": "en {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "day-narrow": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "+{0} día",\n            "other": "en {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "hour-short": {\n          "0": "esta hora",\n          "future": {\n            "one": "en {0} h",\n            "other": "en {0} n"\n          },\n          "past": {\n            "one": "hace {0} h",\n            "other": "hace {0} h"\n          }\n        },\n        "minute-short": {\n          "0": "este minuto",\n          "future": {\n            "one": "en {0} min",\n            "other": "en {0} min"\n          },\n          "past": {\n            "one": "hace {0} min",\n            "other": "hace {0} min"\n          }\n        },\n        "minute-narrow": {\n          "0": "este minuto",\n          "future": {\n            "one": "en {0} min",\n            "other": "en {0} min"\n          },\n          "past": {\n            "one": "hace {0} min",\n            "other": "hace {0} min"\n          }\n        },\n        "second-short": {\n          "0": "ahora",\n          "future": {\n            "one": "en {0} s",\n            "other": "en {0} s"\n          },\n          "past": {\n            "one": "hace {0} s",\n            "other": "hace {0} s"\n          }\n        },\n        "second-narrow": {\n          "0": "ahora",\n          "future": {\n            "one": "+{0} s",\n            "other": "+{0} s"\n          },\n          "past": {\n            "one": "hace {0} s",\n            "other": "hace {0} s"\n          }\n        }\n      },\n      "es-PY": {\n        "second-short": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} seg.",\n            "other": "dentro de {0} seg."\n          },\n          "past": {\n            "one": "hace {0} seg.",\n            "other": "hace {0} seg."\n          }\n        },\n        "second-narrow": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} seg.",\n            "other": "dentro de {0} seg."\n          },\n          "past": {\n            "one": "hace {0} seg.",\n            "other": "hace {0} seg."\n          }\n        }\n      },\n      "es-SV": {\n        "day": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} día",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "antier",\n          "-1": "ayer"\n        }\n      },\n      "es-US": {\n        "year": {\n          "0": "este año",\n          "1": "el año próximo",\n          "future": {\n            "one": "dentro de {0} año",\n            "other": "dentro de {0} años"\n          },\n          "past": {\n            "one": "hace {0} año",\n            "other": "hace {0} años"\n          },\n          "-1": "el año pasado"\n        },\n        "quarter": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "dentro de {0} trimetre",\n            "other": "dentro de {0} trimetres"\n          },\n          "past": {\n            "one": "hace {0} trimestre",\n            "other": "hace {0} trimestres"\n          },\n          "-1": "el trimestre pasado"\n        },\n        "month": {\n          "0": "este mes",\n          "1": "el mes próximo",\n          "future": {\n            "one": "dentro de {0} mes",\n            "other": "dentro de {0} meses"\n          },\n          "past": {\n            "one": "hace {0} mes",\n            "other": "hace {0} meses"\n          },\n          "-1": "el mes pasado"\n        },\n        "week": {\n          "0": "esta semana",\n          "1": "la semana próxima",\n          "future": {\n            "one": "dentro de {0} semana",\n            "other": "dentro de {0} semanas"\n          },\n          "past": {\n            "one": "hace {0} semana",\n            "other": "hace {0} semanas"\n          },\n          "-1": "la semana pasada"\n        }\n      },\n      "es": {\n        "nu": ["latn"],\n        "year": {\n          "0": "este año",\n          "1": "el próximo año",\n          "future": {\n            "one": "dentro de {0} año",\n            "other": "dentro de {0} años"\n          },\n          "past": {\n            "one": "hace {0} año",\n            "other": "hace {0} años"\n          },\n          "-1": "el año pasado"\n        },\n        "year-short": {\n          "0": "este año",\n          "1": "el próximo año",\n          "future": {\n            "one": "dentro de {0} a",\n            "other": "dentro de {0} a"\n          },\n          "past": {\n            "one": "hace {0} a",\n            "other": "hace {0} a"\n          },\n          "-1": "el año pasado"\n        },\n        "year-narrow": {\n          "0": "este año",\n          "1": "el próximo año",\n          "future": {\n            "one": "dentro de {0} a",\n            "other": "dentro de {0} a"\n          },\n          "past": {\n            "one": "hace {0} a",\n            "other": "hace {0} a"\n          },\n          "-1": "el año pasado"\n        },\n        "quarter": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "dentro de {0} trimestre",\n            "other": "dentro de {0} trimestres"\n          },\n          "past": {\n            "one": "hace {0} trimestre",\n            "other": "hace {0} trimestres"\n          },\n          "-1": "el trimestre pasado"\n        },\n        "quarter-short": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "dentro de {0} trim.",\n            "other": "dentro de {0} trim."\n          },\n          "past": {\n            "one": "hace {0} trim.",\n            "other": "hace {0} trim."\n          },\n          "-1": "el trimestre pasado"\n        },\n        "quarter-narrow": {\n          "0": "este trimestre",\n          "1": "el próximo trimestre",\n          "future": {\n            "one": "dentro de {0} trim.",\n            "other": "dentro de {0} trim."\n          },\n          "past": {\n            "one": "hace {0} trim.",\n            "other": "hace {0} trim."\n          },\n          "-1": "el trimestre pasado"\n        },\n        "month": {\n          "0": "este mes",\n          "1": "el próximo mes",\n          "future": {\n            "one": "dentro de {0} mes",\n            "other": "dentro de {0} meses"\n          },\n          "past": {\n            "one": "hace {0} mes",\n            "other": "hace {0} meses"\n          },\n          "-1": "el mes pasado"\n        },\n        "month-short": {\n          "0": "este mes",\n          "1": "el próximo mes",\n          "future": {\n            "one": "dentro de {0} m",\n            "other": "dentro de {0} m"\n          },\n          "past": {\n            "one": "hace {0} m",\n            "other": "hace {0} m"\n          },\n          "-1": "el mes pasado"\n        },\n        "month-narrow": {\n          "0": "este mes",\n          "1": "el próximo mes",\n          "future": {\n            "one": "dentro de {0} m",\n            "other": "dentro de {0} m"\n          },\n          "past": {\n            "one": "hace {0} m",\n            "other": "hace {0} m"\n          },\n          "-1": "el mes pasado"\n        },\n        "week": {\n          "0": "esta semana",\n          "1": "la próxima semana",\n          "future": {\n            "one": "dentro de {0} semana",\n            "other": "dentro de {0} semanas"\n          },\n          "past": {\n            "one": "hace {0} semana",\n            "other": "hace {0} semanas"\n          },\n          "-1": "la semana pasada"\n        },\n        "week-short": {\n          "0": "esta sem.",\n          "1": "próx. sem.",\n          "future": {\n            "one": "dentro de {0} sem.",\n            "other": "dentro de {0} sem."\n          },\n          "past": {\n            "one": "hace {0} sem.",\n            "other": "hace {0} sem."\n          },\n          "-1": "sem. ant."\n        },\n        "week-narrow": {\n          "0": "esta sem.",\n          "1": "próx. sem.",\n          "future": {\n            "one": "dentro de {0} sem.",\n            "other": "dentro de {0} sem."\n          },\n          "past": {\n            "one": "hace {0} sem.",\n            "other": "hace {0} sem."\n          },\n          "-1": "sem. ant."\n        },\n        "day": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} día",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "day-short": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} día",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "day-narrow": {\n          "0": "hoy",\n          "1": "mañana",\n          "2": "pasado mañana",\n          "future": {\n            "one": "dentro de {0} día",\n            "other": "dentro de {0} días"\n          },\n          "past": {\n            "one": "hace {0} día",\n            "other": "hace {0} días"\n          },\n          "-2": "anteayer",\n          "-1": "ayer"\n        },\n        "hour": {\n          "0": "esta hora",\n          "future": {\n            "one": "dentro de {0} hora",\n            "other": "dentro de {0} horas"\n          },\n          "past": {\n            "one": "hace {0} hora",\n            "other": "hace {0} horas"\n          }\n        },\n        "hour-short": {\n          "0": "esta hora",\n          "future": {\n            "one": "dentro de {0} h",\n            "other": "dentro de {0} h"\n          },\n          "past": {\n            "one": "hace {0} h",\n            "other": "hace {0} h"\n          }\n        },\n        "hour-narrow": {\n          "0": "esta hora",\n          "future": {\n            "one": "dentro de {0} h",\n            "other": "dentro de {0} h"\n          },\n          "past": {\n            "one": "hace {0} h",\n            "other": "hace {0} h"\n          }\n        },\n        "minute": {\n          "0": "este minuto",\n          "future": {\n            "one": "dentro de {0} minuto",\n            "other": "dentro de {0} minutos"\n          },\n          "past": {\n            "one": "hace {0} minuto",\n            "other": "hace {0} minutos"\n          }\n        },\n        "minute-short": {\n          "0": "este minuto",\n          "future": {\n            "one": "dentro de {0} min",\n            "other": "dentro de {0} min"\n          },\n          "past": {\n            "one": "hace {0} min",\n            "other": "hace {0} min"\n          }\n        },\n        "minute-narrow": {\n          "0": "este minuto",\n          "future": {\n            "one": "dentro de {0} min",\n            "other": "dentro de {0} min"\n          },\n          "past": {\n            "one": "hace {0} min",\n            "other": "hace {0} min"\n          }\n        },\n        "second": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} segundo",\n            "other": "dentro de {0} segundos"\n          },\n          "past": {\n            "one": "hace {0} segundo",\n            "other": "hace {0} segundos"\n          }\n        },\n        "second-short": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} s",\n            "other": "dentro de {0} s"\n          },\n          "past": {\n            "one": "hace {0} s",\n            "other": "hace {0} s"\n          }\n        },\n        "second-narrow": {\n          "0": "ahora",\n          "future": {\n            "one": "dentro de {0} s",\n            "other": "dentro de {0} s"\n          },\n          "past": {\n            "one": "hace {0} s",\n            "other": "hace {0} s"\n          }\n        }\n      }\n    },\n    "availableLocales": ["es-419", "es-AR", "es-BO", "es-BR", "es-BZ", "es-CL", "es-CO", "es-CR", "es-CU", "es-DO", "es-EA", "es-EC", "es-GQ", "es-GT", "es-HN", "es-IC", "es-MX", "es-NI", "es-PA", "es-PE", "es-PH", "es-PR", "es-PY", "es-SV", "es-US", "es-UY", "es-VE", "es"],\n    "aliases": {},\n    "parentLocales": {\n      "es-AR": "es-419",\n      "es-BO": "es-419",\n      "es-BR": "es-419",\n      "es-BZ": "es-419",\n      "es-CL": "es-419",\n      "es-CO": "es-419",\n      "es-CR": "es-419",\n      "es-CU": "es-419",\n      "es-DO": "es-419",\n      "es-EC": "es-419",\n      "es-GT": "es-419",\n      "es-HN": "es-419",\n      "es-MX": "es-419",\n      "es-NI": "es-419",\n      "es-PA": "es-419",\n      "es-PE": "es-419",\n      "es-PR": "es-419",\n      "es-PY": "es-419",\n      "es-SV": "es-419",\n      "es-US": "es-419",\n      "es-UY": "es-419",\n      "es-VE": "es-419"\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzMy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDLGlDQUFpQyxHQUFHO0FBQ3BDLFdBQVc7QUFDWDtBQUNBLDBCQUEwQixHQUFHO0FBQzdCLDRCQUE0QixHQUFHO0FBQy9CLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDLGlDQUFpQyxHQUFHO0FBQ3BDLFdBQVc7QUFDWDtBQUNBLDBCQUEwQixHQUFHO0FBQzdCLDRCQUE0QixHQUFHO0FBQy9CLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDLGlDQUFpQyxHQUFHO0FBQ3BDLFdBQVc7QUFDWDtBQUNBLDBCQUEwQixHQUFHO0FBQzdCLDRCQUE0QixHQUFHO0FBQy9CLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSxzQkFBc0IsR0FBRztBQUN6Qix3QkFBd0IsR0FBRztBQUMzQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQixpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSxzQkFBc0IsR0FBRztBQUN6Qix3QkFBd0IsR0FBRztBQUMzQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsR0FBRztBQUN6Qix3QkFBd0IsR0FBRztBQUMzQixXQUFXO0FBQ1g7QUFDQSxzQkFBc0IsR0FBRztBQUN6Qix3QkFBd0IsR0FBRztBQUMzQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLDBCQUEwQixHQUFHO0FBQzdCLFdBQVc7QUFDWDtBQUNBLDBCQUEwQixHQUFHO0FBQzdCLDRCQUE0QixHQUFHO0FBQy9CLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsR0FBRztBQUN6QiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQiwwQkFBMEIsR0FBRztBQUM3QixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsR0FBRztBQUN6Qix3QkFBd0IsR0FBRztBQUMzQixXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDLGlDQUFpQyxHQUFHO0FBQ3BDLFdBQVc7QUFDWDtBQUNBLDBCQUEwQixHQUFHO0FBQzdCLDRCQUE0QixHQUFHO0FBQy9CLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQyxpQ0FBaUMsR0FBRztBQUNwQyxXQUFXO0FBQ1g7QUFDQSwwQkFBMEIsR0FBRztBQUM3Qiw0QkFBNEIsR0FBRztBQUMvQixXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0IsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEMsaUNBQWlDLEdBQUc7QUFDcEMsV0FBVztBQUNYO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0IsNEJBQTRCLEdBQUc7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXJlbGF0aXZldGltZWZvcm1hdC9kaXN0L2xvY2FsZS1kYXRhL2VzLmpzP2ZjZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGdlbmVyYXRlZCAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5pZiAoSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQgJiYgdHlwZW9mIEludGwuUmVsYXRpdmVUaW1lRm9ybWF0Ll9fYWRkTG9jYWxlRGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5fX2FkZExvY2FsZURhdGEoe1xuICAgIFwiZGF0YVwiOiB7XG4gICAgICBcImVzLTQxOVwiOiB7XG4gICAgICAgIFwid2Vlay1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0YSBzZW0uXCIsXG4gICAgICAgICAgXCIxXCI6IFwicHLDs3guIHNlbS5cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwic2VtLiBwYXMuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWVrLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0YSBzZW0uXCIsXG4gICAgICAgICAgXCIxXCI6IFwicHLDs3guIHNlbS5cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwic2VtLiBwYXMuXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZXMtQVJcIjoge1xuICAgICAgICBcImRheS1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiaG95XCIsXG4gICAgICAgICAgXCIxXCI6IFwibWHDsWFuYVwiLFxuICAgICAgICAgIFwiMlwiOiBcInBhc2FkbyBtYcOxYW5hXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGTDrWFzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBkw61hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBkw61hc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTJcIjogXCJhbnRlYXllclwiLFxuICAgICAgICAgIFwiLTFcIjogXCJheWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYXktbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJob3lcIixcbiAgICAgICAgICBcIjFcIjogXCJtYcOxYW5hXCIsXG4gICAgICAgICAgXCIyXCI6IFwicGFzYWRvIG1hw7FhbmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gZMOtYXNcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGTDrWFzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gZMOtYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMlwiOiBcImFudGVheWVyXCIsXG4gICAgICAgICAgXCItMVwiOiBcImF5ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlY29uZC1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiYWhvcmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VnLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VnLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZWcuXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VnLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNlY29uZC1uYXJyb3dcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImFob3JhXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHNlZy5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IHNlZy5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gc2VnLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IHNlZy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZXMtTVhcIjoge1xuICAgICAgICBcInllYXJcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgYcOxb1wiLFxuICAgICAgICAgIFwiMVwiOiBcImVsIGHDsW8gcHLDs3hpbW9cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gYcOxb1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gYcOxb3NcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gYcOxb1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IGHDsW9zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCBhw7FvIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwieWVhci1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBhw7FvXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gYcOxb1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZW4gezB9IGFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJlbiB7MH0gYVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBhXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gYVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgYcOxbyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInllYXItbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIGHDsW9cIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyBhw7FvXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJlbiB7MH0gYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImVuIHswfSBhXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcIi17MH0gYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gYVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgYcOxbyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInF1YXJ0ZXJcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJlbiB7MH0gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSB0cmltZXRyZXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gdHJpbWVzdHJlc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgdHJpbWVzdHJlIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicXVhcnRlci1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSB0cmltZXN0cmVcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyB0cmltZXN0cmVcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImVuIHswfSB0cmltLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImVuIHswfSB0cmltXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHRyaW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gdHJpbS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIHRyaW1lc3RyZSBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInF1YXJ0ZXItbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIHRyaW1lc3RyZVwiLFxuICAgICAgICAgIFwiMVwiOiBcImVsIHByw7N4aW1vIHRyaW1lc3RyZVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZW4gezB9IHRyaW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZW4gezB9IHRyaW0uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcIi17MH0gVFwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gVFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgdHJpbWVzdHJlIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibW9udGhcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgbWVzXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgbWVzIHByw7N4aW1vXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJlbiB7MH0gbWVzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZW4gezB9IG1lc2VzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IG1lc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IG1lc2VzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCBtZXMgcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb250aC1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtZXNcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyBtZXNcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImVuIHswfSBtXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZW4gezB9IG1cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gbVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IG1cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIG1lcyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1vbnRoLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtZXNcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyBtZXNcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcIit7MH0gbVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gbVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCItezB9IG1cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IG1cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIG1lcyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcIndlZWtcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGEgc2VtYW5hXCIsXG4gICAgICAgICAgXCIxXCI6IFwibGEgc2VtYW5hIHByw7N4aW1hXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHNlbWFuYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtYW5hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW1hbmFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBzZW1hbmFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYSBzZW1hbmEgcGFzYWRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWVrLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RhIHNlbS5cIixcbiAgICAgICAgICBcIjFcIjogXCJwcsOzeC4gc2VtLlwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZW4gezB9IHNlbS5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJlbiB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwic2VtLiBwYXMuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYXktc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImhveVwiLFxuICAgICAgICAgIFwiMVwiOiBcIm1hw7FhbmFcIixcbiAgICAgICAgICBcIjJcIjogXCJwYXNhZG8gbWHDsWFuYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZW4gezB9IGTDrWFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJlbiB7MH0gZMOtYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gZMOtYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTJcIjogXCJhbnRlYXllclwiLFxuICAgICAgICAgIFwiLTFcIjogXCJheWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYXktbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJob3lcIixcbiAgICAgICAgICBcIjFcIjogXCJtYcOxYW5hXCIsXG4gICAgICAgICAgXCIyXCI6IFwicGFzYWRvIG1hw7FhbmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcIit7MH0gZMOtYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImVuIHswfSBkw61hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBkw61hXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gZMOtYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMlwiOiBcImFudGVheWVyXCIsXG4gICAgICAgICAgXCItMVwiOiBcImF5ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImhvdXItc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGEgaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZW4gezB9IGhcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJlbiB7MH0gblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBoXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gaFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbnV0ZS1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtaW51dG9cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImVuIHswfSBtaW5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJlbiB7MH0gbWluXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IG1pblwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IG1pblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbnV0ZS1uYXJyb3dcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgbWludXRvXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJlbiB7MH0gbWluXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZW4gezB9IG1pblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBtaW5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBtaW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWNvbmQtc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImFob3JhXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJlbiB7MH0gc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImVuIHswfSBzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHNcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vjb25kLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiYWhvcmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcIit7MH0gc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJlcy1QWVwiOiB7XG4gICAgICAgIFwic2Vjb25kLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJhaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBzZWcuXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBzZWcuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHNlZy5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBzZWcuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vjb25kLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiYWhvcmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VnLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VnLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZWcuXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VnLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJlcy1TVlwiOiB7XG4gICAgICAgIFwiZGF5XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJob3lcIixcbiAgICAgICAgICBcIjFcIjogXCJtYcOxYW5hXCIsXG4gICAgICAgICAgXCIyXCI6IFwicGFzYWRvIG1hw7FhbmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gZMOtYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gZMOtYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gZMOtYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTJcIjogXCJhbnRpZXJcIixcbiAgICAgICAgICBcIi0xXCI6IFwiYXllclwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImVzLVVTXCI6IHtcbiAgICAgICAgXCJ5ZWFyXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIGHDsW9cIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBhw7FvIHByw7N4aW1vXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGHDsW9cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGHDsW9zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGHDsW9cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBhw7Fvc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgYcOxbyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInF1YXJ0ZXJcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHRyaW1ldHJlXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSB0cmltZXRyZXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gdHJpbWVzdHJlc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgdHJpbWVzdHJlIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibW9udGhcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgbWVzXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgbWVzIHByw7N4aW1vXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IG1lc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gbWVzZXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gbWVzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gbWVzZXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIG1lcyBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcIndlZWtcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGEgc2VtYW5hXCIsXG4gICAgICAgICAgXCIxXCI6IFwibGEgc2VtYW5hIHByw7N4aW1hXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHNlbWFuYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtYW5hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW1hbmFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBzZW1hbmFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYSBzZW1hbmEgcGFzYWRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZXNcIjoge1xuICAgICAgICBcIm51XCI6IFtcImxhdG5cIl0sXG4gICAgICAgIFwieWVhclwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBhw7FvXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gYcOxb1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBhw7FvXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBhw7Fvc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBhw7FvXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gYcOxb3NcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIGHDsW8gcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ5ZWFyLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIGHDsW9cIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyBhw7FvXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gYVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IGFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIGHDsW8gcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ5ZWFyLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBhw7FvXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gYcOxb1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBhXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBhXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBhXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCBhw7FvIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicXVhcnRlclwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSB0cmltZXN0cmVcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyB0cmltZXN0cmVcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSB0cmltZXN0cmVzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHRyaW1lc3RyZVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IHRyaW1lc3RyZXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIHRyaW1lc3RyZSBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInF1YXJ0ZXItc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGUgdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCIxXCI6IFwiZWwgcHLDs3hpbW8gdHJpbWVzdHJlXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHRyaW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSB0cmltLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSB0cmltLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IHRyaW0uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCB0cmltZXN0cmUgcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJxdWFydGVyLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSB0cmltZXN0cmVcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyB0cmltZXN0cmVcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gdHJpbS5cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IHRyaW0uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHRyaW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gdHJpbS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImVsIHRyaW1lc3RyZSBwYXNhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1vbnRoXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIG1lc1wiLFxuICAgICAgICAgIFwiMVwiOiBcImVsIHByw7N4aW1vIG1lc1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBtZXNcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IG1lc2VzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IG1lc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IG1lc2VzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCBtZXMgcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb250aC1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtZXNcIixcbiAgICAgICAgICBcIjFcIjogXCJlbCBwcsOzeGltbyBtZXNcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gbVwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gbVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBtXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gbVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwiZWwgbWVzIHBhc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibW9udGgtbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIG1lc1wiLFxuICAgICAgICAgIFwiMVwiOiBcImVsIHByw7N4aW1vIG1lc1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBtXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IG1cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJlbCBtZXMgcGFzYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWVrXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RhIHNlbWFuYVwiLFxuICAgICAgICAgIFwiMVwiOiBcImxhIHByw7N4aW1hIHNlbWFuYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBzZW1hbmFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IHNlbWFuYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gc2VtYW5hXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtYW5hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGEgc2VtYW5hIHBhc2FkYVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwid2Vlay1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0YSBzZW0uXCIsXG4gICAgICAgICAgXCIxXCI6IFwicHLDs3guIHNlbS5cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwic2VtLiBhbnQuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWVrLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0YSBzZW0uXCIsXG4gICAgICAgICAgXCIxXCI6IFwicHLDs3guIHNlbS5cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImRlbnRybyBkZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZW0uXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwic2VtLiBhbnQuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYXlcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImhveVwiLFxuICAgICAgICAgIFwiMVwiOiBcIm1hw7FhbmFcIixcbiAgICAgICAgICBcIjJcIjogXCJwYXNhZG8gbWHDsWFuYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBkw61hXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBkw61hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBkw61hXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gZMOtYXNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMlwiOiBcImFudGVheWVyXCIsXG4gICAgICAgICAgXCItMVwiOiBcImF5ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImRheS1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiaG95XCIsXG4gICAgICAgICAgXCIxXCI6IFwibWHDsWFuYVwiLFxuICAgICAgICAgIFwiMlwiOiBcInBhc2FkbyBtYcOxYW5hXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGTDrWFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGTDrWFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBkw61hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0yXCI6IFwiYW50ZWF5ZXJcIixcbiAgICAgICAgICBcIi0xXCI6IFwiYXllclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGF5LW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiaG95XCIsXG4gICAgICAgICAgXCIxXCI6IFwibWHDsWFuYVwiLFxuICAgICAgICAgIFwiMlwiOiBcInBhc2FkbyBtYcOxYW5hXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGTDrWFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGTDrWFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGTDrWFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBkw61hc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0yXCI6IFwiYW50ZWF5ZXJcIixcbiAgICAgICAgICBcIi0xXCI6IFwiYXllclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaG91clwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0YSBob3JhXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IGhvcmFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IGhvcmFzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGhvcmFcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBob3Jhc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhvdXItc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGEgaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBoXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBoXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGhcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBoXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaG91ci1uYXJyb3dcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImVzdGEgaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBoXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBoXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IGhcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBoXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWludXRlXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJlc3RlIG1pbnV0b1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBtaW51dG9cIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IG1pbnV0b3NcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gbWludXRvXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gbWludXRvc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbnV0ZS1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtaW51dG9cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gbWluXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBtaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gbWluXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gbWluXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWludXRlLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiZXN0ZSBtaW51dG9cIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImRlbnRybyBkZSB7MH0gbWluXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBtaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gbWluXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gbWluXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vjb25kXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJhaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBzZWd1bmRvXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBzZWd1bmRvc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJoYWNlIHswfSBzZWd1bmRvXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiaGFjZSB7MH0gc2VndW5kb3NcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWNvbmQtc2hvcnRcIjoge1xuICAgICAgICAgIFwiMFwiOiBcImFob3JhXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvbmVcIjogXCJkZW50cm8gZGUgezB9IHNcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJkZW50cm8gZGUgezB9IHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiaGFjZSB7MH0gc1wiLFxuICAgICAgICAgICAgXCJvdGhlclwiOiBcImhhY2UgezB9IHNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWNvbmQtbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJhaG9yYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib25lXCI6IFwiZGVudHJvIGRlIHswfSBzXCIsXG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiZGVudHJvIGRlIHswfSBzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm9uZVwiOiBcImhhY2UgezB9IHNcIixcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCJoYWNlIHswfSBzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiYXZhaWxhYmxlTG9jYWxlc1wiOiBbXCJlcy00MTlcIiwgXCJlcy1BUlwiLCBcImVzLUJPXCIsIFwiZXMtQlJcIiwgXCJlcy1CWlwiLCBcImVzLUNMXCIsIFwiZXMtQ09cIiwgXCJlcy1DUlwiLCBcImVzLUNVXCIsIFwiZXMtRE9cIiwgXCJlcy1FQVwiLCBcImVzLUVDXCIsIFwiZXMtR1FcIiwgXCJlcy1HVFwiLCBcImVzLUhOXCIsIFwiZXMtSUNcIiwgXCJlcy1NWFwiLCBcImVzLU5JXCIsIFwiZXMtUEFcIiwgXCJlcy1QRVwiLCBcImVzLVBIXCIsIFwiZXMtUFJcIiwgXCJlcy1QWVwiLCBcImVzLVNWXCIsIFwiZXMtVVNcIiwgXCJlcy1VWVwiLCBcImVzLVZFXCIsIFwiZXNcIl0sXG4gICAgXCJhbGlhc2VzXCI6IHt9LFxuICAgIFwicGFyZW50TG9jYWxlc1wiOiB7XG4gICAgICBcImVzLUFSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUJaXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNMXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUNVXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLURPXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUVDXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUdUXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLUhOXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLU1YXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLU5JXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBBXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBFXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBSXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVBZXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVNWXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVVTXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVVZXCI6IFwiZXMtNDE5XCIsXG4gICAgICBcImVzLVZFXCI6IFwiZXMtNDE5XCJcbiAgICB9XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4033\n')},9584:function(){eval('/* @generated */\n// prettier-ignore\nif (Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat.__addLocaleData === \'function\') {\n  Intl.RelativeTimeFormat.__addLocaleData({\n    "data": {\n      "ses": {\n        "nu": ["latn"],\n        "year": {\n          "0": "this year",\n          "1": "next year",\n          "future": {\n            "other": "+{0} y"\n          },\n          "past": {\n            "other": "-{0} y"\n          },\n          "-1": "last year"\n        },\n        "year-short": {\n          "0": "this year",\n          "1": "next year",\n          "future": {\n            "other": "+{0} y"\n          },\n          "past": {\n            "other": "-{0} y"\n          },\n          "-1": "last year"\n        },\n        "year-narrow": {\n          "0": "this year",\n          "1": "next year",\n          "future": {\n            "other": "+{0} y"\n          },\n          "past": {\n            "other": "-{0} y"\n          },\n          "-1": "last year"\n        },\n        "quarter": {\n          "0": "this quarter",\n          "1": "next quarter",\n          "future": {\n            "other": "+{0} Q"\n          },\n          "past": {\n            "other": "-{0} Q"\n          },\n          "-1": "last quarter"\n        },\n        "quarter-short": {\n          "0": "this quarter",\n          "1": "next quarter",\n          "future": {\n            "other": "+{0} Q"\n          },\n          "past": {\n            "other": "-{0} Q"\n          },\n          "-1": "last quarter"\n        },\n        "quarter-narrow": {\n          "0": "this quarter",\n          "1": "next quarter",\n          "future": {\n            "other": "+{0} Q"\n          },\n          "past": {\n            "other": "-{0} Q"\n          },\n          "-1": "last quarter"\n        },\n        "month": {\n          "0": "this month",\n          "1": "next month",\n          "future": {\n            "other": "+{0} m"\n          },\n          "past": {\n            "other": "-{0} m"\n          },\n          "-1": "last month"\n        },\n        "month-short": {\n          "0": "this month",\n          "1": "next month",\n          "future": {\n            "other": "+{0} m"\n          },\n          "past": {\n            "other": "-{0} m"\n          },\n          "-1": "last month"\n        },\n        "month-narrow": {\n          "0": "this month",\n          "1": "next month",\n          "future": {\n            "other": "+{0} m"\n          },\n          "past": {\n            "other": "-{0} m"\n          },\n          "-1": "last month"\n        },\n        "week": {\n          "0": "this week",\n          "1": "next week",\n          "future": {\n            "other": "+{0} w"\n          },\n          "past": {\n            "other": "-{0} w"\n          },\n          "-1": "last week"\n        },\n        "week-short": {\n          "0": "this week",\n          "1": "next week",\n          "future": {\n            "other": "+{0} w"\n          },\n          "past": {\n            "other": "-{0} w"\n          },\n          "-1": "last week"\n        },\n        "week-narrow": {\n          "0": "this week",\n          "1": "next week",\n          "future": {\n            "other": "+{0} w"\n          },\n          "past": {\n            "other": "-{0} w"\n          },\n          "-1": "last week"\n        },\n        "day": {\n          "0": "Hõo",\n          "1": "Suba",\n          "future": {\n            "other": "+{0} d"\n          },\n          "past": {\n            "other": "-{0} d"\n          },\n          "-1": "Bi"\n        },\n        "day-short": {\n          "0": "Hõo",\n          "1": "Suba",\n          "future": {\n            "other": "+{0} d"\n          },\n          "past": {\n            "other": "-{0} d"\n          },\n          "-1": "Bi"\n        },\n        "day-narrow": {\n          "0": "Hõo",\n          "1": "Suba",\n          "future": {\n            "other": "+{0} d"\n          },\n          "past": {\n            "other": "-{0} d"\n          },\n          "-1": "Bi"\n        },\n        "hour": {\n          "0": "this hour",\n          "future": {\n            "other": "+{0} h"\n          },\n          "past": {\n            "other": "-{0} h"\n          }\n        },\n        "hour-short": {\n          "0": "this hour",\n          "future": {\n            "other": "+{0} h"\n          },\n          "past": {\n            "other": "-{0} h"\n          }\n        },\n        "hour-narrow": {\n          "0": "this hour",\n          "future": {\n            "other": "+{0} h"\n          },\n          "past": {\n            "other": "-{0} h"\n          }\n        },\n        "minute": {\n          "0": "this minute",\n          "future": {\n            "other": "+{0} min"\n          },\n          "past": {\n            "other": "-{0} min"\n          }\n        },\n        "minute-short": {\n          "0": "this minute",\n          "future": {\n            "other": "+{0} min"\n          },\n          "past": {\n            "other": "-{0} min"\n          }\n        },\n        "minute-narrow": {\n          "0": "this minute",\n          "future": {\n            "other": "+{0} min"\n          },\n          "past": {\n            "other": "-{0} min"\n          }\n        },\n        "second": {\n          "0": "now",\n          "future": {\n            "other": "+{0} s"\n          },\n          "past": {\n            "other": "-{0} s"\n          }\n        },\n        "second-short": {\n          "0": "now",\n          "future": {\n            "other": "+{0} s"\n          },\n          "past": {\n            "other": "-{0} s"\n          }\n        },\n        "second-narrow": {\n          "0": "now",\n          "future": {\n            "other": "+{0} s"\n          },\n          "past": {\n            "other": "-{0} s"\n          }\n        }\n      }\n    },\n    "availableLocales": ["ses"],\n    "aliases": {},\n    "parentLocales": {}\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU4NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0IsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXJlbGF0aXZldGltZWZvcm1hdC9kaXN0L2xvY2FsZS1kYXRhL3Nlcy5qcz8yODhkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBnZW5lcmF0ZWQgKi9cbi8vIHByZXR0aWVyLWlnbm9yZVxuaWYgKEludGwuUmVsYXRpdmVUaW1lRm9ybWF0ICYmIHR5cGVvZiBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5fX2FkZExvY2FsZURhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQuX19hZGRMb2NhbGVEYXRhKHtcbiAgICBcImRhdGFcIjoge1xuICAgICAgXCJzZXNcIjoge1xuICAgICAgICBcIm51XCI6IFtcImxhdG5cIl0sXG4gICAgICAgIFwieWVhclwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyB5ZWFyXCIsXG4gICAgICAgICAgXCIxXCI6IFwibmV4dCB5ZWFyXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0geVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0geVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGFzdCB5ZWFyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ5ZWFyLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIHllYXJcIixcbiAgICAgICAgICBcIjFcIjogXCJuZXh0IHllYXJcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSB5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSB5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IHllYXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInllYXItbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIHllYXJcIixcbiAgICAgICAgICBcIjFcIjogXCJuZXh0IHllYXJcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSB5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSB5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IHllYXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInF1YXJ0ZXJcIjoge1xuICAgICAgICAgIFwiMFwiOiBcInRoaXMgcXVhcnRlclwiLFxuICAgICAgICAgIFwiMVwiOiBcIm5leHQgcXVhcnRlclwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IFFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IFFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcImxhc3QgcXVhcnRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicXVhcnRlci1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBxdWFydGVyXCIsXG4gICAgICAgICAgXCIxXCI6IFwibmV4dCBxdWFydGVyXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gUVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gUVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGFzdCBxdWFydGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJxdWFydGVyLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBxdWFydGVyXCIsXG4gICAgICAgICAgXCIxXCI6IFwibmV4dCBxdWFydGVyXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gUVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gUVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGFzdCBxdWFydGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb250aFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBtb250aFwiLFxuICAgICAgICAgIFwiMVwiOiBcIm5leHQgbW9udGhcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IG1vbnRoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb250aC1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBtb250aFwiLFxuICAgICAgICAgIFwiMVwiOiBcIm5leHQgbW9udGhcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSBtXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IG1vbnRoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb250aC1uYXJyb3dcIjoge1xuICAgICAgICAgIFwiMFwiOiBcInRoaXMgbW9udGhcIixcbiAgICAgICAgICBcIjFcIjogXCJuZXh0IG1vbnRoXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gbVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gbVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGFzdCBtb250aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwid2Vla1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyB3ZWVrXCIsXG4gICAgICAgICAgXCIxXCI6IFwibmV4dCB3ZWVrXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gd1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gd1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi0xXCI6IFwibGFzdCB3ZWVrXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWVrLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIHdlZWtcIixcbiAgICAgICAgICBcIjFcIjogXCJuZXh0IHdlZWtcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSB3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSB3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IHdlZWtcIlxuICAgICAgICB9LFxuICAgICAgICBcIndlZWstbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIHdlZWtcIixcbiAgICAgICAgICBcIjFcIjogXCJuZXh0IHdlZWtcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSB3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSB3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJsYXN0IHdlZWtcIlxuICAgICAgICB9LFxuICAgICAgICBcImRheVwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwiSMO1b1wiLFxuICAgICAgICAgIFwiMVwiOiBcIlN1YmFcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSBkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLTFcIjogXCJCaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGF5LXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJIw7VvXCIsXG4gICAgICAgICAgXCIxXCI6IFwiU3ViYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IGRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IGRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcIkJpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYXktbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJIw7VvXCIsXG4gICAgICAgICAgXCIxXCI6IFwiU3ViYVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IGRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IGRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCItMVwiOiBcIkJpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJob3VyXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIGhvdXJcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBoXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSBoXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaG91ci1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBob3VyXCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gaFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gaFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhvdXItbmFycm93XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIGhvdXJcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBoXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFzdFwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiLXswfSBoXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWludXRlXCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIG1pbnV0ZVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IG1pblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gbWluXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWludXRlLXNob3J0XCI6IHtcbiAgICAgICAgICBcIjBcIjogXCJ0aGlzIG1pbnV0ZVwiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IG1pblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gbWluXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWludXRlLW5hcnJvd1wiOiB7XG4gICAgICAgICAgXCIwXCI6IFwidGhpcyBtaW51dGVcIixcbiAgICAgICAgICBcImZ1dHVyZVwiOiB7XG4gICAgICAgICAgICBcIm90aGVyXCI6IFwiK3swfSBtaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IG1pblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNlY29uZFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwibm93XCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNlY29uZC1zaG9ydFwiOiB7XG4gICAgICAgICAgXCIwXCI6IFwibm93XCIsXG4gICAgICAgICAgXCJmdXR1cmVcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIit7MH0gc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhc3RcIjoge1xuICAgICAgICAgICAgXCJvdGhlclwiOiBcIi17MH0gc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNlY29uZC1uYXJyb3dcIjoge1xuICAgICAgICAgIFwiMFwiOiBcIm5vd1wiLFxuICAgICAgICAgIFwiZnV0dXJlXCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCIrezB9IHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXN0XCI6IHtcbiAgICAgICAgICAgIFwib3RoZXJcIjogXCItezB9IHNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJhdmFpbGFibGVMb2NhbGVzXCI6IFtcInNlc1wiXSxcbiAgICBcImFsaWFzZXNcIjoge30sXG4gICAgXCJwYXJlbnRMb2NhbGVzXCI6IHt9XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9584\n')},8709:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar core_1 = __webpack_require__(9905);\n\nif (!('RelativeTimeFormat' in Intl)) {\n  Object.defineProperty(Intl, 'RelativeTimeFormat', {\n    value: core_1.default,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcwOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsYUFBYSxtQkFBTyxDQUFDLElBQVE7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXJlbGF0aXZldGltZWZvcm1hdC9kaXN0L3BvbHlmaWxsLmpzPzc4M2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuXG5pZiAoISgnUmVsYXRpdmVUaW1lRm9ybWF0JyBpbiBJbnRsKSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50bCwgJ1JlbGF0aXZlVGltZUZvcm1hdCcsIHtcbiAgICB2YWx1ZTogY29yZV8xLmRlZmF1bHQsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8709\n")},5316:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("__webpack_require__(8709);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxNi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBTyxDQUFDLElBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtcmVsYXRpdmV0aW1lZm9ybWF0L3BvbHlmaWxsLmpzPzljNGUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9kaXN0L3BvbHlmaWxsJyk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5316\n")},2650:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "InternalSlotToken": function() { return /* reexport */ InternalSlotToken; },\n  "SANCTIONED_UNITS": function() { return /* reexport */ SANCTIONED_UNITS; },\n  "createResolveLocale": function() { return /* reexport */ createResolveLocale; },\n  "defaultNumberOption": function() { return /* reexport */ defaultNumberOption; },\n  "getAliasesByLang": function() { return /* reexport */ getAliasesByLang; },\n  "getCanonicalLocales": function() { return /* reexport */ getCanonicalLocales; },\n  "getInternalSlot": function() { return /* reexport */ getInternalSlot; },\n  "getLocaleHierarchy": function() { return /* reexport */ getLocaleHierarchy; },\n  "getMultiInternalSlots": function() { return /* reexport */ getMultiInternalSlots; },\n  "getNumberOption": function() { return /* reexport */ getNumberOption; },\n  "getOption": function() { return /* reexport */ getOption; },\n  "getParentLocalesByLang": function() { return /* reexport */ getParentLocalesByLang; },\n  "invariant": function() { return /* reexport */ invariant/* invariant */.k; },\n  "isLiteralPart": function() { return /* reexport */ isLiteralPart; },\n  "isMissingLocaleDataError": function() { return /* reexport */ isMissingLocaleDataError; },\n  "isWellFormedCurrencyCode": function() { return /* reexport */ isWellFormedCurrencyCode; },\n  "objectIs": function() { return /* reexport */ objectIs; },\n  "partitionPattern": function() { return /* reexport */ partitionPattern; },\n  "removeUnitNamespace": function() { return /* reexport */ removeUnitNamespace; },\n  "selectUnit": function() { return /* reexport */ selectUnit; },\n  "setInternalSlot": function() { return /* reexport */ setInternalSlot; },\n  "setMultiInternalSlots": function() { return /* reexport */ setMultiInternalSlots; },\n  "setNumberFormatDigitOptions": function() { return /* reexport */ setNumberFormatDigitOptions; },\n  "supportedLocales": function() { return /* reexport */ supportedLocales; },\n  "toObject": function() { return /* reexport */ toObject; },\n  "toString": function() { return /* reexport */ polyfill_utils_toString; },\n  "unpackData": function() { return /* reexport */ unpackData; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/diff.js\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar MS_PER_SECOND = 1e3;\nvar SECS_PER_MIN = 60;\nvar SECS_PER_HOUR = SECS_PER_MIN * 60;\nvar SECS_PER_DAY = SECS_PER_HOUR * 24;\nvar SECS_PER_WEEK = SECS_PER_DAY * 7;\nfunction selectUnit(from, to, thresholds) {\n  if (to === void 0) {\n    to = Date.now();\n  }\n\n  if (thresholds === void 0) {\n    thresholds = {};\n  }\n\n  var resolvedThresholds = __assign(__assign({}, DEFAULT_THRESHOLDS), thresholds || {});\n\n  var secs = (+from - +to) / MS_PER_SECOND;\n\n  if (Math.abs(secs) < resolvedThresholds.second) {\n    return {\n      value: Math.round(secs),\n      unit: \'second\'\n    };\n  }\n\n  var mins = secs / SECS_PER_MIN;\n\n  if (Math.abs(mins) < resolvedThresholds.minute) {\n    return {\n      value: Math.round(mins),\n      unit: \'minute\'\n    };\n  }\n\n  var hours = secs / SECS_PER_HOUR;\n\n  if (Math.abs(hours) < resolvedThresholds.hour) {\n    return {\n      value: Math.round(hours),\n      unit: \'hour\'\n    };\n  }\n\n  var days = secs / SECS_PER_DAY;\n\n  if (Math.abs(days) < resolvedThresholds.day) {\n    return {\n      value: Math.round(days),\n      unit: \'day\'\n    };\n  }\n\n  var fromDate = new Date(from);\n  var toDate = new Date(to);\n  var years = fromDate.getFullYear() - toDate.getFullYear();\n\n  if (Math.round(Math.abs(years)) > 0) {\n    return {\n      value: Math.round(years),\n      unit: \'year\'\n    };\n  }\n\n  var months = years * 12 + fromDate.getMonth() - toDate.getMonth();\n\n  if (Math.round(Math.abs(months)) > 0) {\n    return {\n      value: Math.round(months),\n      unit: \'month\'\n    };\n  }\n\n  var weeks = secs / SECS_PER_WEEK;\n  return {\n    value: Math.round(weeks),\n    unit: \'week\'\n  };\n}\nvar DEFAULT_THRESHOLDS = {\n  second: 45,\n  minute: 45,\n  hour: 22,\n  day: 5\n};\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/aliases.js\n/* @generated */\n// prettier-ignore  \n/* harmony default export */ var aliases = ({\n  "aa-SAAHO": "ssy",\n  "aam": "aas",\n  "aar": "aa",\n  "abk": "ab",\n  "adp": "dz",\n  "afr": "af",\n  "aju": "jrb",\n  "aka": "ak",\n  "alb": "sq",\n  "als": "sq",\n  "amh": "am",\n  "ara": "ar",\n  "arb": "ar",\n  "arg": "an",\n  "arm": "hy",\n  "art-lojban": "jbo",\n  "asd": "snz",\n  "asm": "as",\n  "aue": "ktz",\n  "ava": "av",\n  "ave": "ae",\n  "aym": "ay",\n  "ayr": "ay",\n  "ayx": "nun",\n  "az-AZ": "az-Latn-AZ",\n  "aze": "az",\n  "azj": "az",\n  "bak": "ba",\n  "bam": "bm",\n  "baq": "eu",\n  "bcc": "bal",\n  "bcl": "bik",\n  "bel": "be",\n  "ben": "bn",\n  "bgm": "bcg",\n  "bh": "bho",\n  "bih": "bho",\n  "bis": "bi",\n  "bjd": "drl",\n  "bod": "bo",\n  "bos": "bs",\n  "bre": "br",\n  "bs-BA": "bs-Latn-BA",\n  "bul": "bg",\n  "bur": "my",\n  "bxk": "luy",\n  "bxr": "bua",\n  "cat": "ca",\n  "ccq": "rki",\n  "cel-gaulish": "xtg-x-cel-gaulish",\n  "ces": "cs",\n  "cha": "ch",\n  "che": "ce",\n  "chi": "zh",\n  "chu": "cu",\n  "chv": "cv",\n  "cjr": "mom",\n  "cka": "cmr",\n  "cld": "syr",\n  "cmk": "xch",\n  "cmn": "zh",\n  "cnr": "sr-ME",\n  "cor": "kw",\n  "cos": "co",\n  "coy": "pij",\n  "cqu": "quh",\n  "cre": "cr",\n  "cwd": "cr",\n  "cym": "cy",\n  "cze": "cs",\n  "dan": "da",\n  "deu": "de",\n  "dgo": "doi",\n  "dhd": "mwr",\n  "dik": "din",\n  "diq": "zza",\n  "dit": "dif",\n  "div": "dv",\n  "drh": "mn",\n  "drw": "fa-af",\n  "dut": "nl",\n  "dzo": "dz",\n  "ekk": "et",\n  "ell": "el",\n  "emk": "man",\n  "eng": "en",\n  "epo": "eo",\n  "esk": "ik",\n  "est": "et",\n  "eus": "eu",\n  "ewe": "ee",\n  "fao": "fo",\n  "fas": "fa",\n  "fat": "ak",\n  "fij": "fj",\n  "fin": "fi",\n  "fra": "fr",\n  "fre": "fr",\n  "fry": "fy",\n  "fuc": "ff",\n  "ful": "ff",\n  "gav": "dev",\n  "gaz": "om",\n  "gbo": "grb",\n  "geo": "ka",\n  "ger": "de",\n  "gfx": "vaj",\n  "ggn": "gvr",\n  "gla": "gd",\n  "gle": "ga",\n  "glg": "gl",\n  "glv": "gv",\n  "gno": "gon",\n  "gre": "el",\n  "grn": "gn",\n  "gti": "nyc",\n  "gug": "gn",\n  "guj": "gu",\n  "guv": "duz",\n  "gya": "gba",\n  "ha-Latn-GH": "ha-GH",\n  "ha-Latn-NE": "ha-NE",\n  "ha-Latn-NG": "ha-NG",\n  "hat": "ht",\n  "hau": "ha",\n  "hbs": "sr-Latn",\n  "hdn": "hai",\n  "hea": "hmn",\n  "heb": "he",\n  "her": "hz",\n  "him": "srx",\n  "hin": "hi",\n  "hmo": "ho",\n  "hrr": "jal",\n  "hrv": "hr",\n  "hun": "hu",\n  "hye": "hy",\n  "i-ami": "ami",\n  "i-bnn": "bnn",\n  "i-hak": "hak",\n  "i-klingon": "tlh",\n  "i-lux": "lb",\n  "i-navajo": "nv",\n  "i-pwn": "pwn",\n  "i-tao": "tao",\n  "i-tay": "tay",\n  "i-tsu": "tsu",\n  "i-default": "en-x-i-default",\n  "i-enochian": "und-x-i-enochian",\n  "i-mingo": "see-x-i-mingo",\n  "ibi": "opa",\n  "ibo": "ig",\n  "ice": "is",\n  "ido": "io",\n  "iii": "ii",\n  "ike": "iu",\n  "iku": "iu",\n  "ile": "ie",\n  "ilw": "gal",\n  "in": "id",\n  "ina": "ia",\n  "ind": "id",\n  "ipk": "ik",\n  "isl": "is",\n  "ita": "it",\n  "iw": "he",\n  "jav": "jv",\n  "jeg": "oyb",\n  "ji": "yi",\n  "jpn": "ja",\n  "jw": "jv",\n  "kal": "kl",\n  "kan": "kn",\n  "kas": "ks",\n  "kat": "ka",\n  "kau": "kr",\n  "kaz": "kk",\n  "kgc": "tdf",\n  "kgh": "kml",\n  "khk": "mn",\n  "khm": "km",\n  "kik": "ki",\n  "kin": "rw",\n  "kir": "ky",\n  "kk-Cyrl-KZ": "kk-KZ",\n  "kmr": "ku",\n  "knc": "kr",\n  "kng": "kg",\n  "knn": "kok",\n  "koj": "kwv",\n  "kom": "kv",\n  "kon": "kg",\n  "kor": "ko",\n  "kpv": "kv",\n  "krm": "bmf",\n  "ks-Arab-IN": "ks-IN",\n  "ktr": "dtp",\n  "kua": "kj",\n  "kur": "ku",\n  "kvs": "gdj",\n  "kwq": "yam",\n  "kxe": "tvd",\n  "ky-Cyrl-KG": "ky-KG",\n  "kzj": "dtp",\n  "kzt": "dtp",\n  "lao": "lo",\n  "lat": "la",\n  "lav": "lv",\n  "lbk": "bnc",\n  "lii": "raq",\n  "lim": "li",\n  "lin": "ln",\n  "lit": "lt",\n  "llo": "ngt",\n  "lmm": "rmx",\n  "ltz": "lb",\n  "lub": "lu",\n  "lug": "lg",\n  "lvs": "lv",\n  "mac": "mk",\n  "mah": "mh",\n  "mal": "ml",\n  "mao": "mi",\n  "mar": "mr",\n  "may": "ms",\n  "meg": "cir",\n  "mhr": "chm",\n  "mkd": "mk",\n  "mlg": "mg",\n  "mlt": "mt",\n  "mn-Cyrl-MN": "mn-MN",\n  "mnk": "man",\n  "mo": "ro",\n  "mol": "ro",\n  "mon": "mn",\n  "mri": "mi",\n  "ms-Latn-BN": "ms-BN",\n  "ms-Latn-MY": "ms-MY",\n  "ms-Latn-SG": "ms-SG",\n  "msa": "ms",\n  "mst": "mry",\n  "mup": "raj",\n  "mwj": "vaj",\n  "mya": "my",\n  "myd": "aog",\n  "myt": "mry",\n  "nad": "xny",\n  "nau": "na",\n  "nav": "nv",\n  "nbl": "nr",\n  "ncp": "kdz",\n  "nde": "nd",\n  "ndo": "ng",\n  "nep": "ne",\n  "nld": "nl",\n  "nno": "nn",\n  "nns": "nbr",\n  "nnx": "ngv",\n  "no": "nb",\n  "no-bok": "nb",\n  "no-BOKMAL": "nb",\n  "no-nyn": "nn",\n  "no-NYNORSK": "nn",\n  "nob": "nb",\n  "nor": "nb",\n  "npi": "ne",\n  "nts": "pij",\n  "nya": "ny",\n  "oci": "oc",\n  "ojg": "oj",\n  "oji": "oj",\n  "ori": "or",\n  "orm": "om",\n  "ory": "or",\n  "oss": "os",\n  "oun": "vaj",\n  "pa-IN": "pa-Guru-IN",\n  "pa-PK": "pa-Arab-PK",\n  "pan": "pa",\n  "pbu": "ps",\n  "pcr": "adx",\n  "per": "fa",\n  "pes": "fa",\n  "pli": "pi",\n  "plt": "mg",\n  "pmc": "huw",\n  "pmu": "phr",\n  "pnb": "lah",\n  "pol": "pl",\n  "por": "pt",\n  "ppa": "bfy",\n  "ppr": "lcq",\n  "prs": "fa-AF",\n  "pry": "prt",\n  "pus": "ps",\n  "puz": "pub",\n  "que": "qu",\n  "quz": "qu",\n  "rmy": "rom",\n  "roh": "rm",\n  "ron": "ro",\n  "rum": "ro",\n  "run": "rn",\n  "rus": "ru",\n  "sag": "sg",\n  "san": "sa",\n  "sca": "hle",\n  "scc": "sr",\n  "scr": "hr",\n  "sgn-BE-FR": "sfb",\n  "sgn-BE-NL": "vgt",\n  "sgn-CH-DE": "sgg",\n  "sh": "sr-Latn",\n  "shi-MA": "shi-Tfng-MA",\n  "sin": "si",\n  "skk": "oyb",\n  "slk": "sk",\n  "slo": "sk",\n  "slv": "sl",\n  "sme": "se",\n  "smo": "sm",\n  "sna": "sn",\n  "snd": "sd",\n  "som": "so",\n  "sot": "st",\n  "spa": "es",\n  "spy": "kln",\n  "sqi": "sq",\n  "sr-BA": "sr-Cyrl-BA",\n  "sr-ME": "sr-Latn-ME",\n  "sr-RS": "sr-Cyrl-RS",\n  "sr-XK": "sr-Cyrl-XK",\n  "src": "sc",\n  "srd": "sc",\n  "srp": "sr",\n  "ssw": "ss",\n  "sun": "su",\n  "swa": "sw",\n  "swc": "sw-CD",\n  "swe": "sv",\n  "swh": "sw",\n  "tah": "ty",\n  "tam": "ta",\n  "tat": "tt",\n  "tdu": "dtp",\n  "tel": "te",\n  "tgk": "tg",\n  "tgl": "fil",\n  "tha": "th",\n  "thc": "tpo",\n  "thx": "oyb",\n  "tib": "bo",\n  "tie": "ras",\n  "tir": "ti",\n  "tkk": "twm",\n  "tl": "fil",\n  "tlw": "weo",\n  "tmp": "tyj",\n  "tne": "kak",\n  "tnf": "fa-af",\n  "ton": "to",\n  "tsf": "taj",\n  "tsn": "tn",\n  "tso": "ts",\n  "ttq": "tmh",\n  "tuk": "tk",\n  "tur": "tr",\n  "tw": "ak",\n  "twi": "ak",\n  "tzm-Latn-MA": "tzm-MA",\n  "ug-Arab-CN": "ug-CN",\n  "uig": "ug",\n  "ukr": "uk",\n  "umu": "del",\n  "uok": "ema",\n  "urd": "ur",\n  "uz-AF": "uz-Arab-AF",\n  "uz-UZ": "uz-Latn-UZ",\n  "uzb": "uz",\n  "uzn": "uz",\n  "vai-LR": "vai-Vaii-LR",\n  "ven": "ve",\n  "vie": "vi",\n  "vol": "vo",\n  "wel": "cy",\n  "wln": "wa",\n  "wol": "wo",\n  "xba": "cax",\n  "xho": "xh",\n  "xia": "acn",\n  "xkh": "waw",\n  "xpe": "kpe",\n  "xsj": "suj",\n  "xsl": "den",\n  "ybd": "rki",\n  "ydd": "yi",\n  "yid": "yi",\n  "yma": "lrr",\n  "ymt": "mtm",\n  "yor": "yo",\n  "yos": "zom",\n  "yue-CN": "yue-Hans-CN",\n  "yue-HK": "yue-Hant-HK",\n  "yuu": "yug",\n  "zai": "zap",\n  "zh-CN": "zh-Hans-CN",\n  "zh-guoyu": "zh",\n  "zh-hakka": "hak",\n  "zh-HK": "zh-Hant-HK",\n  "zh-min-nan": "nan",\n  "zh-MO": "zh-Hant-MO",\n  "zh-SG": "zh-Hans-SG",\n  "zh-TW": "zh-Hant-TW",\n  "zh-xiang": "hsn",\n  "zh-min": "nan-x-zh-min",\n  "zha": "za",\n  "zho": "zh",\n  "zsm": "ms",\n  "zul": "zu",\n  "zyb": "za"\n});\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/parentLocales.js\n/* @generated */\n// prettier-ignore  \n/* harmony default export */ var parentLocales = ({\n  "en-150": "en-001",\n  "en-AG": "en-001",\n  "en-AI": "en-001",\n  "en-AU": "en-001",\n  "en-BB": "en-001",\n  "en-BM": "en-001",\n  "en-BS": "en-001",\n  "en-BW": "en-001",\n  "en-BZ": "en-001",\n  "en-CA": "en-001",\n  "en-CC": "en-001",\n  "en-CK": "en-001",\n  "en-CM": "en-001",\n  "en-CX": "en-001",\n  "en-CY": "en-001",\n  "en-DG": "en-001",\n  "en-DM": "en-001",\n  "en-ER": "en-001",\n  "en-FJ": "en-001",\n  "en-FK": "en-001",\n  "en-FM": "en-001",\n  "en-GB": "en-001",\n  "en-GD": "en-001",\n  "en-GG": "en-001",\n  "en-GH": "en-001",\n  "en-GI": "en-001",\n  "en-GM": "en-001",\n  "en-GY": "en-001",\n  "en-HK": "en-001",\n  "en-IE": "en-001",\n  "en-IL": "en-001",\n  "en-IM": "en-001",\n  "en-IN": "en-001",\n  "en-IO": "en-001",\n  "en-JE": "en-001",\n  "en-JM": "en-001",\n  "en-KE": "en-001",\n  "en-KI": "en-001",\n  "en-KN": "en-001",\n  "en-KY": "en-001",\n  "en-LC": "en-001",\n  "en-LR": "en-001",\n  "en-LS": "en-001",\n  "en-MG": "en-001",\n  "en-MO": "en-001",\n  "en-MS": "en-001",\n  "en-MT": "en-001",\n  "en-MU": "en-001",\n  "en-MW": "en-001",\n  "en-MY": "en-001",\n  "en-NA": "en-001",\n  "en-NF": "en-001",\n  "en-NG": "en-001",\n  "en-NR": "en-001",\n  "en-NU": "en-001",\n  "en-NZ": "en-001",\n  "en-PG": "en-001",\n  "en-PH": "en-001",\n  "en-PK": "en-001",\n  "en-PN": "en-001",\n  "en-PW": "en-001",\n  "en-RW": "en-001",\n  "en-SB": "en-001",\n  "en-SC": "en-001",\n  "en-SD": "en-001",\n  "en-SG": "en-001",\n  "en-SH": "en-001",\n  "en-SL": "en-001",\n  "en-SS": "en-001",\n  "en-SX": "en-001",\n  "en-SZ": "en-001",\n  "en-TC": "en-001",\n  "en-TK": "en-001",\n  "en-TO": "en-001",\n  "en-TT": "en-001",\n  "en-TV": "en-001",\n  "en-TZ": "en-001",\n  "en-UG": "en-001",\n  "en-VC": "en-001",\n  "en-VG": "en-001",\n  "en-VU": "en-001",\n  "en-WS": "en-001",\n  "en-ZA": "en-001",\n  "en-ZM": "en-001",\n  "en-ZW": "en-001",\n  "en-AT": "en-150",\n  "en-BE": "en-150",\n  "en-CH": "en-150",\n  "en-DE": "en-150",\n  "en-DK": "en-150",\n  "en-FI": "en-150",\n  "en-NL": "en-150",\n  "en-SE": "en-150",\n  "en-SI": "en-150",\n  "es-AR": "es-419",\n  "es-BO": "es-419",\n  "es-BR": "es-419",\n  "es-BZ": "es-419",\n  "es-CL": "es-419",\n  "es-CO": "es-419",\n  "es-CR": "es-419",\n  "es-CU": "es-419",\n  "es-DO": "es-419",\n  "es-EC": "es-419",\n  "es-GT": "es-419",\n  "es-HN": "es-419",\n  "es-MX": "es-419",\n  "es-NI": "es-419",\n  "es-PA": "es-419",\n  "es-PE": "es-419",\n  "es-PR": "es-419",\n  "es-PY": "es-419",\n  "es-SV": "es-419",\n  "es-US": "es-419",\n  "es-UY": "es-419",\n  "es-VE": "es-419",\n  "pt-AO": "pt-PT",\n  "pt-CH": "pt-PT",\n  "pt-CV": "pt-PT",\n  "pt-FR": "pt-PT",\n  "pt-GQ": "pt-PT",\n  "pt-GW": "pt-PT",\n  "pt-LU": "pt-PT",\n  "pt-MO": "pt-PT",\n  "pt-MZ": "pt-PT",\n  "pt-ST": "pt-PT",\n  "pt-TL": "pt-PT",\n  "zh-Hant-MO": "zh-Hant-HK"\n});\n// EXTERNAL MODULE: ./node_modules/@formatjs/intl-utils/lib/invariant.js\nvar invariant = __webpack_require__(5981);\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/polyfill-utils.js\n\n\n\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\n\nfunction toObject(arg) {\n  if (arg == null) {\n    throw new TypeError(\'undefined/null cannot be converted to object\');\n  }\n\n  return Object(arg);\n}\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\n\nfunction polyfill_utils_toString(o) {\n  // Only symbol is irregular...\n  if (typeof o === \'symbol\') {\n    throw TypeError(\'Cannot convert a Symbol value to a string\');\n  }\n\n  return String(o);\n}\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\n\nfunction getOption(opts, prop, type, values, fallback) {\n  // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);\n  var value = opts[prop];\n\n  if (value !== undefined) {\n    if (type !== \'boolean\' && type !== \'string\') {\n      throw new TypeError(\'invalid type\');\n    }\n\n    if (type === \'boolean\') {\n      value = Boolean(value);\n    }\n\n    if (type === \'string\') {\n      value = polyfill_utils_toString(value);\n    }\n\n    if (values !== undefined && !values.filter(function (val) {\n      return val == value;\n    }).length) {\n      throw new RangeError(value + " is not within " + values.join(\', \'));\n    }\n\n    return value;\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\n\nfunction defaultNumberOption(val, min, max, fallback) {\n  if (val !== undefined) {\n    val = Number(val);\n\n    if (isNaN(val) || val < min || val > max) {\n      throw new RangeError(val + " is outside of range [" + min + ", " + max + "]");\n    }\n\n    return Math.floor(val);\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\n\nfunction getNumberOption(options, property, minimum, maximum, fallback) {\n  var val = options[property];\n  return defaultNumberOption(val, minimum, maximum, fallback);\n}\nfunction getAliasesByLang(lang) {\n  return Object.keys(aliases).reduce(function (all, locale) {\n    if (locale.split(\'-\')[0] === lang) {\n      all[locale] = aliases[locale];\n    }\n\n    return all;\n  }, {});\n}\nfunction getParentLocalesByLang(lang) {\n  return Object.keys(parentLocales).reduce(function (all, locale) {\n    if (locale.split(\'-\')[0] === lang) {\n      all[locale] = parentLocales[locale];\n    }\n\n    return all;\n  }, {});\n}\nfunction setInternalSlot(map, pl, field, value) {\n  if (!map.get(pl)) {\n    map.set(pl, Object.create(null));\n  }\n\n  var slots = map.get(pl);\n  slots[field] = value;\n}\nfunction setMultiInternalSlots(map, pl, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var k = _a[_i];\n    setInternalSlot(map, pl, k, props[k]);\n  }\n}\nfunction getInternalSlot(map, pl, field) {\n  return getMultiInternalSlots(map, pl, field)[field];\n}\nfunction getMultiInternalSlots(map, pl) {\n  var fields = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    fields[_i - 2] = arguments[_i];\n  }\n\n  var slots = map.get(pl);\n\n  if (!slots) {\n    throw new TypeError(pl + " InternalSlot has not been initialized");\n  }\n\n  return fields.reduce(function (all, f) {\n    all[f] = slots[f];\n    return all;\n  }, Object.create(null));\n}\nfunction isLiteralPart(patternPart) {\n  return patternPart.type === \'literal\';\n}\nfunction partitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf(\'{\');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf(\'}\', beginIndex);\n    (0,invariant/* invariant */.k)(endIndex > beginIndex, "Invalid pattern " + pattern);\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: \'literal\',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf(\'{\', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: \'literal\',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n * https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-setnfdigitoptions\n * @param intlObj\n * @param opts\n * @param mnfdDefault\n * @param mxfdDefault\n */\n\nfunction setNumberFormatDigitOptions(internalSlotMap, intlObj, opts, mnfdDefault, mxfdDefault) {\n  var mnid = getNumberOption(opts, \'minimumIntegerDigits\', 1, 21, 1);\n  var mnfd = opts.minimumFractionDigits;\n  var mxfd = opts.maximumFractionDigits;\n  var mnsd = opts.minimumSignificantDigits;\n  var mxsd = opts.maximumSignificantDigits;\n  setInternalSlot(internalSlotMap, intlObj, \'minimumIntegerDigits\', mnid);\n\n  if (mnsd !== undefined || mxsd !== undefined) {\n    setInternalSlot(internalSlotMap, intlObj, \'roundingType\', \'significantDigits\');\n    mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n    mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n    setInternalSlot(internalSlotMap, intlObj, \'minimumSignificantDigits\', mnsd);\n    setInternalSlot(internalSlotMap, intlObj, \'maximumSignificantDigits\', mxsd);\n  } else if (mnfd !== undefined || mxfd !== undefined) {\n    setInternalSlot(internalSlotMap, intlObj, \'roundingType\', \'fractionDigits\');\n    mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n    var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n    mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n    setInternalSlot(internalSlotMap, intlObj, \'minimumFractionDigits\', mnfd);\n    setInternalSlot(internalSlotMap, intlObj, \'maximumFractionDigits\', mxfd);\n  } else if (getInternalSlot(internalSlotMap, intlObj, \'notation\') === \'compact\') {\n    setInternalSlot(internalSlotMap, intlObj, \'roundingType\', \'compactRounding\');\n  } else {\n    setInternalSlot(internalSlotMap, intlObj, \'roundingType\', \'fractionDigits\');\n    setInternalSlot(internalSlotMap, intlObj, \'minimumFractionDigits\', mnfdDefault);\n    setInternalSlot(internalSlotMap, intlObj, \'maximumFractionDigits\', mxfdDefault);\n  }\n}\nfunction objectIs(x, y) {\n  if (Object.is) {\n    return Object.is(x, y);\n  } // SameValue algorithm\n\n\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } // Step 6.a: NaN == NaN\n\n\n  return x !== x && y !== y;\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\n\nfunction toUpperCase(str) {\n  return str.replace(/([a-z])/g, function (_, c) {\n    return c.toUpperCase();\n  });\n}\n/**\n * https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-iswellformedcurrencycode\n * @param currency\n */\n\n\nfunction isWellFormedCurrencyCode(currency) {\n  currency = toUpperCase(currency);\n\n  if (currency.length !== 3) {\n    return false;\n  }\n\n  if (NOT_A_Z_REGEX.test(currency)) {\n    return false;\n  }\n\n  return true;\n}\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/get-canonical-locales.js\n/**\n * IE11-safe version of getCanonicalLocales since it\'s ES2016\n * @param locales locales\n */\nfunction getCanonicalLocales(locales) {\n  // IE11\n  var getCanonicalLocales = Intl.getCanonicalLocales;\n\n  if (typeof getCanonicalLocales === \'function\') {\n    return getCanonicalLocales(locales);\n  } // NOTE: we must NOT call `supportedLocalesOf` of a formatjs polyfill, or their implementation\n  // will even eventually call this method recursively. Here we use `Intl.DateTimeFormat` since it\n  // is not polyfilled by `@formatjs`.\n  // TODO: Fix TypeScript type def for this bc undefined is just fine\n\n\n  return Intl.DateTimeFormat.supportedLocalesOf(locales);\n}\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/resolve-locale.js\nvar __extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar resolve_locale_assign = undefined && undefined.__assign || function () {\n  resolve_locale_assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return resolve_locale_assign.apply(this, arguments);\n};\n\n\n\n\nfunction createResolveLocale(getDefaultLocale) {\n  var lookupMatcher = createLookupMatcher(getDefaultLocale);\n  var bestFitMatcher = createBestFitMatcher(getDefaultLocale);\n  /**\n   * https://tc39.es/ecma402/#sec-resolvelocale\n   */\n\n  return function resolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {\n    var matcher = options.localeMatcher;\n    var r;\n\n    if (matcher === \'lookup\') {\n      r = lookupMatcher(availableLocales, requestedLocales);\n    } else {\n      r = bestFitMatcher(availableLocales, requestedLocales);\n    }\n\n    var foundLocale = r.locale;\n    var result = {\n      locale: \'\',\n      dataLocale: foundLocale\n    };\n    var supportedExtension = \'-u\';\n\n    for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {\n      var key = relevantExtensionKeys_1[_i];\n      var foundLocaleData = localeData[foundLocale];\n      (0,invariant/* invariant */.k)(typeof foundLocaleData === \'object\' && foundLocaleData !== null, "locale data " + key + " must be an object");\n      var keyLocaleData = foundLocaleData[key];\n      (0,invariant/* invariant */.k)(Array.isArray(keyLocaleData), "keyLocaleData for " + key + " must be an array");\n      var value = keyLocaleData[0];\n      (0,invariant/* invariant */.k)(typeof value === \'string\' || value === null, \'value must be string or null\');\n      var supportedExtensionAddition = \'\';\n\n      if (r.extension) {\n        var requestedValue = unicodeExtensionValue(r.extension, key);\n\n        if (requestedValue !== undefined) {\n          if (requestedValue !== \'\') {\n            if (~keyLocaleData.indexOf(requestedValue)) {\n              value = requestedValue;\n              supportedExtensionAddition = "-" + key + "-" + value;\n            }\n          } else if (~requestedValue.indexOf(\'true\')) {\n            value = \'true\';\n            supportedExtensionAddition = "-" + key;\n          }\n        }\n      }\n\n      if (key in options) {\n        var optionsValue = options[key];\n        (0,invariant/* invariant */.k)(typeof optionsValue === \'string\' || typeof optionsValue === \'undefined\' || optionsValue === null, \'optionsValue must be String, Undefined or Null\');\n\n        if (~keyLocaleData.indexOf(optionsValue)) {\n          if (optionsValue !== value) {\n            value = optionsValue;\n            supportedExtensionAddition = \'\';\n          }\n        }\n      }\n\n      result[key] = value;\n      supportedExtension += supportedExtensionAddition;\n    }\n\n    if (supportedExtension.length > 2) {\n      var privateIndex = foundLocale.indexOf(\'-x-\');\n\n      if (privateIndex === -1) {\n        foundLocale = foundLocale + supportedExtension;\n      } else {\n        var preExtension = foundLocale.slice(0, privateIndex);\n        var postExtension = foundLocale.slice(privateIndex, foundLocale.length);\n        foundLocale = preExtension + supportedExtension + postExtension;\n      }\n\n      foundLocale = getCanonicalLocales(foundLocale)[0];\n    }\n\n    result.locale = foundLocale;\n    return result;\n  };\n}\n/**\n * https://tc39.es/ecma402/#sec-unicodeextensionvalue\n * @param extension\n * @param key\n */\n\nfunction unicodeExtensionValue(extension, key) {\n  (0,invariant/* invariant */.k)(key.length === 2, \'key must have 2 elements\');\n  var size = extension.length;\n  var searchValue = "-" + key + "-";\n  var pos = extension.indexOf(searchValue);\n\n  if (pos !== -1) {\n    var start = pos + 4;\n    var end = start;\n    var k = start;\n    var done = false;\n\n    while (!done) {\n      var e = extension.indexOf(\'-\', k);\n      var len = void 0;\n\n      if (e === -1) {\n        len = size - k;\n      } else {\n        len = e - k;\n      }\n\n      if (len === 2) {\n        done = true;\n      } else if (e === -1) {\n        end = size;\n        done = true;\n      } else {\n        end = e;\n        k = e + 1;\n      }\n    }\n\n    return extension.slice(start, end);\n  }\n\n  searchValue = "-" + key;\n  pos = extension.indexOf(searchValue);\n\n  if (pos !== -1 && pos + 3 === size) {\n    return \'\';\n  }\n\n  return undefined;\n}\n\nvar UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;\n/**\n * https://tc39.es/ecma402/#sec-bestavailablelocale\n * @param availableLocales\n * @param locale\n */\n\nfunction bestAvailableLocale(availableLocales, locale) {\n  var candidate = locale;\n\n  while (true) {\n    if (~availableLocales.indexOf(candidate)) {\n      return candidate;\n    }\n\n    var pos = candidate.lastIndexOf(\'-\');\n\n    if (!~pos) {\n      return undefined;\n    }\n\n    if (pos >= 2 && candidate[pos - 2] === \'-\') {\n      pos -= 2;\n    }\n\n    candidate = candidate.slice(0, pos);\n  }\n}\n\nfunction createLookupMatcher(getDefaultLocale) {\n  /**\n   * https://tc39.es/ecma402/#sec-lookupmatcher\n   */\n  return function lookupMatcher(availableLocales, requestedLocales) {\n    var result = {\n      locale: \'\'\n    };\n\n    for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n      var locale = requestedLocales_1[_i];\n      var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, \'\');\n      var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);\n\n      if (availableLocale) {\n        result.locale = availableLocale;\n\n        if (locale !== noExtensionLocale) {\n          result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);\n        }\n\n        return result;\n      }\n    }\n\n    result.locale = getDefaultLocale();\n    return result;\n  };\n}\n\nfunction createBestFitMatcher(getDefaultLocale) {\n  return function bestFitMatcher(availableLocales, requestedLocales) {\n    var result = {\n      locale: \'\'\n    };\n\n    for (var _i = 0, requestedLocales_2 = requestedLocales; _i < requestedLocales_2.length; _i++) {\n      var locale = requestedLocales_2[_i];\n      var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, \'\');\n      var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);\n\n      if (availableLocale) {\n        result.locale = availableLocale;\n\n        if (locale !== noExtensionLocale) {\n          result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);\n        }\n\n        return result;\n      }\n    }\n\n    result.locale = getDefaultLocale();\n    return result;\n  };\n}\n\nfunction getLocaleHierarchy(locale, aliases, parentLocales) {\n  var results = [locale];\n\n  if (aliases[locale]) {\n    locale = aliases[locale];\n    results.push(locale);\n  }\n\n  var parentLocale = parentLocales[locale];\n\n  if (parentLocale) {\n    results.push(parentLocale);\n  }\n\n  var localeParts = locale.split(\'-\');\n\n  for (var i = localeParts.length; i > 1; i--) {\n    results.push(localeParts.slice(0, i - 1).join(\'-\'));\n  }\n\n  return results;\n}\n\nfunction lookupSupportedLocales(availableLocales, requestedLocales) {\n  var subset = [];\n\n  for (var _i = 0, requestedLocales_3 = requestedLocales; _i < requestedLocales_3.length; _i++) {\n    var locale = requestedLocales_3[_i];\n    var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, \'\');\n    var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);\n\n    if (availableLocale) {\n      subset.push(availableLocale);\n    }\n  }\n\n  return subset;\n}\n\nfunction supportedLocales(availableLocales, requestedLocales, options) {\n  var matcher = \'best fit\';\n\n  if (options !== undefined) {\n    options = toObject(options);\n    matcher = getOption(options, \'localeMatcher\', \'string\', [\'lookup\', \'best fit\'], \'best fit\');\n  }\n\n  if (matcher === \'best fit\') {\n    return lookupSupportedLocales(availableLocales, requestedLocales);\n  }\n\n  return lookupSupportedLocales(availableLocales, requestedLocales);\n}\n\nvar MissingLocaleDataError =\n/** @class */\nfunction (_super) {\n  __extends(MissingLocaleDataError, _super);\n\n  function MissingLocaleDataError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = \'MISSING_LOCALE_DATA\';\n    return _this;\n  }\n\n  return MissingLocaleDataError;\n}(Error);\n\nfunction isMissingLocaleDataError(e) {\n  return e.type === \'MISSING_LOCALE_DATA\';\n}\nfunction unpackData(locale, localeData,\n/** By default shallow merge the dictionaries. */\nreducer) {\n  if (reducer === void 0) {\n    reducer = function reducer(all, d) {\n      return resolve_locale_assign(resolve_locale_assign({}, all), d);\n    };\n  }\n\n  var localeHierarchy = getLocaleHierarchy(locale, localeData.aliases, localeData.parentLocales);\n  var dataToMerge = localeHierarchy.map(function (l) {\n    return localeData.data[l];\n  }).filter(Boolean);\n\n  if (!dataToMerge.length) {\n    throw new MissingLocaleDataError("Missing locale data for \\"" + locale + "\\", lookup hierarchy: " + localeHierarchy.join(\', \'));\n  }\n\n  dataToMerge.reverse();\n  return dataToMerge.reduce(reducer, {});\n}\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/units.js\n// https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_diff_out.html#sec-issanctionedsimpleunitidentifier\nvar SANCTIONED_UNITS = [\'angle-degree\', \'area-acre\', \'area-hectare\', \'concentr-percent\', \'digital-bit\', \'digital-byte\', \'digital-gigabit\', \'digital-gigabyte\', \'digital-kilobit\', \'digital-kilobyte\', \'digital-megabit\', \'digital-megabyte\', \'digital-petabyte\', \'digital-terabit\', \'digital-terabyte\', \'duration-day\', \'duration-hour\', \'duration-millisecond\', \'duration-minute\', \'duration-month\', \'duration-second\', \'duration-week\', \'duration-year\', \'length-centimeter\', \'length-foot\', \'length-inch\', \'length-kilometer\', \'length-meter\', \'length-mile-scandinavian\', \'length-mile\', \'length-millimeter\', \'length-yard\', \'mass-gram\', \'mass-kilogram\', \'mass-ounce\', \'mass-pound\', \'mass-stone\', \'temperature-celsius\', \'temperature-fahrenheit\', \'volume-fluid-ounce\', \'volume-gallon\', \'volume-liter\', \'volume-milliliter\']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.\n// For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.\n\nfunction removeUnitNamespace(unit) {\n  return unit.replace(/^(.*?)-/, \'\');\n}\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/number-types.js\nvar InternalSlotToken;\n\n(function (InternalSlotToken) {\n  // To prevent collision with {0} in CLDR\n  InternalSlotToken["compactName"] = "compactName";\n  InternalSlotToken["compactSymbol"] = "compactSymbol";\n  InternalSlotToken["currencyCode"] = "currencyCode";\n  InternalSlotToken["currencyName"] = "currencyName";\n  InternalSlotToken["currencyNarrowSymbol"] = "currencyNarrowSymbol";\n  InternalSlotToken["currencySymbol"] = "currencySymbol";\n  InternalSlotToken["minusSign"] = "minusSign";\n  InternalSlotToken["number"] = "number";\n  InternalSlotToken["percentSign"] = "percentSign";\n  InternalSlotToken["plusSign"] = "plusSign";\n  InternalSlotToken["scientificExponent"] = "scientificExponent";\n  InternalSlotToken["scientificSeparator"] = "scientificSeparator";\n  InternalSlotToken["unitName"] = "unitName";\n  InternalSlotToken["unitNarrowSymbol"] = "unitNarrowSymbol";\n  InternalSlotToken["unitSymbol"] = "unitSymbol";\n})(InternalSlotToken || (InternalSlotToken = {}));\n;// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/index.js\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2650\n')},5981:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "k": function() { return /* binding */ invariant; }\n/* harmony export */ });\nfunction invariant(condition, message, Err) {\n  if (Err === void 0) {\n    Err = Error;\n  }\n\n  if (!condition) {\n    throw new Err(message);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk4MS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXV0aWxzL2xpYi9pbnZhcmlhbnQuanM/NDk1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSwgRXJyKSB7XG4gIGlmIChFcnIgPT09IHZvaWQgMCkge1xuICAgIEVyciA9IEVycm9yO1xuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyKG1lc3NhZ2UpO1xuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5981\n')},2393:function(__unused_webpack_module,exports){"use strict";eval('var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar getLocation = function getLocation(source) {\n  var _source$location = source.location,\n      search = _source$location.search,\n      hash = _source$location.hash,\n      href = _source$location.href,\n      origin = _source$location.origin,\n      protocol = _source$location.protocol,\n      host = _source$location.host,\n      hostname = _source$location.hostname,\n      port = _source$location.port;\n  var pathname = source.location.pathname;\n\n  if (!pathname && href && canUseDOM) {\n    var url = new URL(href);\n    pathname = url.pathname;\n  }\n\n  return {\n    pathname: encodeURI(decodeURI(pathname)),\n    search: search,\n    hash: hash,\n    href: href,\n    origin: origin,\n    protocol: protocol,\n    host: host,\n    hostname: hostname,\n    port: port,\n    state: source.history.state,\n    key: source.history.state && source.history.state.key || "initial"\n  };\n};\n\nvar createHistory = function createHistory(source, options) {\n  var listeners = [];\n  var location = getLocation(source);\n  var transitioning = false;\n\n  var resolveTransition = function resolveTransition() {};\n\n  return {\n    get location() {\n      return location;\n    },\n\n    get transitioning() {\n      return transitioning;\n    },\n\n    _onTransitionComplete: function _onTransitionComplete() {\n      transitioning = false;\n      resolveTransition();\n    },\n    listen: function listen(listener) {\n      listeners.push(listener);\n\n      var popstateListener = function popstateListener() {\n        location = getLocation(source);\n        listener({\n          location: location,\n          action: "POP"\n        });\n      };\n\n      source.addEventListener("popstate", popstateListener);\n      return function () {\n        source.removeEventListener("popstate", popstateListener);\n        listeners = listeners.filter(function (fn) {\n          return fn !== listener;\n        });\n      };\n    },\n    navigate: function navigate(to) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          state = _ref.state,\n          _ref$replace = _ref.replace,\n          replace = _ref$replace === undefined ? false : _ref$replace;\n\n      if (typeof to === "number") {\n        source.history.go(to);\n      } else {\n        state = _extends({}, state, {\n          key: Date.now() + ""\n        }); // try...catch iOS Safari limits to 100 pushState calls\n\n        try {\n          if (transitioning || replace) {\n            source.history.replaceState(state, null, to);\n          } else {\n            source.history.pushState(state, null, to);\n          }\n        } catch (e) {\n          source.location[replace ? "replace" : "assign"](to);\n        }\n      }\n\n      location = getLocation(source);\n      transitioning = true;\n      var transition = new Promise(function (res) {\n        return resolveTransition = res;\n      });\n      listeners.forEach(function (listener) {\n        return listener({\n          location: location,\n          action: "PUSH"\n        });\n      });\n      return transition;\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// Stores history entries in memory for testing or other platforms like Native\n\n\nvar createMemorySource = function createMemorySource() {\n  var initialPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";\n  var searchIndex = initialPath.indexOf("?");\n  var initialLocation = {\n    pathname: searchIndex > -1 ? initialPath.substr(0, searchIndex) : initialPath,\n    search: searchIndex > -1 ? initialPath.substr(searchIndex) : ""\n  };\n  var index = 0;\n  var stack = [initialLocation];\n  var states = [null];\n  return {\n    get location() {\n      return stack[index];\n    },\n\n    addEventListener: function addEventListener(name, fn) {},\n    removeEventListener: function removeEventListener(name, fn) {},\n    history: {\n      get entries() {\n        return stack;\n      },\n\n      get index() {\n        return index;\n      },\n\n      get state() {\n        return states[index];\n      },\n\n      pushState: function pushState(state, _, uri) {\n        var _uri$split = uri.split("?"),\n            pathname = _uri$split[0],\n            _uri$split$ = _uri$split[1],\n            search = _uri$split$ === undefined ? "" : _uri$split$;\n\n        index++;\n        stack.push({\n          pathname: pathname,\n          search: search.length ? "?" + search : search\n        });\n        states.push(state);\n      },\n      replaceState: function replaceState(state, _, uri) {\n        var _uri$split2 = uri.split("?"),\n            pathname = _uri$split2[0],\n            _uri$split2$ = _uri$split2[1],\n            search = _uri$split2$ === undefined ? "" : _uri$split2$;\n\n        stack[index] = {\n          pathname: pathname,\n          search: search\n        };\n        states[index] = state;\n      },\n      go: function go(to) {\n        var newIndex = index + to;\n\n        if (newIndex < 0 || newIndex > states.length - 1) {\n          return;\n        }\n\n        index = newIndex;\n      }\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// global history - uses window.history as the source if available, otherwise a\n// memory history\n\n\nvar canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);\n\nvar getSource = function getSource() {\n  return canUseDOM ? window : createMemorySource();\n};\n\nvar globalHistory = createHistory(getSource());\nvar navigate = globalHistory.navigate; ////////////////////////////////////////////////////////////////////////////////\n\nexports.V5 = globalHistory;\n__webpack_unused_export__ = navigate;\n__webpack_unused_export__ = createHistory;\n__webpack_unused_export__ = createMemorySource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2393\n')},2098:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\nexports.shallowCompare = exports.validateRedirect = exports.insertParams = exports.resolve = exports.match = exports.pick = exports.startsWith = undefined;\n\nvar _invariant = __webpack_require__(1143);\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// startsWith(string, search) - Check if `string` starts with `search`\n\n\nvar startsWith = function startsWith(string, search) {\n  return string.substr(0, search.length) === search;\n}; ////////////////////////////////////////////////////////////////////////////////\n// pick(routes, uri)\n//\n// Ranks and picks the best route to match. Each segment gets the highest\n// amount of points, then the type of segment gets an additional amount of\n// points where\n//\n//     static > dynamic > splat > root\n//\n// This way we don\'t have to worry about the order of our routes, let the\n// computers do it.\n//\n// A route looks like this\n//\n//     { path, default, value }\n//\n// And a returned match looks like:\n//\n//     { route, params, uri }\n//\n// I know, I should use TypeScript not comments for these types.\n\n\nvar pick = function pick(routes, uri) {\n  var match = void 0;\n  var default_ = void 0;\n\n  var _uri$split = uri.split("?"),\n      uriPathname = _uri$split[0];\n\n  var uriSegments = segmentize(uriPathname);\n  var isRootUri = uriSegments[0] === "";\n  var ranked = rankRoutes(routes);\n\n  for (var i = 0, l = ranked.length; i < l; i++) {\n    var missed = false;\n    var route = ranked[i].route;\n\n    if (route.default) {\n      default_ = {\n        route: route,\n        params: {},\n        uri: uri\n      };\n      continue;\n    }\n\n    var routeSegments = segmentize(route.path);\n    var params = {};\n    var max = Math.max(uriSegments.length, routeSegments.length);\n    var index = 0;\n\n    for (; index < max; index++) {\n      var routeSegment = routeSegments[index];\n      var uriSegment = uriSegments[index];\n\n      if (isSplat(routeSegment)) {\n        // Hit a splat, just grab the rest, and return a match\n        // uri:   /files/documents/work\n        // route: /files/*\n        var param = routeSegment.slice(1) || "*";\n        params[param] = uriSegments.slice(index).map(decodeURIComponent).join("/");\n        break;\n      }\n\n      if (uriSegment === undefined) {\n        // URI is shorter than the route, no match\n        // uri:   /users\n        // route: /users/:userId\n        missed = true;\n        break;\n      }\n\n      var dynamicMatch = paramRe.exec(routeSegment);\n\n      if (dynamicMatch && !isRootUri) {\n        var matchIsNotReserved = reservedNames.indexOf(dynamicMatch[1]) === -1;\n        !matchIsNotReserved ?  false ? 0 : (0, _invariant2.default)(false) : void 0;\n        var value = decodeURIComponent(uriSegment);\n        params[dynamicMatch[1]] = value;\n      } else if (routeSegment !== uriSegment) {\n        // Current segments don\'t match, not dynamic, not splat, so no match\n        // uri:   /users/123/settings\n        // route: /users/:id/profile\n        missed = true;\n        break;\n      }\n    }\n\n    if (!missed) {\n      match = {\n        route: route,\n        params: params,\n        uri: "/" + uriSegments.slice(0, index).join("/")\n      };\n      break;\n    }\n  }\n\n  return match || default_ || null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// match(path, uri) - Matches just one path to a uri, also lol\n\n\nvar match = function match(path, uri) {\n  return pick([{\n    path: path\n  }], uri);\n}; ////////////////////////////////////////////////////////////////////////////////\n// resolve(to, basepath)\n//\n// Resolves URIs as though every path is a directory, no files.  Relative URIs\n// in the browser can feel awkward because not only can you be "in a directory"\n// you can be "at a file", too. For example\n//\n//     browserSpecResolve(\'foo\', \'/bar/\') => /bar/foo\n//     browserSpecResolve(\'foo\', \'/bar\') => /foo\n//\n// But on the command line of a file system, it\'s not as complicated, you can\'t\n// `cd` from a file, only directories.  This way, links have to know less about\n// their current path. To go deeper you can do this:\n//\n//     <Link to="deeper"/>\n//     // instead of\n//     <Link to=`{${props.uri}/deeper}`/>\n//\n// Just like `cd`, if you want to go deeper from the command line, you do this:\n//\n//     cd deeper\n//     # not\n//     cd $(pwd)/deeper\n//\n// By treating every path as a directory, linking to relative paths should\n// require less contextual information and (fingers crossed) be more intuitive.\n\n\nvar resolve = function resolve(to, base) {\n  // /foo/bar, /baz/qux => /foo/bar\n  if (startsWith(to, "/")) {\n    return to;\n  }\n\n  var _to$split = to.split("?"),\n      toPathname = _to$split[0],\n      toQuery = _to$split[1];\n\n  var _base$split = base.split("?"),\n      basePathname = _base$split[0];\n\n  var toSegments = segmentize(toPathname);\n  var baseSegments = segmentize(basePathname); // ?a=b, /users?b=c => /users?a=b\n\n  if (toSegments[0] === "") {\n    return addQuery(basePathname, toQuery);\n  } // profile, /users/789 => /users/789/profile\n\n\n  if (!startsWith(toSegments[0], ".")) {\n    var pathname = baseSegments.concat(toSegments).join("/");\n    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);\n  } // ./         /users/123  =>  /users/123\n  // ../        /users/123  =>  /users\n  // ../..      /users/123  =>  /\n  // ../../one  /a/b/c/d    =>  /a/b/one\n  // .././one   /a/b/c/d    =>  /a/b/c/one\n\n\n  var allSegments = baseSegments.concat(toSegments);\n  var segments = [];\n\n  for (var i = 0, l = allSegments.length; i < l; i++) {\n    var segment = allSegments[i];\n    if (segment === "..") segments.pop();else if (segment !== ".") segments.push(segment);\n  }\n\n  return addQuery("/" + segments.join("/"), toQuery);\n}; ////////////////////////////////////////////////////////////////////////////////\n// insertParams(path, params)\n\n\nvar insertParams = function insertParams(path, params) {\n  var _path$split = path.split("?"),\n      pathBase = _path$split[0],\n      _path$split$ = _path$split[1],\n      query = _path$split$ === undefined ? "" : _path$split$;\n\n  var segments = segmentize(pathBase);\n  var constructedPath = "/" + segments.map(function (segment) {\n    var match = paramRe.exec(segment);\n    return match ? params[match[1]] : segment;\n  }).join("/");\n  var _params$location = params.location;\n  _params$location = _params$location === undefined ? {} : _params$location;\n  var _params$location$sear = _params$location.search,\n      search = _params$location$sear === undefined ? "" : _params$location$sear;\n  var searchSplit = search.split("?")[1] || "";\n  constructedPath = addQuery(constructedPath, query, searchSplit);\n  return constructedPath;\n};\n\nvar validateRedirect = function validateRedirect(from, to) {\n  var filter = function filter(segment) {\n    return isDynamic(segment);\n  };\n\n  var fromString = segmentize(from).filter(filter).sort().join("/");\n  var toString = segmentize(to).filter(filter).sort().join("/");\n  return fromString === toString;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar paramRe = /^:(.+)/;\nvar SEGMENT_POINTS = 4;\nvar STATIC_POINTS = 3;\nvar DYNAMIC_POINTS = 2;\nvar SPLAT_PENALTY = 1;\nvar ROOT_POINTS = 1;\n\nvar isRootSegment = function isRootSegment(segment) {\n  return segment === "";\n};\n\nvar isDynamic = function isDynamic(segment) {\n  return paramRe.test(segment);\n};\n\nvar isSplat = function isSplat(segment) {\n  return segment && segment[0] === "*";\n};\n\nvar rankRoute = function rankRoute(route, index) {\n  var score = route.default ? 0 : segmentize(route.path).reduce(function (score, segment) {\n    score += SEGMENT_POINTS;\n    if (isRootSegment(segment)) score += ROOT_POINTS;else if (isDynamic(segment)) score += DYNAMIC_POINTS;else if (isSplat(segment)) score -= SEGMENT_POINTS + SPLAT_PENALTY;else score += STATIC_POINTS;\n    return score;\n  }, 0);\n  return {\n    route: route,\n    score: score,\n    index: index\n  };\n};\n\nvar rankRoutes = function rankRoutes(routes) {\n  return routes.map(rankRoute).sort(function (a, b) {\n    return a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index;\n  });\n};\n\nvar segmentize = function segmentize(uri) {\n  return uri // strip starting/ending slashes\n  .replace(/(^\\/+|\\/+$)/g, "").split("/");\n};\n\nvar addQuery = function addQuery(pathname) {\n  for (var _len = arguments.length, query = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    query[_key - 1] = arguments[_key];\n  }\n\n  query = query.filter(function (q) {\n    return q && q.length > 0;\n  });\n  return pathname + (query && query.length > 0 ? "?" + query.join("&") : "");\n};\n\nvar reservedNames = ["uri", "path"];\n/**\n * Shallow compares two objects.\n * @param {Object} obj1 The first object to compare.\n * @param {Object} obj2 The second object to compare.\n */\n\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  var obj1Keys = Object.keys(obj1);\n  return obj1Keys.length === Object.keys(obj2).length && obj1Keys.every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n\n\nexports.startsWith = startsWith;\nexports.pick = pick;\nexports.match = match;\nexports.resolve = resolve;\nexports.insertParams = insertParams;\nexports.validateRedirect = validateRedirect;\nexports.shallowCompare = shallowCompare;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2098\n')},1875:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Gd": function() { return /* binding */ getCurrentHub; },\n/* harmony export */   "Xb": function() { return /* binding */ Hub; },\n/* harmony export */   "cu": function() { return /* binding */ getMainCarrier; },\n/* harmony export */   "pj": function() { return /* binding */ makeMain; },\n/* harmony export */   "vi": function() { return /* binding */ getHubFromCarrier; }\n/* harmony export */ });\n/* unused harmony exports API_VERSION, setHubOnCarrier */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3144);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2861);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5153);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(245);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4105);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7659);\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6073);\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\n\nvar API_VERSION = 4;\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\n\nvar DEFAULT_BREADCRUMBS = 100;\n/**\n * A layer in the process stack.\n * @hidden\n */\n\n/**\n * @inheritDoc\n */\n\nvar Hub = /*#__PURE__*/function () {\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _scope_js__WEBPACK_IMPORTED_MODULE_1__/* .Scope */ .s();\n\n    var _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this, Hub);\n\n    ;\n    this._version = _version;\n\n    Hub.prototype.__init.call(this);\n\n    this.getStackTop().scope = scope;\n\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(Hub, [{\n    key: "__init",\n    value:\n    /** Is a {@link Layer}[] containing the client and scope */\n    function __init() {\n      this._stack = [{}];\n    }\n  }, {\n    key: "isOlderThan",\n    value: function isOlderThan(version) {\n      return this._version < version;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "bindClient",\n    value: function bindClient(client) {\n      var top = this.getStackTop();\n      top.client = client;\n\n      if (client && client.setupIntegrations) {\n        client.setupIntegrations();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "pushScope",\n    value: function pushScope() {\n      // We want to clone the content of prev scope\n      var scope = _scope_js__WEBPACK_IMPORTED_MODULE_1__/* .Scope.clone */ .s.clone(this.getScope());\n      this.getStack().push({\n        client: this.getClient(),\n        scope: scope\n      });\n      return scope;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "popScope",\n    value: function popScope() {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "withScope",\n    value: function withScope(callback) {\n      var scope = this.pushScope();\n\n      try {\n        callback(scope);\n      } finally {\n        this.popScope();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getClient",\n    value: function getClient() {\n      return this.getStackTop().client;\n    }\n    /** Returns the scope of the top stack. */\n\n  }, {\n    key: "getScope",\n    value: function getScope() {\n      return this.getStackTop().scope;\n    }\n    /** Returns the scope stack for domains or the process. */\n\n  }, {\n    key: "getStack",\n    value: function getStack() {\n      return this._stack;\n    }\n    /** Returns the topmost scope layer in the order domain > local > process. */\n\n  }, {\n    key: "getStackTop",\n    value: function getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "captureException",\n    value: function captureException(exception, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .uuid4 */ .DM)();\n      var syntheticException = new Error(\'Sentry syntheticException\');\n\n      this._withClient(function (client, scope) {\n        client.captureException(exception, _objectSpread(_objectSpread({\n          originalException: exception,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "captureMessage",\n    value: function captureMessage(message, level, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .uuid4 */ .DM)();\n      var syntheticException = new Error(message);\n\n      this._withClient(function (client, scope) {\n        client.captureMessage(message, level, _objectSpread(_objectSpread({\n          originalException: message,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "captureEvent",\n    value: function captureEvent(event, hint) {\n      var eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .uuid4 */ .DM)();\n\n      if (event.type !== \'transaction\') {\n        this._lastEventId = eventId;\n      }\n\n      this._withClient(function (client, scope) {\n        client.captureEvent(event, _objectSpread(_objectSpread({}, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "lastEventId",\n    value: function lastEventId() {\n      return this._lastEventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "addBreadcrumb",\n    value: function addBreadcrumb(breadcrumb, hint) {\n      var _this$getStackTop = this.getStackTop(),\n          scope = _this$getStackTop.scope,\n          client = _this$getStackTop.client;\n\n      if (!scope || !client) return;\n\n      var _ref = client.getOptions && client.getOptions() || {},\n          _ref$beforeBreadcrumb = _ref.beforeBreadcrumb,\n          beforeBreadcrumb = _ref$beforeBreadcrumb === void 0 ? null : _ref$beforeBreadcrumb,\n          _ref$maxBreadcrumbs = _ref.maxBreadcrumbs,\n          maxBreadcrumbs = _ref$maxBreadcrumbs === void 0 ? DEFAULT_BREADCRUMBS : _ref$maxBreadcrumbs;\n\n      if (maxBreadcrumbs <= 0) return;\n      var timestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .dateTimestampInSeconds */ .yW)();\n\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: timestamp\n      }, breadcrumb);\n\n      var finalBreadcrumb = beforeBreadcrumb ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__/* .consoleSandbox */ .Cf)(function () {\n        return beforeBreadcrumb(mergedBreadcrumb, hint);\n      }) : mergedBreadcrumb;\n      if (finalBreadcrumb === null) return;\n      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setUser",\n    value: function setUser(user) {\n      var scope = this.getScope();\n      if (scope) scope.setUser(user);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTags",\n    value: function setTags(tags) {\n      var scope = this.getScope();\n      if (scope) scope.setTags(tags);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setExtras",\n    value: function setExtras(extras) {\n      var scope = this.getScope();\n      if (scope) scope.setExtras(extras);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTag",\n    value: function setTag(key, value) {\n      var scope = this.getScope();\n      if (scope) scope.setTag(key, value);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setExtra",\n    value: function setExtra(key, extra) {\n      var scope = this.getScope();\n      if (scope) scope.setExtra(key, extra);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setContext",\n    value: function setContext(name, context) {\n      var scope = this.getScope();\n      if (scope) scope.setContext(name, context);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "configureScope",\n    value: function configureScope(callback) {\n      var _this$getStackTop2 = this.getStackTop(),\n          scope = _this$getStackTop2.scope,\n          client = _this$getStackTop2.client;\n\n      if (scope && client) {\n        callback(scope);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "run",\n    value: function run(callback) {\n      var oldHub = makeMain(this);\n\n      try {\n        callback(this);\n      } finally {\n        makeMain(oldHub);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getIntegration",\n    value: function getIntegration(integration) {\n      var client = this.getClient();\n      if (!client) return null;\n\n      try {\n        return client.getIntegration(integration);\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__/* .logger.warn */ .kg.warn("Cannot retrieve integration ".concat(integration.id, " from the current Hub"));\n        return null;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "startTransaction",\n    value: function startTransaction(context, customSamplingContext) {\n      return this._callExtensionMethod(\'startTransaction\', context, customSamplingContext);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "traceHeaders",\n    value: function traceHeaders() {\n      return this._callExtensionMethod(\'traceHeaders\');\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "captureSession",\n    value: function captureSession() {\n      var endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // both send the update and pull the session from the scope\n      if (endSession) {\n        return this.endSession();\n      } // only send the update\n\n\n      this._sendSessionUpdate();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "endSession",\n    value: function endSession() {\n      var layer = this.getStackTop();\n      var scope = layer && layer.scope;\n      var session = scope && scope.getSession();\n\n      if (session) {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_7__/* .closeSession */ .RJ)(session);\n      }\n\n      this._sendSessionUpdate(); // the session is over; take it off of the scope\n\n\n      if (scope) {\n        scope.setSession();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "startSession",\n    value: function startSession(context) {\n      var _this$getStackTop3 = this.getStackTop(),\n          scope = _this$getStackTop3.scope,\n          client = _this$getStackTop3.client;\n\n      var _ref2 = client && client.getOptions() || {},\n          release = _ref2.release,\n          environment = _ref2.environment; // Will fetch userAgent if called from browser sdk\n\n\n      var global = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__/* .getGlobalObject */ .R)();\n\n      var _ref3 = global.navigator || {},\n          userAgent = _ref3.userAgent;\n\n      var session = (0,_session_js__WEBPACK_IMPORTED_MODULE_7__/* .makeSession */ .Hv)(_objectSpread(_objectSpread(_objectSpread({\n        release: release,\n        environment: environment\n      }, scope && {\n        user: scope.getUser()\n      }), userAgent && {\n        userAgent: userAgent\n      }), context));\n\n      if (scope) {\n        // End existing session if there\'s one\n        var currentSession = scope.getSession && scope.getSession();\n\n        if (currentSession && currentSession.status === \'ok\') {\n          (0,_session_js__WEBPACK_IMPORTED_MODULE_7__/* .updateSession */ .CT)(currentSession, {\n            status: \'exited\'\n          });\n        }\n\n        this.endSession(); // Afterwards we set the new session on the scope\n\n        scope.setSession(session);\n      }\n\n      return session;\n    }\n    /**\n     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n     * when Tracing is used.\n     */\n\n  }, {\n    key: "shouldSendDefaultPii",\n    value: function shouldSendDefaultPii() {\n      var client = this.getClient();\n      var options = client && client.getOptions();\n      return Boolean(options && options.sendDefaultPii);\n    }\n    /**\n     * Sends the current Session on the scope\n     */\n\n  }, {\n    key: "_sendSessionUpdate",\n    value: function _sendSessionUpdate() {\n      var _this$getStackTop4 = this.getStackTop(),\n          scope = _this$getStackTop4.scope,\n          client = _this$getStackTop4.client;\n\n      if (!scope) return;\n      var session = scope.getSession();\n\n      if (session) {\n        if (client && client.captureSession) {\n          client.captureSession(session);\n        }\n      }\n    }\n    /**\n     * Internal helper function to call a method on the top client if it exists.\n     *\n     * @param method The method to call on the client.\n     * @param args Arguments to pass to the client function.\n     */\n\n  }, {\n    key: "_withClient",\n    value: function _withClient(callback) {\n      var _this$getStackTop5 = this.getStackTop(),\n          scope = _this$getStackTop5.scope,\n          client = _this$getStackTop5.client;\n\n      if (client) {\n        callback(client, scope);\n      }\n    }\n    /**\n     * Calls global extension method and binding current instance to the function call\n     */\n    // @ts-ignore Function lacks ending return statement and return type does not include \'undefined\'. ts(2366)\n\n  }, {\n    key: "_callExtensionMethod",\n    value: function _callExtensionMethod(method) {\n      var carrier = getMainCarrier();\n      var sentry = carrier.__SENTRY__;\n\n      if (sentry && sentry.extensions && typeof sentry.extensions[method] === \'function\') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return sentry.extensions[method].apply(this, args);\n      }\n\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__/* .logger.warn */ .kg.warn("Extension method ".concat(method, " couldn\'t be found, doing nothing."));\n    }\n  }]);\n\n  return Hub;\n}();\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\n\n\nfunction getMainCarrier() {\n  var carrier = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__/* .getGlobalObject */ .R)();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return carrier;\n}\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\n\n\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\n\n\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier(); // If there\'s no hub, or its an old API, assign a new one\n\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  } // Prefer domains over global if they are there (applicable only to Node environment)\n\n\n  if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .isNodeEnv */ .KV)()) {\n    return getHubFromActiveDomain(registry);\n  } // Return hub that lives on a global object\n\n\n  return getHubFromCarrier(registry);\n}\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn\'t exist\n * @returns discovered hub\n */\n\n\nfunction getHubFromActiveDomain(registry) {\n  try {\n    var sentry = getMainCarrier().__SENTRY__;\n\n    var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active; // If there\'s no active domain, just return global hub\n\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    } // If there\'s no hub on current domain, or it\'s an old API, assign a new one\n\n\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, _scope_js__WEBPACK_IMPORTED_MODULE_1__/* .Scope.clone */ .s.clone(registryHubTopStack.scope)));\n    } // Return hub that lives on a domain\n\n\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\n\n\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\n\n\nfunction getHubFromCarrier(carrier) {\n  return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__/* .getGlobalSingleton */ .Y)(\'hub\', function () {\n    return new Hub();\n  }, carrier);\n}\n/**\n * This will set passed {@link Hub} on the passed object\'s __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\n\n\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n\n  var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n\n  __SENTRY__.hub = hub;\n  return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1875\n')},7659:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "c": function() { return /* binding */ addGlobalEventProcessor; },\n/* harmony export */   "s": function() { return /* binding */ Scope; }\n/* harmony export */ });\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2982);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3144);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2684);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5153);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5370);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(245);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4105);\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6073);\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\n\nvar MAX_BREADCRUMBS = 100;\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope = /*#__PURE__*/function () {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK\'s event processing pipeline but which shouldn\'t get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n  function Scope() {\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, Scope);\n\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Scope, [{\n    key: "addScopeListener",\n    value:\n    /**\n     * Add internal on change listener. Used for sub SDKs that need to store the scope.\n     * @hidden\n     */\n    function addScopeListener(callback) {\n      this._scopeListeners.push(callback);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "addEventProcessor",\n    value: function addEventProcessor(callback) {\n      this._eventProcessors.push(callback);\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setUser",\n    value: function setUser(user) {\n      this._user = user || {};\n\n      if (this._session) {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_3__/* .updateSession */ .CT)(this._session, {\n          user: user\n        });\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getUser",\n    value: function getUser() {\n      return this._user;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getRequestSession",\n    value: function getRequestSession() {\n      return this._requestSession;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setRequestSession",\n    value: function setRequestSession(requestSession) {\n      this._requestSession = requestSession;\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTags",\n    value: function setTags(tags) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), tags);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTag",\n    value: function setTag(key, value) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({}, key, value));\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setExtras",\n    value: function setExtras(extras) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), extras);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setExtra",\n    value: function setExtra(key, extra) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({}, key, extra));\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setFingerprint",\n    value: function setFingerprint(fingerprint) {\n      this._fingerprint = fingerprint;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setLevel",\n    value: function setLevel(level) {\n      this._level = level;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTransactionName",\n    value: function setTransactionName(name) {\n      this._transactionName = name;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setContext",\n    value: function setContext(key, context) {\n      if (context === null) {\n        delete this._contexts[key];\n      } else {\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({}, key, context));\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setSpan",\n    value: function setSpan(span) {\n      this._span = span;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getSpan",\n    value: function getSpan() {\n      return this._span;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getTransaction",\n    value: function getTransaction() {\n      // Often, this span (if it exists at all) will be a transaction, but it\'s not guaranteed to be. Regardless, it will\n      // have a pointer to the currently-active transaction.\n      var span = this.getSpan();\n      return span && span.transaction;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setSession",\n    value: function setSession(session) {\n      if (!session) {\n        delete this._session;\n      } else {\n        this._session = session;\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getSession",\n    value: function getSession() {\n      return this._session;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "update",\n    value: function update(captureContext) {\n      if (!captureContext) {\n        return this;\n      }\n\n      if (typeof captureContext === \'function\') {\n        var updatedScope = captureContext(this);\n        return updatedScope instanceof Scope ? updatedScope : this;\n      }\n\n      if (captureContext instanceof Scope) {\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext._tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext._extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext._contexts);\n\n        if (captureContext._user && Object.keys(captureContext._user).length) {\n          this._user = captureContext._user;\n        }\n\n        if (captureContext._level) {\n          this._level = captureContext._level;\n        }\n\n        if (captureContext._fingerprint) {\n          this._fingerprint = captureContext._fingerprint;\n        }\n\n        if (captureContext._requestSession) {\n          this._requestSession = captureContext._requestSession;\n        }\n      } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .isPlainObject */ .PO)(captureContext)) {\n        captureContext = captureContext;\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext.tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext.extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext.contexts);\n\n        if (captureContext.user) {\n          this._user = captureContext.user;\n        }\n\n        if (captureContext.level) {\n          this._level = captureContext.level;\n        }\n\n        if (captureContext.fingerprint) {\n          this._fingerprint = captureContext.fingerprint;\n        }\n\n        if (captureContext.requestSession) {\n          this._requestSession = captureContext.requestSession;\n        }\n      }\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "clear",\n    value: function clear() {\n      this._breadcrumbs = [];\n      this._tags = {};\n      this._extra = {};\n      this._user = {};\n      this._contexts = {};\n      this._level = undefined;\n      this._transactionName = undefined;\n      this._fingerprint = undefined;\n      this._requestSession = undefined;\n      this._span = undefined;\n      this._session = undefined;\n\n      this._notifyScopeListeners();\n\n      this._attachments = [];\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "addBreadcrumb",\n    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n      var maxCrumbs = typeof maxBreadcrumbs === \'number\' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS; // No data has been changed, so don\'t notify scope listeners\n\n      if (maxCrumbs <= 0) {\n        return this;\n      }\n\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .dateTimestampInSeconds */ .yW)()\n      }, breadcrumb);\n\n      this._breadcrumbs = [].concat((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._breadcrumbs), [mergedBreadcrumb]).slice(-maxCrumbs);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "clearBreadcrumbs",\n    value: function clearBreadcrumbs() {\n      this._breadcrumbs = [];\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "addAttachment",\n    value: function addAttachment(attachment) {\n      this._attachments.push(attachment);\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getAttachments",\n    value: function getAttachments() {\n      return this._attachments;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "clearAttachments",\n    value: function clearAttachments() {\n      this._attachments = [];\n      return this;\n    }\n    /**\n     * Applies the current context and fingerprint to the event.\n     * Note that breadcrumbs will be added by the client.\n     * Also if the event has already breadcrumbs on it, we do not merge them.\n     * @param event Event\n     * @param hint May contain additional information about the original exception.\n     * @hidden\n     */\n\n  }, {\n    key: "applyToEvent",\n    value: function applyToEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this._extra && Object.keys(this._extra).length) {\n        event.extra = _objectSpread(_objectSpread({}, this._extra), event.extra);\n      }\n\n      if (this._tags && Object.keys(this._tags).length) {\n        event.tags = _objectSpread(_objectSpread({}, this._tags), event.tags);\n      }\n\n      if (this._user && Object.keys(this._user).length) {\n        event.user = _objectSpread(_objectSpread({}, this._user), event.user);\n      }\n\n      if (this._contexts && Object.keys(this._contexts).length) {\n        event.contexts = _objectSpread(_objectSpread({}, this._contexts), event.contexts);\n      }\n\n      if (this._level) {\n        event.level = this._level;\n      }\n\n      if (this._transactionName) {\n        event.transaction = this._transactionName;\n      } // We want to set the trace context for normal events only if there isn\'t already\n      // a trace context on the event. There is a product feature in place where we link\n      // errors with transaction and it relies on that.\n\n\n      if (this._span) {\n        event.contexts = _objectSpread({\n          trace: this._span.getTraceContext()\n        }, event.contexts);\n        var transactionName = this._span.transaction && this._span.transaction.name;\n\n        if (transactionName) {\n          event.tags = _objectSpread({\n            transaction: transactionName\n          }, event.tags);\n        }\n      }\n\n      this._applyFingerprint(event);\n\n      event.breadcrumbs = [].concat((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(event.breadcrumbs || []), (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._breadcrumbs));\n      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n      event.sdkProcessingMetadata = _objectSpread(_objectSpread({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);\n      return this._notifyEventProcessors([].concat((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(getGlobalEventProcessors()), (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._eventProcessors)), event, hint);\n    }\n    /**\n     * Add data which will be accessible during event processing but won\'t get sent to Sentry\n     */\n\n  }, {\n    key: "setSDKProcessingMetadata",\n    value: function setSDKProcessingMetadata(newData) {\n      this._sdkProcessingMetadata = _objectSpread(_objectSpread({}, this._sdkProcessingMetadata), newData);\n      return this;\n    }\n    /**\n     * This will be called after {@link applyToEvent} is finished.\n     */\n\n  }, {\n    key: "_notifyEventProcessors",\n    value: function _notifyEventProcessors(processors, event, hint) {\n      var _this = this;\n\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new _sentry_utils__WEBPACK_IMPORTED_MODULE_7__/* .SyncPromise */ .cW(function (resolve, reject) {\n        var processor = processors[index];\n\n        if (event === null || typeof processor !== \'function\') {\n          resolve(event);\n        } else {\n          var result = processor(_objectSpread({}, event), hint);\n          (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && processor.id && result === null && _sentry_utils__WEBPACK_IMPORTED_MODULE_8__/* .logger.log */ .kg.log("Event processor \\"".concat(processor.id, "\\" dropped event"));\n\n          if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .isThenable */ .J8)(result)) {\n            void result.then(function (final) {\n              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n            }).then(null, reject);\n          } else {\n            void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n          }\n        }\n      });\n    }\n    /**\n     * This will be called on every set call.\n     */\n\n  }, {\n    key: "_notifyScopeListeners",\n    value: function _notifyScopeListeners() {\n      var _this2 = this;\n\n      // We need this check for this._notifyingListeners to be able to work on scope during updates\n      // If this check is not here we\'ll produce endless recursion when something is done with the scope\n      // during the callback.\n      if (!this._notifyingListeners) {\n        this._notifyingListeners = true;\n\n        this._scopeListeners.forEach(function (callback) {\n          callback(_this2);\n        });\n\n        this._notifyingListeners = false;\n      }\n    }\n    /**\n     * Applies fingerprint from the scope to the event if there\'s one,\n     * uses message if there\'s one instead or get rid of empty fingerprint\n     */\n\n  }, {\n    key: "_applyFingerprint",\n    value: function _applyFingerprint(event) {\n      // Make sure it\'s an array first and we actually have something in place\n      event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n      if (this._fingerprint) {\n        event.fingerprint = event.fingerprint.concat(this._fingerprint);\n      } // If we have no data at all, remove empty array default\n\n\n      if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n      }\n    }\n  }], [{\n    key: "clone",\n    value: function clone(scope) {\n      var newScope = new Scope();\n\n      if (scope) {\n        newScope._breadcrumbs = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(scope._breadcrumbs);\n        newScope._tags = _objectSpread({}, scope._tags);\n        newScope._extra = _objectSpread({}, scope._extra);\n        newScope._contexts = _objectSpread({}, scope._contexts);\n        newScope._user = scope._user;\n        newScope._level = scope._level;\n        newScope._span = scope._span;\n        newScope._session = scope._session;\n        newScope._transactionName = scope._transactionName;\n        newScope._fingerprint = scope._fingerprint;\n        newScope._eventProcessors = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(scope._eventProcessors);\n        newScope._requestSession = scope._requestSession;\n        newScope._attachments = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(scope._attachments);\n      }\n\n      return newScope;\n    }\n  }]);\n\n  return Scope;\n}();\n/**\n * Returns the global event processors.\n */\n\n\nfunction getGlobalEventProcessors() {\n  return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .getGlobalSingleton */ .Y)(\'globalEventProcessors\', function () {\n    return [];\n  });\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7659\n')},6073:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CT\": function() { return /* binding */ updateSession; },\n/* harmony export */   \"Hv\": function() { return /* binding */ makeSession; },\n/* harmony export */   \"RJ\": function() { return /* binding */ closeSession; }\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5153);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2861);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2362);\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\n\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  var startingTime = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__/* .timestampInSeconds */ .ph)();\n  var session = {\n    sid: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__/* .uuid4 */ .DM)(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: function toJSON() {\n      return sessionToJSON(session);\n    }\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n\n\nfunction updateSession(session) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__/* .timestampInSeconds */ .ph)();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__/* .uuid4 */ .DM)();\n  }\n\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n\n  if (!session.did && context.did) {\n    session.did = \"\".concat(context.did);\n  }\n\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    var duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n\n  if (context.release) {\n    session.release = context.release;\n  }\n\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\n\n\nfunction closeSession(session, status) {\n  var context = {};\n\n  if (status) {\n    context = {\n      status: status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n\n  updateSession(session, context);\n}\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\n\n\nfunction sessionToJSON(session) {\n  return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__/* .dropUndefinedKeys */ .Jr)({\n    sid: \"\".concat(session.sid),\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? \"\".concat(session.did) : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6073\n")},2268:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"ro\": function() { return /* binding */ addExtensionMethods; },\n  \"lb\": function() { return /* binding */ startIdleTransaction; }\n});\n\n// UNUSED EXPORTS: _addTracingExtensions\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(2982);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(3);\n// EXTERNAL MODULE: ./node_modules/@sentry/hub/esm/hub.js\nvar hub = __webpack_require__(1875);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/logger.js\nvar logger = __webpack_require__(245);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/is.js\nvar is = __webpack_require__(2684);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/node.js + 1 modules\nvar node = __webpack_require__(9);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/instrument.js\nvar instrument = __webpack_require__(6710);\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/utils.js\nvar utils = __webpack_require__(2662);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/errors.js\n\n\n/**\n * Configures global error listeners\n */\n\nfunction registerErrorInstrumentation() {\n  (0,instrument/* addInstrumentationHandler */.o)('error', errorCallback);\n  (0,instrument/* addInstrumentationHandler */.o)('unhandledrejection', errorCallback);\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\n\nfunction errorCallback() {\n  var activeTransaction = (0,utils/* getActiveTransaction */.x1)();\n\n  if (activeTransaction) {\n    var status = 'internal_error';\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Transaction: \".concat(status, \" -> Global error occured\"));\n    activeTransaction.setStatus(status);\n  }\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/idletransaction.js\nvar idletransaction = __webpack_require__(1441);\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/transaction.js\nvar esm_transaction = __webpack_require__(5955);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/hubextensions.js\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n/** Returns all trace headers that are currently on the top scope. */\n\nfunction traceHeaders() {\n  var scope = this.getScope();\n\n  if (scope) {\n    var span = scope.getSpan();\n\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\n\n\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!(0,utils/* hasTracingEnabled */.zu)(options)) {\n    transaction.sampled = false;\n    return transaction;\n  } // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n\n\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'explicitly_set'\n      }\n    });\n    return transaction;\n  } // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n\n\n  var sampleRate;\n\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'inheritance'\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n\n\n  if (!isValidSampleRate(sampleRate)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  } // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n\n\n  if (!sampleRate) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Discarding transaction because \".concat(typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  } // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n\n\n  transaction.sampled = Math.random() < sampleRate; // if we're not going to keep it, we're done\n\n  if (!transaction.sampled) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \".concat(Number(sampleRate), \")\"));\n    return transaction;\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] starting \".concat(transaction.op, \" transaction - \").concat(transaction.name));\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\n\n\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  if ((0,is/* isNaN */.i2)(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \".concat(JSON.stringify(rate), \" of type \").concat(JSON.stringify(typeof rate), \".\"));\n    return false;\n  } // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n\n\n  if (rate < 0 || rate > 1) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \".concat(rate, \".\"));\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\n\n\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var client = this.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new esm_transaction/* Transaction */.Y(transactionContext, this);\n  transaction = sample(transaction, options, _objectSpread({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\n\n\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext) {\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new idletransaction/* IdleTransaction */.io(transactionContext, hub, idleTimeout, finalTimeout, onScope);\n  transaction = sample(transaction, options, _objectSpread({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * @private\n */\n\n\nfunction _addTracingExtensions() {\n  var carrier = (0,hub/* getMainCarrier */.cu)();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\n\n\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = (0,hub/* getMainCarrier */.cu)();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  var packageToIntegrationMapping = {\n    mongodb: function mongodb() {\n      var integration = (0,node/* dynamicRequire */.l$)(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function mongoose() {\n      var integration = (0,node/* dynamicRequire */.l$)(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function mysql() {\n      var integration = (0,node/* dynamicRequire */.l$)(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function pg() {\n      var integration = (0,node/* dynamicRequire */.l$)(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!(0,node/* loadModule */.$y)(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [].concat((0,toConsumableArray/* default */.Z)(carrier.__SENTRY__.integrations || []), (0,toConsumableArray/* default */.Z)(mappedPackages));\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\n\n\nfunction addExtensionMethods() {\n  _addTracingExtensions(); // Detect and automatically load specified integrations.\n\n\n  if ((0,node/* isNodeEnv */.KV)()) {\n    _autoloadDatabaseIntegrations();\n  } // If an error happens globally, we should make sure transaction status is set to error.\n\n\n  registerErrorInstrumentation();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2268\n")},1441:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "io": function() { return /* binding */ IdleTransaction; },\n/* harmony export */   "mg": function() { return /* binding */ DEFAULT_FINAL_TIMEOUT; },\n/* harmony export */   "nT": function() { return /* binding */ DEFAULT_IDLE_TIMEOUT; }\n/* harmony export */ });\n/* unused harmony exports HEARTBEAT_INTERVAL, IdleTransactionSpanRecorder */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(7326);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3144);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8052);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_inherits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(136);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2963);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1120);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5153);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(245);\n/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6369);\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5955);\n\n\n\n\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar DEFAULT_IDLE_TIMEOUT = 1000;\nvar DEFAULT_FINAL_TIMEOUT = 30000;\nvar HEARTBEAT_INTERVAL = 5000;\n/**\n * @inheritDoc\n */\n\nvar IdleTransactionSpanRecorder = /*#__PURE__*/function (_SpanRecorder) {\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_inherits_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(IdleTransactionSpanRecorder, _SpanRecorder);\n\n  var _super = _createSuper(IdleTransactionSpanRecorder);\n\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    var _this;\n\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this, IdleTransactionSpanRecorder);\n\n    _this = _super.call(this, maxlen);\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    ;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(IdleTransactionSpanRecorder, [{\n    key: "add",\n    value: function add(span) {\n      var _this2 = this;\n\n      // We should make sure we do not push and pop activities for\n      // the transaction that this span recorder belongs to.\n      if (span.spanId !== this.transactionSpanId) {\n        // We patch span.finish() to pop an activity after setting an endTimestamp.\n        span.finish = function (endTimestamp) {\n          span.endTimestamp = typeof endTimestamp === \'number\' ? endTimestamp : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .timestampWithMs */ ._I)();\n\n          _this2._popActivity(span.spanId);\n        }; // We should only push new activities if the span does not have an end timestamp.\n\n\n        if (span.endTimestamp === undefined) {\n          this._pushActivity(span.spanId);\n        }\n      }\n\n      (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(IdleTransactionSpanRecorder.prototype), "add", this).call(this, span);\n    }\n  }]);\n\n  return IdleTransactionSpanRecorder;\n}(_span_js__WEBPACK_IMPORTED_MODULE_7__/* .SpanRecorder */ .gB);\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\n\n\nvar IdleTransaction = /*#__PURE__*/function (_Transaction) {\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_inherits_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(IdleTransaction, _Transaction);\n\n  var _super2 = _createSuper(IdleTransaction);\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  function IdleTransaction(transactionContext, _idleHub) {\n    var _this3;\n\n    var _idleTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_IDLE_TIMEOUT;\n\n    var _finalTimeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_FINAL_TIMEOUT;\n\n    var _onScope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this, IdleTransaction);\n\n    _this3 = _super2.call(this, transactionContext, _idleHub);\n    _this3._idleHub = _idleHub;\n    _this3._idleTimeout = _idleTimeout;\n    _this3._finalTimeout = _finalTimeout;\n    _this3._onScope = _onScope;\n\n    IdleTransaction.prototype.__init.call((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_this3));\n\n    IdleTransaction.prototype.__init2.call((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_this3));\n\n    IdleTransaction.prototype.__init3.call((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_this3));\n\n    IdleTransaction.prototype.__init4.call((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_this3));\n\n    ;\n\n    if (_onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub); // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log("Setting idle transaction on scope. Span ID: ".concat(_this3.spanId));\n\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_this3));\n      });\n    }\n\n    _this3._startIdleTimeout();\n\n    setTimeout(function () {\n      if (!_this3._finished) {\n        _this3.setStatus(\'deadline_exceeded\');\n\n        _this3.finish();\n      }\n    }, _this3._finalTimeout);\n    return _this3;\n  }\n  /** {@inheritDoc} */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(IdleTransaction, [{\n    key: "__init",\n    value: // Activities store a list of active spans\n    function __init() {\n      this.activities = {};\n    } // Track state of activities in previous heartbeat\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n\n  }, {\n    key: "__init2",\n    value: function __init2() {\n      this._heartbeatCounter = 0;\n    } // We should not use heartbeat if we finished a transaction\n\n  }, {\n    key: "__init3",\n    value: function __init3() {\n      this._finished = false;\n    }\n  }, {\n    key: "__init4",\n    value: function __init4() {\n      this._beforeFinishCallbacks = [];\n    }\n  }, {\n    key: "finish",\n    value: function finish() {\n      var _this4 = this;\n\n      var endTimestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .timestampWithMs */ ._I)();\n      this._finished = true;\n      this.activities = {};\n\n      if (this.spanRecorder) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] finishing IdleTransaction\', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n        var _iterator = _createForOfIteratorHelper(this._beforeFinishCallbacks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var callback = _step.value;\n            callback(this, endTimestamp);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n          // If we are dealing with the transaction itself, we just return it\n          if (span.spanId === _this4.spanId) {\n            return true;\n          } // We cancel all pending spans with status "cancelled" to indicate the idle transaction was finished early\n\n\n          if (!span.endTimestamp) {\n            span.endTimestamp = endTimestamp;\n            span.setStatus(\'cancelled\');\n            (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] cancelling span since transaction ended early\', JSON.stringify(span, undefined, 2));\n          }\n\n          var keepSpan = span.startTimestamp < endTimestamp;\n\n          if (!keepSpan) {\n            (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] discarding Span since it happened after Transaction was finished\', JSON.stringify(span, undefined, 2));\n          }\n\n          return keepSpan;\n        });\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] flushing IdleTransaction\');\n      } else {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] No active IdleTransaction\');\n      } // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n\n\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      return (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(IdleTransaction.prototype), "finish", this).call(this, endTimestamp);\n    }\n    /**\n     * Register a callback function that gets excecuted before the transaction finishes.\n     * Useful for cleanup or if you want to add any additional spans based on current context.\n     *\n     * This is exposed because users have no other way of running something before an idle transaction\n     * finishes.\n     */\n\n  }, {\n    key: "registerBeforeFinishCallback",\n    value: function registerBeforeFinishCallback(callback) {\n      this._beforeFinishCallbacks.push(callback);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "initSpanRecorder",\n    value: function initSpanRecorder(maxlen) {\n      var _this5 = this;\n\n      if (!this.spanRecorder) {\n        var pushActivity = function pushActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n\n          _this5._pushActivity(id);\n        };\n\n        var popActivity = function popActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n\n          _this5._popActivity(id);\n        };\n\n        this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen); // Start heartbeat so that transactions do not run forever.\n\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'Starting heartbeat\');\n\n        this._pingHeartbeat();\n      }\n\n      this.spanRecorder.add(this);\n    }\n    /**\n     * Cancels the existing idletimeout, if there is one\n     */\n\n  }, {\n    key: "_cancelIdleTimeout",\n    value: function _cancelIdleTimeout() {\n      if (this._idleTimeoutID) {\n        clearTimeout(this._idleTimeoutID);\n        this._idleTimeoutID = undefined;\n      }\n    }\n    /**\n     * Creates an idletimeout\n     */\n\n  }, {\n    key: "_startIdleTimeout",\n    value: function _startIdleTimeout(endTimestamp) {\n      var _this6 = this;\n\n      this._cancelIdleTimeout();\n\n      this._idleTimeoutID = setTimeout(function () {\n        if (!_this6._finished && Object.keys(_this6.activities).length === 0) {\n          _this6.finish(endTimestamp);\n        }\n      }, this._idleTimeout);\n    }\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n\n  }, {\n    key: "_pushActivity",\n    value: function _pushActivity(spanId) {\n      this._cancelIdleTimeout();\n\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log("[Tracing] pushActivity: ".concat(spanId));\n      this.activities[spanId] = true;\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] new activities count\', Object.keys(this.activities).length);\n    }\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n\n  }, {\n    key: "_popActivity",\n    value: function _popActivity(spanId) {\n      if (this.activities[spanId]) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log("[Tracing] popActivity ".concat(spanId));\n        delete this.activities[spanId];\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] new activities count\', Object.keys(this.activities).length);\n      }\n\n      if (Object.keys(this.activities).length === 0) {\n        // We need to add the timeout here to have the real endtimestamp of the transaction\n        // Remember timestampWithMs is in seconds, timeout is in ms\n        var endTimestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .timestampWithMs */ ._I)() + this._idleTimeout / 1000;\n\n        this._startIdleTimeout(endTimestamp);\n      }\n    }\n    /**\n     * Checks when entries of this.activities are not changing for 3 beats.\n     * If this occurs we finish the transaction.\n     */\n\n  }, {\n    key: "_beat",\n    value: function _beat() {\n      // We should not be running heartbeat if the idle transaction is finished.\n      if (this._finished) {\n        return;\n      }\n\n      var heartbeatString = Object.keys(this.activities).join(\'\');\n\n      if (heartbeatString === this._prevHeartbeatString) {\n        this._heartbeatCounter += 1;\n      } else {\n        this._heartbeatCounter = 1;\n      }\n\n      this._prevHeartbeatString = heartbeatString;\n\n      if (this._heartbeatCounter >= 3) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log(\'[Tracing] Transaction finished because of no change for 3 heart beats\');\n        this.setStatus(\'deadline_exceeded\');\n        this.finish();\n      } else {\n        this._pingHeartbeat();\n      }\n    }\n    /**\n     * Pings the heartbeat\n     */\n\n  }, {\n    key: "_pingHeartbeat",\n    value: function _pingHeartbeat() {\n      var _this7 = this;\n\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_9__/* .logger.log */ .kg.log("pinging Heartbeat -> current counter: ".concat(this._heartbeatCounter));\n      setTimeout(function () {\n        _this7._beat();\n      }, HEARTBEAT_INTERVAL);\n    }\n  }]);\n\n  return IdleTransaction;\n}(_transaction_js__WEBPACK_IMPORTED_MODULE_10__/* .Transaction */ .Y);\n/**\n * Reset transaction on scope to `undefined`\n */\n\n\nfunction clearActiveTransaction(hub) {\n  var scope = hub.getScope();\n\n  if (scope) {\n    var transaction = scope.getTransaction();\n\n    if (transaction) {\n      scope.setSpan(undefined);\n    }\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1441\n')},6369:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Dr": function() { return /* binding */ Span; },\n/* harmony export */   "gB": function() { return /* binding */ SpanRecorder; }\n/* harmony export */ });\n/* unused harmony export spanStatusfromHttpCode */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3144);\n/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1508);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2861);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5153);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2362);\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nvar SpanRecorder = /*#__PURE__*/function () {\n  function SpanRecorder() {\n    var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, SpanRecorder);\n\n    ;\n\n    SpanRecorder.prototype.__init.call(this);\n\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don\'t run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(SpanRecorder, [{\n    key: "__init",\n    value: function __init() {\n      this.spans = [];\n    }\n  }, {\n    key: "add",\n    value: function add(span) {\n      if (this.spans.length > this._maxlen) {\n        span.spanRecorder = undefined;\n      } else {\n        this.spans.push(span);\n      }\n    }\n  }]);\n\n  return SpanRecorder;\n}();\n/**\n * Span contains all data about a span\n */\n\n\nvar Span = /*#__PURE__*/function () {\n  /**\n   * List of spans that were finalized\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, Span);\n\n    ;\n\n    Span.prototype.__init2.call(this);\n\n    Span.prototype.__init3.call(this);\n\n    Span.prototype.__init4.call(this);\n\n    Span.prototype.__init5.call(this);\n\n    Span.prototype.__init6.call(this);\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if (\'sampled\' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Span, [{\n    key: "__init2",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init2() {\n      this.traceId = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__/* .uuid4 */ .DM)();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "__init3",\n    value: function __init3() {\n      this.spanId = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__/* .uuid4 */ .DM)().substring(16);\n    }\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Internal keeper of the status\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n\n  }, {\n    key: "__init4",\n    value: function __init4() {\n      this.startTimestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .timestampWithMs */ ._I)();\n    }\n    /**\n     * Timestamp in seconds when the span ended.\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "__init5",\n    value: function __init5() {\n      this.tags = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "__init6",\n    value: function __init6() {\n      this.data = {};\n    }\n  }, {\n    key: "startChild",\n    value: function startChild(spanContext) {\n      var childSpan = new Span(_objectSpread(_objectSpread({}, spanContext), {}, {\n        parentSpanId: this.spanId,\n        sampled: this.sampled,\n        traceId: this.traceId\n      }));\n      childSpan.spanRecorder = this.spanRecorder;\n\n      if (childSpan.spanRecorder) {\n        childSpan.spanRecorder.add(childSpan);\n      }\n\n      childSpan.transaction = this.transaction;\n      return childSpan;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setTag",\n    value: function setTag(key, value) {\n      this.tags = _objectSpread(_objectSpread({}, this.tags), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({}, key, value));\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setData",\n    value: function setData(key, value) {\n      this.data = _objectSpread(_objectSpread({}, this.data), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({}, key, value));\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setStatus",\n    value: function setStatus(value) {\n      this.status = value;\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setHttpStatus",\n    value: function setHttpStatus(httpStatus) {\n      this.setTag(\'http.status_code\', String(httpStatus));\n      var spanStatus = spanStatusfromHttpCode(httpStatus);\n\n      if (spanStatus !== \'unknown_error\') {\n        this.setStatus(spanStatus);\n      }\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "isSuccess",\n    value: function isSuccess() {\n      return this.status === \'ok\';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "finish",\n    value: function finish(endTimestamp) {\n      this.endTimestamp = typeof endTimestamp === \'number\' ? endTimestamp : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__/* .timestampWithMs */ ._I)();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "toTraceparent",\n    value: function toTraceparent() {\n      var sampledString = \'\';\n\n      if (this.sampled !== undefined) {\n        sampledString = this.sampled ? \'-1\' : \'-0\';\n      }\n\n      return "".concat(this.traceId, "-").concat(this.spanId).concat(sampledString);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "toContext",\n    value: function toContext() {\n      return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .dropUndefinedKeys */ .Jr)({\n        data: this.data,\n        description: this.description,\n        endTimestamp: this.endTimestamp,\n        op: this.op,\n        parentSpanId: this.parentSpanId,\n        sampled: this.sampled,\n        spanId: this.spanId,\n        startTimestamp: this.startTimestamp,\n        status: this.status,\n        tags: this.tags,\n        traceId: this.traceId\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "updateWithContext",\n    value: function updateWithContext(spanContext) {\n      var _this = this;\n\n      this.data = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__/* ._nullishCoalesce */ .h)(spanContext.data, function () {\n        return {};\n      });\n      this.description = spanContext.description;\n      this.endTimestamp = spanContext.endTimestamp;\n      this.op = spanContext.op;\n      this.parentSpanId = spanContext.parentSpanId;\n      this.sampled = spanContext.sampled;\n      this.spanId = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__/* ._nullishCoalesce */ .h)(spanContext.spanId, function () {\n        return _this.spanId;\n      });\n      this.startTimestamp = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__/* ._nullishCoalesce */ .h)(spanContext.startTimestamp, function () {\n        return _this.startTimestamp;\n      });\n      this.status = spanContext.status;\n      this.tags = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__/* ._nullishCoalesce */ .h)(spanContext.tags, function () {\n        return {};\n      });\n      this.traceId = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_6__/* ._nullishCoalesce */ .h)(spanContext.traceId, function () {\n        return _this.traceId;\n      });\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "getTraceContext",\n    value: function getTraceContext() {\n      return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .dropUndefinedKeys */ .Jr)({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        trace_id: this.traceId\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "toJSON",\n    value: function toJSON() {\n      return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__/* .dropUndefinedKeys */ .Jr)({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        start_timestamp: this.startTimestamp,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        timestamp: this.endTimestamp,\n        trace_id: this.traceId\n      });\n    }\n  }]);\n\n  return Span;\n}();\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n\n\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return \'ok\';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return \'unauthenticated\';\n\n      case 403:\n        return \'permission_denied\';\n\n      case 404:\n        return \'not_found\';\n\n      case 409:\n        return \'already_exists\';\n\n      case 413:\n        return \'failed_precondition\';\n\n      case 429:\n        return \'resource_exhausted\';\n\n      default:\n        return \'invalid_argument\';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return \'unimplemented\';\n\n      case 503:\n        return \'unavailable\';\n\n      case 504:\n        return \'deadline_exceeded\';\n\n      default:\n        return \'internal_error\';\n    }\n  }\n\n  return \'unknown_error\';\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6369\n')},5955:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Y": function() { return /* binding */ Transaction; }\n/* harmony export */ });\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3144);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7326);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8052);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_inherits_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(136);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2963);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1120);\n/* harmony import */ var core_js_modules_es_string_trim_end_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7690);\n/* harmony import */ var core_js_modules_es_string_trim_end_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_end_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(1508);\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1875);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(245);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(2362);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9800);\n/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(6369);\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n/** JSDoc */\n\nvar Transaction = /*#__PURE__*/function (_Span) {\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_inherits_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(Transaction, _Span);\n\n  var _super = _createSuper(Transaction);\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Transaction(transactionContext, hub) {\n    var _this;\n\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this, Transaction);\n\n    _this = _super.call(this, transactionContext);\n\n    Transaction.prototype.__init.call((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(_this));\n\n    ;\n    _this._hub = hub || (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_7__/* .getCurrentHub */ .Gd)();\n    _this._name = transactionContext.name || \'\';\n    _this.metadata = transactionContext.metadata || {};\n    _this._trimEnd = transactionContext.trimEnd; // this is because transactions are also spans, and spans have a transaction pointer\n\n    _this.transaction = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(_this);\n    return _this;\n  }\n  /** Getter for `name` property */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(Transaction, [{\n    key: "__init",\n    value:\n    /**\n     * The reference to the current hub.\n     */\n    function __init() {\n      this._measurements = {};\n    }\n  }, {\n    key: "name",\n    get: function get() {\n      return this._name;\n    }\n    /** Setter for `name` property, which also sets `source` */\n    ,\n    set: function set(newName) {\n      this._name = newName;\n      this.metadata.source = \'custom\';\n    }\n    /**\n     * JSDoc\n     */\n\n  }, {\n    key: "setName",\n    value: function setName(name) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'custom\';\n      this.name = name;\n      this.metadata.source = source;\n    }\n    /**\n     * Attaches SpanRecorder to the span itself\n     * @param maxlen maximum number of spans that can be recorded\n     */\n\n  }, {\n    key: "initSpanRecorder",\n    value: function initSpanRecorder() {\n      var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n\n      if (!this.spanRecorder) {\n        this.spanRecorder = new _span_js__WEBPACK_IMPORTED_MODULE_9__/* .SpanRecorder */ .gB(maxlen);\n      }\n\n      this.spanRecorder.add(this);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setMeasurement",\n    value: function setMeasurement(name, value) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'\';\n      this._measurements[name] = {\n        value: value,\n        unit: unit\n      };\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "setMetadata",\n    value: function setMetadata(newMetadata) {\n      this.metadata = _objectSpread(_objectSpread({}, this.metadata), newMetadata);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "finish",\n    value: function finish(endTimestamp) {\n      var _this2 = this;\n\n      // This transaction is already finished, so we should not flush it again.\n      if (this.endTimestamp !== undefined) {\n        return undefined;\n      }\n\n      if (!this.name) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_10__/* .logger.warn */ .kg.warn(\'Transaction has no name, falling back to `<unlabeled transaction>`.\');\n        this.name = \'<unlabeled transaction>\';\n      } // just sets the end timestamp\n\n\n      (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Transaction.prototype), "finish", this).call(this, endTimestamp);\n\n      if (this.sampled !== true) {\n        // At this point if `sampled !== true` we want to discard the transaction.\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_10__/* .logger.log */ .kg.log(\'[Tracing] Discarding transaction because its trace was not chosen to be sampled.\');\n\n        var client = this._hub.getClient();\n\n        if (client) {\n          client.recordDroppedEvent(\'sample_rate\', \'transaction\');\n        }\n\n        return undefined;\n      }\n\n      var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n        return s !== _this2 && s.endTimestamp;\n      }) : [];\n\n      if (this._trimEnd && finishedSpans.length > 0) {\n        this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n          if (prev.endTimestamp && current.endTimestamp) {\n            return prev.endTimestamp > current.endTimestamp ? prev : current;\n          }\n\n          return prev;\n        }).endTimestamp;\n      }\n\n      var metadata = this.metadata;\n\n      var transaction = _objectSpread({\n        contexts: {\n          trace: this.getTraceContext()\n        },\n        spans: finishedSpans,\n        start_timestamp: this.startTimestamp,\n        tags: this.tags,\n        timestamp: this.endTimestamp,\n        transaction: this.name,\n        type: \'transaction\',\n        sdkProcessingMetadata: _objectSpread(_objectSpread({}, metadata), {}, {\n          baggage: this.getBaggage()\n        })\n      }, metadata.source && {\n        transaction_info: {\n          source: metadata.source\n        }\n      });\n\n      var hasMeasurements = Object.keys(this._measurements).length > 0;\n\n      if (hasMeasurements) {\n        (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_10__/* .logger.log */ .kg.log(\'[Measurements] Adding measurements to transaction\', JSON.stringify(this._measurements, undefined, 2));\n        transaction.measurements = this._measurements;\n      }\n\n      (typeof __SENTRY_DEBUG__ === \'undefined\' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_10__/* .logger.log */ .kg.log("[Tracing] Finishing ".concat(this.op, " transaction: ").concat(this.name, "."));\n      return this._hub.captureEvent(transaction);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "toContext",\n    value: function toContext() {\n      var spanContext = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Transaction.prototype), "toContext", this).call(this);\n\n      return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_12__/* .dropUndefinedKeys */ .Jr)(_objectSpread(_objectSpread({}, spanContext), {}, {\n        name: this.name,\n        trimEnd: this._trimEnd\n      }));\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: "updateWithContext",\n    value: function updateWithContext(transactionContext) {\n      (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_get_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)((0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Transaction.prototype), "updateWithContext", this).call(this, transactionContext);\n\n      this.name = (0,_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_13__/* ._nullishCoalesce */ .h)(transactionContext.name, function () {\n        return \'\';\n      });\n      this._trimEnd = transactionContext.trimEnd;\n      return this;\n    }\n    /**\n     * @inheritdoc\n     *\n     * @experimental\n     */\n\n  }, {\n    key: "getBaggage",\n    value: function getBaggage() {\n      var existingBaggage = this.metadata.baggage; // Only add Sentry baggage items to baggage, if baggage does not exist yet or it is still\n      // empty and mutable\n\n      var finalBaggage = !existingBaggage || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_14__/* .isBaggageMutable */ .Gp)(existingBaggage) ? this._populateBaggageWithSentryValues(existingBaggage) : existingBaggage; // Update the baggage stored on the transaction.\n\n      this.metadata.baggage = finalBaggage;\n      return finalBaggage;\n    }\n    /**\n     * Collects and adds data to the passed baggage object.\n     *\n     * Note: This function does not explicitly check if the passed baggage object is allowed\n     * to be modified. Implicitly, `setBaggageValue` will not make modification to the object\n     * if it was already set immutable.\n     *\n     * After adding the data, the baggage object is set immutable to prevent further modifications.\n     *\n     * @param baggage\n     *\n     * @returns modified and immutable baggage object\n     */\n\n  }, {\n    key: "_populateBaggageWithSentryValues",\n    value: function _populateBaggageWithSentryValues() {\n      var baggage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_14__/* .createBaggage */ .Hn)({});\n      var hub = this._hub || (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_7__/* .getCurrentHub */ .Gd)();\n      var client = hub && hub.getClient();\n      if (!client) return baggage;\n\n      var _ref = client.getOptions() || {},\n          environment = _ref.environment,\n          release = _ref.release;\n\n      var _ref2 = client.getDsn() || {},\n          public_key = _ref2.publicKey;\n\n      var rate = this.metadata && this.metadata.transactionSampling && this.metadata.transactionSampling.rate;\n      var sample_rate = rate !== undefined ? rate.toLocaleString(\'fullwide\', {\n        useGrouping: false,\n        maximumFractionDigits: 16\n      }) : undefined;\n      var scope = hub.getScope();\n\n      var _ref3 = scope && scope.getUser() || {},\n          user_segment = _ref3.segment;\n\n      var source = this.metadata.source;\n      var transaction = source && source !== \'url\' ? this.name : undefined;\n      return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_14__/* .createBaggage */ .Hn)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_12__/* .dropUndefinedKeys */ .Jr)(_objectSpread({\n        environment: environment,\n        release: release,\n        transaction: transaction,\n        user_segment: user_segment,\n        public_key: public_key,\n        trace_id: this.traceId,\n        sample_rate: sample_rate\n      }, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_14__/* .getSentryBaggageItems */ .Hk)(baggage))), \'\', false // set baggage immutable\n      );\n    }\n  }]);\n\n  return Transaction;\n}(_span_js__WEBPACK_IMPORTED_MODULE_9__/* .Span */ .Dr);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk1NS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlJO0FBQ0E7QUFDTjtBQUNvQjtBQUNwQztBQUNVO0FBQ2tDO0FBQ3RCOztBQUV6SSwyQ0FBMkMsZ0NBQWdDLG9DQUFvQyxvREFBb0QsNkRBQTZELGlFQUFpRSxzQ0FBc0M7O0FBRXZVLGlDQUFpQyxnQkFBZ0Isc0JBQXNCLE9BQU8sdURBQXVELDZEQUE2RCw4SkFBZSw2QkFBNkIsb0tBQW9LLG1GQUFtRixLQUFLOztBQUUzYjs7QUFFL0MsaUNBQWlDLDZEQUE2RCx5Q0FBeUMsWUFBWSw4SkFBZSxtQkFBbUIsaUNBQWlDLGdCQUFnQiw4SkFBZSxvQkFBb0IsMkRBQTJELE9BQU8seUNBQXlDLE9BQU8seUtBQTBCOztBQUVyWix1Q0FBdUMsd0VBQXdFLDBDQUEwQyw4Q0FBOEMsTUFBTSw0RUFBNEUsSUFBSSxlQUFlLFlBQVk7O0FBRXBQO0FBQ3hCO0FBQ3NFO0FBQ25FO0FBQy9DOztBQUVBO0FBQ0EsRUFBRSx3SkFBUzs7QUFFWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSw4SkFBZTs7QUFFbkI7O0FBRUEsc0NBQXNDLHFLQUFzQjs7QUFFNUQ7QUFDQSx3QkFBd0Isb0VBQWE7QUFDckM7QUFDQTtBQUNBLGlEQUFpRDs7QUFFakQsd0JBQXdCLHFLQUFzQjtBQUM5QztBQUNBO0FBQ0E7OztBQUdBLEVBQUUsMkpBQVk7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLDREQUFZO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlFQUF5RSxzRUFBVztBQUNwRjtBQUNBLFFBQVE7OztBQUdSLE1BQU0sb0pBQUksQ0FBQyw4SkFBZTs7QUFFMUI7QUFDQTtBQUNBLHlFQUF5RSxvRUFBVTs7QUFFbkY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGVBQWU7QUFDNUU7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7O0FBRUE7QUFDQSx5RUFBeUUsb0VBQVU7QUFDbkY7QUFDQTs7QUFFQSx1RUFBdUUsb0VBQVU7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHdCQUF3QixvSkFBSSxDQUFDLDhKQUFlOztBQUU1QyxhQUFhLDJFQUFpQiwrQkFBK0Isa0JBQWtCO0FBQy9FO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSxNQUFNLG9KQUFJLENBQUMsOEpBQWU7O0FBRTFCLGtCQUFrQiw0RkFBZ0I7QUFDbEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDs7QUFFQSw2Q0FBNkMsMEVBQWdCLDhGQUE4Rjs7QUFFM0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSx3RkFBd0YsdUVBQWEsR0FBRztBQUN4Ryw2QkFBNkIsb0VBQWE7QUFDMUM7QUFDQTs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTs7QUFFQSx1Q0FBdUM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQSxhQUFhLHVFQUFhLENBQUMsMkVBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxFQUFFLCtFQUFxQjtBQUM5QjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsQ0FBQyxvREFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vdHJhbnNhY3Rpb24uanM/MzA0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiL1VzZXJzL2Vub3N0L0RvY3VtZW50cy9HaXRIdWIvajQwLWNlanN0LTIvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmltcG9ydCBfZ2V0IGZyb20gXCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldC5qc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiL1VzZXJzL2Vub3N0L0RvY3VtZW50cy9HaXRIdWIvajQwLWNlanN0LTIvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanNcIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIi9Vc2Vycy9lbm9zdC9Eb2N1bWVudHMvR2l0SHViL2o0MC1jZWpzdC0yL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YuanNcIjtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZC5qc1wiO1xuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuaW1wb3J0IHsgX251bGxpc2hDb2FsZXNjZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzJztcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBsb2dnZXIsIGRyb3BVbmRlZmluZWRLZXlzLCBpc0JhZ2dhZ2VNdXRhYmxlLCBjcmVhdGVCYWdnYWdlLCBnZXRTZW50cnlCYWdnYWdlSXRlbXMgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IFNwYW4sIFNwYW5SZWNvcmRlciB9IGZyb20gJy4vc3Bhbi5qcyc7XG4vKiogSlNEb2MgKi9cblxudmFyIFRyYW5zYWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Bhbikge1xuICBfaW5oZXJpdHMoVHJhbnNhY3Rpb24sIF9TcGFuKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRyYW5zYWN0aW9uKTtcblxuICAvKipcbiAgICogVGhpcyBjb25zdHJ1Y3RvciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkIG1hbnVhbGx5LiBUaG9zZSBpbnN0cnVtZW50aW5nIHRyYWNpbmcgc2hvdWxkIHVzZVxuICAgKiBgU2VudHJ5LnN0YXJ0VHJhbnNhY3Rpb24oKWAsIGFuZCBpbnRlcm5hbCBtZXRob2RzIHNob3VsZCB1c2UgYGh1Yi5zdGFydFRyYW5zYWN0aW9uKClgLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBmdW5jdGlvbiBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkNvbnRleHQsIGh1Yikge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2FjdGlvbik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHRyYW5zYWN0aW9uQ29udGV4dCk7XG5cbiAgICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuX19pbml0LmNhbGwoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuXG4gICAgO1xuICAgIF90aGlzLl9odWIgPSBodWIgfHwgZ2V0Q3VycmVudEh1YigpO1xuICAgIF90aGlzLl9uYW1lID0gdHJhbnNhY3Rpb25Db250ZXh0Lm5hbWUgfHwgJyc7XG4gICAgX3RoaXMubWV0YWRhdGEgPSB0cmFuc2FjdGlvbkNvbnRleHQubWV0YWRhdGEgfHwge307XG4gICAgX3RoaXMuX3RyaW1FbmQgPSB0cmFuc2FjdGlvbkNvbnRleHQudHJpbUVuZDsgLy8gdGhpcyBpcyBiZWNhdXNlIHRyYW5zYWN0aW9ucyBhcmUgYWxzbyBzcGFucywgYW5kIHNwYW5zIGhhdmUgYSB0cmFuc2FjdGlvbiBwb2ludGVyXG5cbiAgICBfdGhpcy50cmFuc2FjdGlvbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKiogR2V0dGVyIGZvciBgbmFtZWAgcHJvcGVydHkgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhUcmFuc2FjdGlvbiwgW3tcbiAgICBrZXk6IFwiX19pbml0XCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXG4gICAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBodWIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gX19pbml0KCkge1xuICAgICAgdGhpcy5fbWVhc3VyZW1lbnRzID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICAvKiogU2V0dGVyIGZvciBgbmFtZWAgcHJvcGVydHksIHdoaWNoIGFsc28gc2V0cyBgc291cmNlYCAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdOYW1lKSB7XG4gICAgICB0aGlzLl9uYW1lID0gbmV3TmFtZTtcbiAgICAgIHRoaXMubWV0YWRhdGEuc291cmNlID0gJ2N1c3RvbSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEpTRG9jXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXROYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE5hbWUobmFtZSkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2N1c3RvbSc7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5tZXRhZGF0YS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIFNwYW5SZWNvcmRlciB0byB0aGUgc3BhbiBpdHNlbGZcbiAgICAgKiBAcGFyYW0gbWF4bGVuIG1heGltdW0gbnVtYmVyIG9mIHNwYW5zIHRoYXQgY2FuIGJlIHJlY29yZGVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbml0U3BhblJlY29yZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRTcGFuUmVjb3JkZXIoKSB7XG4gICAgICB2YXIgbWF4bGVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDAwO1xuXG4gICAgICBpZiAoIXRoaXMuc3BhblJlY29yZGVyKSB7XG4gICAgICAgIHRoaXMuc3BhblJlY29yZGVyID0gbmV3IFNwYW5SZWNvcmRlcihtYXhsZW4pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNwYW5SZWNvcmRlci5hZGQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRNZWFzdXJlbWVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNZWFzdXJlbWVudChuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIHVuaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICAgICAgdGhpcy5fbWVhc3VyZW1lbnRzW25hbWVdID0ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHVuaXQ6IHVuaXRcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRNZXRhZGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNZXRhZGF0YShuZXdNZXRhZGF0YSkge1xuICAgICAgdGhpcy5tZXRhZGF0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5tZXRhZGF0YSksIG5ld01ldGFkYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZpbmlzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5pc2goZW5kVGltZXN0YW1wKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBhbHJlYWR5IGZpbmlzaGVkLCBzbyB3ZSBzaG91bGQgbm90IGZsdXNoIGl0IGFnYWluLlxuICAgICAgaWYgKHRoaXMuZW5kVGltZXN0YW1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgICAgKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKSAmJiBsb2dnZXIud2FybignVHJhbnNhY3Rpb24gaGFzIG5vIG5hbWUsIGZhbGxpbmcgYmFjayB0byBgPHVubGFiZWxlZCB0cmFuc2FjdGlvbj5gLicpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnPHVubGFiZWxlZCB0cmFuc2FjdGlvbj4nO1xuICAgICAgfSAvLyBqdXN0IHNldHMgdGhlIGVuZCB0aW1lc3RhbXBcblxuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihUcmFuc2FjdGlvbi5wcm90b3R5cGUpLCBcImZpbmlzaFwiLCB0aGlzKS5jYWxsKHRoaXMsIGVuZFRpbWVzdGFtcCk7XG5cbiAgICAgIGlmICh0aGlzLnNhbXBsZWQgIT09IHRydWUpIHtcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCBpZiBgc2FtcGxlZCAhPT0gdHJ1ZWAgd2Ugd2FudCB0byBkaXNjYXJkIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKSAmJiBsb2dnZXIubG9nKCdbVHJhY2luZ10gRGlzY2FyZGluZyB0cmFuc2FjdGlvbiBiZWNhdXNlIGl0cyB0cmFjZSB3YXMgbm90IGNob3NlbiB0byBiZSBzYW1wbGVkLicpO1xuXG4gICAgICAgIHZhciBjbGllbnQgPSB0aGlzLl9odWIuZ2V0Q2xpZW50KCk7XG5cbiAgICAgICAgaWYgKGNsaWVudCkge1xuICAgICAgICAgIGNsaWVudC5yZWNvcmREcm9wcGVkRXZlbnQoJ3NhbXBsZV9yYXRlJywgJ3RyYW5zYWN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluaXNoZWRTcGFucyA9IHRoaXMuc3BhblJlY29yZGVyID8gdGhpcy5zcGFuUmVjb3JkZXIuc3BhbnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzICE9PSBfdGhpczIgJiYgcy5lbmRUaW1lc3RhbXA7XG4gICAgICB9KSA6IFtdO1xuXG4gICAgICBpZiAodGhpcy5fdHJpbUVuZCAmJiBmaW5pc2hlZFNwYW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSBmaW5pc2hlZFNwYW5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICAgIGlmIChwcmV2LmVuZFRpbWVzdGFtcCAmJiBjdXJyZW50LmVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYuZW5kVGltZXN0YW1wID4gY3VycmVudC5lbmRUaW1lc3RhbXAgPyBwcmV2IDogY3VycmVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSkuZW5kVGltZXN0YW1wO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWV0YWRhdGEgPSB0aGlzLm1ldGFkYXRhO1xuXG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgICB0cmFjZTogdGhpcy5nZXRUcmFjZUNvbnRleHQoKVxuICAgICAgICB9LFxuICAgICAgICBzcGFuczogZmluaXNoZWRTcGFucyxcbiAgICAgICAgc3RhcnRfdGltZXN0YW1wOiB0aGlzLnN0YXJ0VGltZXN0YW1wLFxuICAgICAgICB0YWdzOiB0aGlzLnRhZ3MsXG4gICAgICAgIHRpbWVzdGFtcDogdGhpcy5lbmRUaW1lc3RhbXAsXG4gICAgICAgIHRyYW5zYWN0aW9uOiB0aGlzLm5hbWUsXG4gICAgICAgIHR5cGU6ICd0cmFuc2FjdGlvbicsXG4gICAgICAgIHNka1Byb2Nlc3NpbmdNZXRhZGF0YTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtZXRhZGF0YSksIHt9LCB7XG4gICAgICAgICAgYmFnZ2FnZTogdGhpcy5nZXRCYWdnYWdlKClcbiAgICAgICAgfSlcbiAgICAgIH0sIG1ldGFkYXRhLnNvdXJjZSAmJiB7XG4gICAgICAgIHRyYW5zYWN0aW9uX2luZm86IHtcbiAgICAgICAgICBzb3VyY2U6IG1ldGFkYXRhLnNvdXJjZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIGhhc01lYXN1cmVtZW50cyA9IE9iamVjdC5rZXlzKHRoaXMuX21lYXN1cmVtZW50cykubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGhhc01lYXN1cmVtZW50cykge1xuICAgICAgICAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pICYmIGxvZ2dlci5sb2coJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBtZWFzdXJlbWVudHMgdG8gdHJhbnNhY3Rpb24nLCBKU09OLnN0cmluZ2lmeSh0aGlzLl9tZWFzdXJlbWVudHMsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICB0cmFuc2FjdGlvbi5tZWFzdXJlbWVudHMgPSB0aGlzLl9tZWFzdXJlbWVudHM7XG4gICAgICB9XG5cbiAgICAgICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXykgJiYgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBGaW5pc2hpbmcgXCIuY29uY2F0KHRoaXMub3AsIFwiIHRyYW5zYWN0aW9uOiBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuXCIpKTtcbiAgICAgIHJldHVybiB0aGlzLl9odWIuY2FwdHVyZUV2ZW50KHRyYW5zYWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NvbnRleHQoKSB7XG4gICAgICB2YXIgc3BhbkNvbnRleHQgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihUcmFuc2FjdGlvbi5wcm90b3R5cGUpLCBcInRvQ29udGV4dFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICByZXR1cm4gZHJvcFVuZGVmaW5lZEtleXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGFuQ29udGV4dCksIHt9LCB7XG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgdHJpbUVuZDogdGhpcy5fdHJpbUVuZFxuICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlV2l0aENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlV2l0aENvbnRleHQodHJhbnNhY3Rpb25Db250ZXh0KSB7XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihUcmFuc2FjdGlvbi5wcm90b3R5cGUpLCBcInVwZGF0ZVdpdGhDb250ZXh0XCIsIHRoaXMpLmNhbGwodGhpcywgdHJhbnNhY3Rpb25Db250ZXh0KTtcblxuICAgICAgdGhpcy5uYW1lID0gX251bGxpc2hDb2FsZXNjZSh0cmFuc2FjdGlvbkNvbnRleHQubmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3RyaW1FbmQgPSB0cmFuc2FjdGlvbkNvbnRleHQudHJpbUVuZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqXG4gICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QmFnZ2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCYWdnYWdlKCkge1xuICAgICAgdmFyIGV4aXN0aW5nQmFnZ2FnZSA9IHRoaXMubWV0YWRhdGEuYmFnZ2FnZTsgLy8gT25seSBhZGQgU2VudHJ5IGJhZ2dhZ2UgaXRlbXMgdG8gYmFnZ2FnZSwgaWYgYmFnZ2FnZSBkb2VzIG5vdCBleGlzdCB5ZXQgb3IgaXQgaXMgc3RpbGxcbiAgICAgIC8vIGVtcHR5IGFuZCBtdXRhYmxlXG5cbiAgICAgIHZhciBmaW5hbEJhZ2dhZ2UgPSAhZXhpc3RpbmdCYWdnYWdlIHx8IGlzQmFnZ2FnZU11dGFibGUoZXhpc3RpbmdCYWdnYWdlKSA/IHRoaXMuX3BvcHVsYXRlQmFnZ2FnZVdpdGhTZW50cnlWYWx1ZXMoZXhpc3RpbmdCYWdnYWdlKSA6IGV4aXN0aW5nQmFnZ2FnZTsgLy8gVXBkYXRlIHRoZSBiYWdnYWdlIHN0b3JlZCBvbiB0aGUgdHJhbnNhY3Rpb24uXG5cbiAgICAgIHRoaXMubWV0YWRhdGEuYmFnZ2FnZSA9IGZpbmFsQmFnZ2FnZTtcbiAgICAgIHJldHVybiBmaW5hbEJhZ2dhZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbGxlY3RzIGFuZCBhZGRzIGRhdGEgdG8gdGhlIHBhc3NlZCBiYWdnYWdlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgZXhwbGljaXRseSBjaGVjayBpZiB0aGUgcGFzc2VkIGJhZ2dhZ2Ugb2JqZWN0IGlzIGFsbG93ZWRcbiAgICAgKiB0byBiZSBtb2RpZmllZC4gSW1wbGljaXRseSwgYHNldEJhZ2dhZ2VWYWx1ZWAgd2lsbCBub3QgbWFrZSBtb2RpZmljYXRpb24gdG8gdGhlIG9iamVjdFxuICAgICAqIGlmIGl0IHdhcyBhbHJlYWR5IHNldCBpbW11dGFibGUuXG4gICAgICpcbiAgICAgKiBBZnRlciBhZGRpbmcgdGhlIGRhdGEsIHRoZSBiYWdnYWdlIG9iamVjdCBpcyBzZXQgaW1tdXRhYmxlIHRvIHByZXZlbnQgZnVydGhlciBtb2RpZmljYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhZ2dhZ2VcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIG1vZGlmaWVkIGFuZCBpbW11dGFibGUgYmFnZ2FnZSBvYmplY3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9wb3B1bGF0ZUJhZ2dhZ2VXaXRoU2VudHJ5VmFsdWVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wb3B1bGF0ZUJhZ2dhZ2VXaXRoU2VudHJ5VmFsdWVzKCkge1xuICAgICAgdmFyIGJhZ2dhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGNyZWF0ZUJhZ2dhZ2Uoe30pO1xuICAgICAgdmFyIGh1YiA9IHRoaXMuX2h1YiB8fCBnZXRDdXJyZW50SHViKCk7XG4gICAgICB2YXIgY2xpZW50ID0gaHViICYmIGh1Yi5nZXRDbGllbnQoKTtcbiAgICAgIGlmICghY2xpZW50KSByZXR1cm4gYmFnZ2FnZTtcblxuICAgICAgdmFyIF9yZWYgPSBjbGllbnQuZ2V0T3B0aW9ucygpIHx8IHt9LFxuICAgICAgICAgIGVudmlyb25tZW50ID0gX3JlZi5lbnZpcm9ubWVudCxcbiAgICAgICAgICByZWxlYXNlID0gX3JlZi5yZWxlYXNlO1xuXG4gICAgICB2YXIgX3JlZjIgPSBjbGllbnQuZ2V0RHNuKCkgfHwge30sXG4gICAgICAgICAgcHVibGljX2tleSA9IF9yZWYyLnB1YmxpY0tleTtcblxuICAgICAgdmFyIHJhdGUgPSB0aGlzLm1ldGFkYXRhICYmIHRoaXMubWV0YWRhdGEudHJhbnNhY3Rpb25TYW1wbGluZyAmJiB0aGlzLm1ldGFkYXRhLnRyYW5zYWN0aW9uU2FtcGxpbmcucmF0ZTtcbiAgICAgIHZhciBzYW1wbGVfcmF0ZSA9IHJhdGUgIT09IHVuZGVmaW5lZCA/IHJhdGUudG9Mb2NhbGVTdHJpbmcoJ2Z1bGx3aWRlJywge1xuICAgICAgICB1c2VHcm91cGluZzogZmFsc2UsXG4gICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMTZcbiAgICAgIH0pIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHNjb3BlID0gaHViLmdldFNjb3BlKCk7XG5cbiAgICAgIHZhciBfcmVmMyA9IHNjb3BlICYmIHNjb3BlLmdldFVzZXIoKSB8fCB7fSxcbiAgICAgICAgICB1c2VyX3NlZ21lbnQgPSBfcmVmMy5zZWdtZW50O1xuXG4gICAgICB2YXIgc291cmNlID0gdGhpcy5tZXRhZGF0YS5zb3VyY2U7XG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBzb3VyY2UgJiYgc291cmNlICE9PSAndXJsJyA/IHRoaXMubmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBjcmVhdGVCYWdnYWdlKGRyb3BVbmRlZmluZWRLZXlzKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICAgIHJlbGVhc2U6IHJlbGVhc2UsXG4gICAgICAgIHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbixcbiAgICAgICAgdXNlcl9zZWdtZW50OiB1c2VyX3NlZ21lbnQsXG4gICAgICAgIHB1YmxpY19rZXk6IHB1YmxpY19rZXksXG4gICAgICAgIHRyYWNlX2lkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgIHNhbXBsZV9yYXRlOiBzYW1wbGVfcmF0ZVxuICAgICAgfSwgZ2V0U2VudHJ5QmFnZ2FnZUl0ZW1zKGJhZ2dhZ2UpKSksICcnLCBmYWxzZSAvLyBzZXQgYmFnZ2FnZSBpbW11dGFibGVcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zYWN0aW9uO1xufShTcGFuKTtcblxuZXhwb3J0IHsgVHJhbnNhY3Rpb24gfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5955\n')},2662:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "XL": function() { return /* binding */ msToSec; },\n/* harmony export */   "x1": function() { return /* binding */ getActiveTransaction; },\n/* harmony export */   "zu": function() { return /* binding */ hasTracingEnabled; }\n/* harmony export */ });\n/* unused harmony export secToMs */\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1875);\n\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\n\nfunction hasTracingEnabled(maybeOptions) {\n  var client = (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentHub */ .Gd)().getClient();\n  var options = maybeOptions || client && client.getOptions();\n  return !!options && (\'tracesSampleRate\' in options || \'tracesSampler\' in options);\n}\n/** Grabs active transaction off scope, if any */\n\n\nfunction getActiveTransaction(maybeHub) {\n  var hub = maybeHub || (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentHub */ .Gd)();\n  var scope = hub.getScope();\n  return scope && scope.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\n\n\nfunction msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\n\n\nfunction secToMs(time) {\n  return time * 1000;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ3lEO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9FQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLHdCQUF3QixvRUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vdXRpbHMuanM/MzI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuZXhwb3J0IHsgVFJBQ0VQQVJFTlRfUkVHRVhQLCBleHRyYWN0VHJhY2VwYXJlbnREYXRhLCBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0cmFjaW5nIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICpcbiAqIFRyYWNpbmcgaXMgZW5hYmxlZCB3aGVuIGF0IGxlYXN0IG9uZSBvZiBgdHJhY2VzU2FtcGxlUmF0ZWAgYW5kIGB0cmFjZXNTYW1wbGVyYCBpcyBkZWZpbmVkIGluIHRoZSBTREsgY29uZmlnLlxuICovXG5cbmZ1bmN0aW9uIGhhc1RyYWNpbmdFbmFibGVkKG1heWJlT3B0aW9ucykge1xuICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICB2YXIgb3B0aW9ucyA9IG1heWJlT3B0aW9ucyB8fCBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKTtcbiAgcmV0dXJuICEhb3B0aW9ucyAmJiAoJ3RyYWNlc1NhbXBsZVJhdGUnIGluIG9wdGlvbnMgfHwgJ3RyYWNlc1NhbXBsZXInIGluIG9wdGlvbnMpO1xufVxuLyoqIEdyYWJzIGFjdGl2ZSB0cmFuc2FjdGlvbiBvZmYgc2NvcGUsIGlmIGFueSAqL1xuXG5cbmZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zYWN0aW9uKG1heWJlSHViKSB7XG4gIHZhciBodWIgPSBtYXliZUh1YiB8fCBnZXRDdXJyZW50SHViKCk7XG4gIHZhciBzY29wZSA9IGh1Yi5nZXRTY29wZSgpO1xuICByZXR1cm4gc2NvcGUgJiYgc2NvcGUuZ2V0VHJhbnNhY3Rpb24oKTtcbn1cbi8qKlxuICogQ29udmVydHMgZnJvbSBtaWxsaXNlY29uZHMgdG8gc2Vjb25kc1xuICogQHBhcmFtIHRpbWUgdGltZSBpbiBtc1xuICovXG5cblxuZnVuY3Rpb24gbXNUb1NlYyh0aW1lKSB7XG4gIHJldHVybiB0aW1lIC8gMTAwMDtcbn1cbi8qKlxuICogQ29udmVydHMgZnJvbSBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIHRpbWUgdGltZSBpbiBzZWNvbmRzXG4gKi9cblxuXG5mdW5jdGlvbiBzZWNUb01zKHRpbWUpIHtcbiAgcmV0dXJuIHRpbWUgKiAxMDAwO1xufVxuXG5leHBvcnQgeyBnZXRBY3RpdmVUcmFuc2FjdGlvbiwgaGFzVHJhY2luZ0VuYWJsZWQsIG1zVG9TZWMsIHNlY1RvTXMgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2662\n')},9800:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gp\": function() { return /* binding */ isBaggageMutable; },\n/* harmony export */   \"Hk\": function() { return /* binding */ getSentryBaggageItems; },\n/* harmony export */   \"Hn\": function() { return /* binding */ createBaggage; },\n/* harmony export */   \"J8\": function() { return /* binding */ mergeAndSerializeBaggage; },\n/* harmony export */   \"bU\": function() { return /* binding */ BAGGAGE_HEADER_NAME; },\n/* harmony export */   \"rg\": function() { return /* binding */ parseBaggageSetMutability; }\n/* harmony export */ });\n/* unused harmony exports MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, getBaggageValue, getThirdPartyBaggage, isSentryBaggageEmpty, parseBaggageHeader, serializeBaggage, setBaggageImmutable, setBaggageValue */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(885);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2684);\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(245);\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar BAGGAGE_HEADER_NAME = 'baggage';\nvar SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\nvar SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\n\nvar MAX_BAGGAGE_STRING_LENGTH = 8192;\n/** Create an instance of Baggage */\n\nfunction createBaggage(initItems) {\n  var baggageString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var mutable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return [_objectSpread({}, initItems), baggageString, mutable];\n}\n/** Get a value from baggage */\n\n\nfunction getBaggageValue(baggage, key) {\n  return baggage[0][key];\n}\n/** Add a value to baggage */\n\n\nfunction setBaggageValue(baggage, key, value) {\n  if (isBaggageMutable(baggage)) {\n    baggage[0][key] = value;\n  }\n}\n/** Check if the Sentry part of the passed baggage (i.e. the first element in the tuple) is empty */\n\n\nfunction isSentryBaggageEmpty(baggage) {\n  return Object.keys(baggage[0]).length === 0;\n}\n/** Returns Sentry specific baggage values */\n\n\nfunction getSentryBaggageItems(baggage) {\n  return baggage[0];\n}\n/**\n * Returns 3rd party baggage string of @param baggage\n * @param baggage\n */\n\n\nfunction getThirdPartyBaggage(baggage) {\n  return baggage[1];\n}\n/**\n * Checks if baggage is mutable\n * @param baggage\n * @returns true if baggage is mutable, else false\n */\n\n\nfunction isBaggageMutable(baggage) {\n  return baggage[2];\n}\n/**\n * Sets the passed baggage immutable\n * @param baggage\n */\n\n\nfunction setBaggageImmutable(baggage) {\n  baggage[2] = false;\n}\n/** Serialize a baggage object */\n\n\nfunction serializeBaggage(baggage) {\n  return Object.keys(baggage[0]).reduce(function (prev, key) {\n    var val = baggage[0][key];\n    var baggageEntry = \"\".concat(SENTRY_BAGGAGE_KEY_PREFIX).concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(val));\n    var newVal = prev === '' ? baggageEntry : \"\".concat(prev, \",\").concat(baggageEntry);\n\n    if (newVal.length > MAX_BAGGAGE_STRING_LENGTH) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_1__/* .logger.warn */ .kg.warn(\"Not adding key: \".concat(key, \" with val: \").concat(val, \" to baggage due to exceeding baggage size limits.\"));\n      return prev;\n    } else {\n      return newVal;\n    }\n  }, baggage[1]);\n}\n/**\n * Parse a baggage header from a string or a string array and return a Baggage object\n *\n * If @param includeThirdPartyEntries is set to true, third party baggage entries are added to the Baggage object\n * (This is necessary for merging potentially pre-existing baggage headers in outgoing requests with\n * our `sentry-` values)\n */\n\n\nfunction parseBaggageHeader(inputBaggageValue) {\n  var includeThirdPartyEntries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  // Adding this check here because we got reports of this function failing due to the input value\n  // not being a string. This debug log might help us determine what's going on here.\n  if (!Array.isArray(inputBaggageValue) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .HD)(inputBaggageValue) || typeof inputBaggageValue === 'number') {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_1__/* .logger.warn */ .kg.warn('[parseBaggageHeader] Received input value of incompatible type: ', typeof inputBaggageValue, inputBaggageValue); // Gonna early-return an empty baggage object so that we don't fail later on\n\n    return createBaggage({}, '');\n  }\n\n  var baggageEntries = ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .HD)(inputBaggageValue) ? inputBaggageValue : inputBaggageValue.join(',')).split(',').map(function (entry) {\n    return entry.trim();\n  }).filter(function (entry) {\n    return entry !== '' && (includeThirdPartyEntries || SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(entry));\n  });\n  return baggageEntries.reduce(function (_ref, curr) {\n    var _ref2 = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(_ref, 2),\n        baggageObj = _ref2[0],\n        baggageString = _ref2[1];\n\n    var _curr$split = curr.split('='),\n        _curr$split2 = (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(_curr$split, 2),\n        key = _curr$split2[0],\n        val = _curr$split2[1];\n\n    if (SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(key)) {\n      var baggageKey = decodeURIComponent(key.split('-')[1]);\n      return [_objectSpread(_objectSpread({}, baggageObj), {}, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)({}, baggageKey, decodeURIComponent(val))), baggageString, true];\n    } else {\n      return [baggageObj, baggageString === '' ? curr : \"\".concat(baggageString, \",\").concat(curr), true];\n    }\n  }, [{}, '', true]);\n}\n/**\n * Merges the baggage header we saved from the incoming request (or meta tag) with\n * a possibly created or modified baggage header by a third party that's been added\n * to the outgoing request header.\n *\n * In case @param headerBaggageString exists, we can safely add the the 3rd party part of @param headerBaggage\n * with our @param incomingBaggage. This is possible because if we modified anything beforehand,\n * it would only affect parts of the sentry baggage (@see Baggage interface).\n *\n * @param incomingBaggage the baggage header of the incoming request that might contain sentry entries\n * @param thirdPartyBaggageHeader possibly existing baggage header string or string[] added from a third\n *        party to the request headers\n *\n * @return a merged and serialized baggage string to be propagated with the outgoing request\n */\n\n\nfunction mergeAndSerializeBaggage(incomingBaggage, thirdPartyBaggageHeader) {\n  if (!incomingBaggage && !thirdPartyBaggageHeader) {\n    return '';\n  }\n\n  var headerBaggage = thirdPartyBaggageHeader && parseBaggageHeader(thirdPartyBaggageHeader, true) || undefined;\n  var thirdPartyHeaderBaggage = headerBaggage && getThirdPartyBaggage(headerBaggage);\n  var finalBaggage = createBaggage(incomingBaggage && incomingBaggage[0] || {}, thirdPartyHeaderBaggage || '');\n  return serializeBaggage(finalBaggage);\n}\n/**\n * Helper function that takes a raw baggage string (if available) and the processed sentry-trace header\n * data (if available), parses the baggage string and creates a Baggage object\n * If there is no baggage string, it will create an empty Baggage object.\n * In a second step, this functions determines if the created Baggage object should be set immutable\n * to prevent mutation of the Sentry data.\n *\n * Extracted this logic to a function because it's duplicated in a lot of places.\n *\n * @param rawBaggageValue\n * @param sentryTraceHeader\n */\n\n\nfunction parseBaggageSetMutability(rawBaggageValue, sentryTraceHeader) {\n  var baggage = parseBaggageHeader(rawBaggageValue || ''); // Because we are always creating a Baggage object by calling `parseBaggageHeader` above\n  // (either a filled one or an empty one, even if we didn't get a `baggage` header),\n  // we only need to check if we have a sentry-trace header or not. As soon as we have it,\n  // we set baggage immutable. In case we don't get a sentry-trace header, we can assume that\n  // this SDK is the head of the trace and thus we still permit mutation at this time.\n  // There is one exception though, which is that we get a baggage-header with `sentry-`\n  // items but NO sentry-trace header. In this case we also set the baggage immutable for now\n  // but if smoething like this would ever happen, we should revisit this and determine\n  // what this would actually mean for the trace (i.e. is this SDK the head?, what happened\n  // before that we don't have a sentry-trace header?, etc)\n\n  (sentryTraceHeader || !isSentryBaggageEmpty(baggage)) && setBaggageImmutable(baggage);\n  return baggage;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9800\n")},595:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "R": function() { return /* binding */ htmlTreeAsString; },\n/* harmony export */   "l": function() { return /* binding */ getLocationHref; }\n/* harmony export */ });\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4105);\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2684);\n\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nfunction htmlTreeAsString(elem, keyAttrs) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it\'s complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = \' > \';\n    var sepLength = separator.length;\n    var nextStr;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs); // bail out if\n      // - nextStr is the \'html\' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n\n      if (nextStr === \'html\' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return \'<unknown>\';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\n\nfunction _htmlElementAsString(el, keyAttrs) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return \'\';\n  }\n\n  out.push(elem.tagName.toLowerCase()); // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n\n  var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(function (keyAttr) {\n    return elem.getAttribute(keyAttr);\n  }).map(function (keyAttr) {\n    return [keyAttr, elem.getAttribute(keyAttr)];\n  }) : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(function (keyAttrPair) {\n      out.push("[".concat(keyAttrPair[0], "=\\"").concat(keyAttrPair[1], "\\"]"));\n    });\n  } else {\n    if (elem.id) {\n      out.push("#".concat(elem.id));\n    }\n\n    className = elem.className;\n\n    if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(className)) {\n      classes = className.split(/\\s+/);\n\n      for (i = 0; i < classes.length; i++) {\n        out.push(".".concat(classes[i]));\n      }\n    }\n  }\n\n  var allowedAttrs = [\'type\', \'name\', \'title\', \'alt\'];\n\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push("[".concat(key, "=\\"").concat(attr, "\\"]"));\n    }\n  }\n\n  return out.join(\'\');\n}\n/**\n * A safe form of location.href\n */\n\n\nfunction getLocationHref() {\n  var global = (0,_global_js__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalObject */ .R)();\n\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return \'\';\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUNYO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7O0FBRXhDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFCQUFxQiwwREFBUTtBQUM3Qjs7QUFFQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGNBQWMseUJBQXlCO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxlQUFlLG9FQUFlOztBQUU5QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Jyb3dzZXIuanM/ODMyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL2dsb2JhbC5qcyc7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4vaXMuanMnO1xuLyoqXG4gKiBHaXZlbiBhIGNoaWxkIERPTSBlbGVtZW50LCByZXR1cm5zIGEgcXVlcnktc2VsZWN0b3Igc3RhdGVtZW50IGRlc2NyaWJpbmcgdGhhdFxuICogYW5kIGl0cyBhbmNlc3RvcnNcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBib2R5ID4gZGl2ID4gaW5wdXQjZm9vLmJ0bltuYW1lPWJhel1cbiAqIEByZXR1cm5zIGdlbmVyYXRlZCBET00gcGF0aFxuICovXG5cbmZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbSwga2V5QXR0cnMpIHtcbiAgLy8gdHJ5L2NhdGNoIGJvdGg6XG4gIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gIC8vIC0gYGh0bWxUcmVlQXNTdHJpbmdgIGJlY2F1c2UgaXQncyBjb21wbGV4LCBhbmQganVzdCBhY2Nlc3NpbmcgdGhlIERPTSBpbmNvcnJlY3RseVxuICAvLyAtIGNhbiB0aHJvdyBhbiBleGNlcHRpb24gaW4gc29tZSBjaXJjdW1zdGFuY2VzLlxuICB0cnkge1xuICAgIHZhciBjdXJyZW50RWxlbSA9IGVsZW07XG4gICAgdmFyIE1BWF9UUkFWRVJTRV9IRUlHSFQgPSA1O1xuICAgIHZhciBNQVhfT1VUUFVUX0xFTiA9IDgwO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICB2YXIgbGVuID0gMDtcbiAgICB2YXIgc2VwYXJhdG9yID0gJyA+ICc7XG4gICAgdmFyIHNlcExlbmd0aCA9IHNlcGFyYXRvci5sZW5ndGg7XG4gICAgdmFyIG5leHRTdHI7XG5cbiAgICB3aGlsZSAoY3VycmVudEVsZW0gJiYgaGVpZ2h0KysgPCBNQVhfVFJBVkVSU0VfSEVJR0hUKSB7XG4gICAgICBuZXh0U3RyID0gX2h0bWxFbGVtZW50QXNTdHJpbmcoY3VycmVudEVsZW0sIGtleUF0dHJzKTsgLy8gYmFpbCBvdXQgaWZcbiAgICAgIC8vIC0gbmV4dFN0ciBpcyB0aGUgJ2h0bWwnIGVsZW1lbnRcbiAgICAgIC8vIC0gdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRoYXQgd291bGQgYmUgY3JlYXRlZCBleGNlZWRzIE1BWF9PVVRQVVRfTEVOXG4gICAgICAvLyAgIChpZ25vcmUgdGhpcyBsaW1pdCBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IGl0ZXJhdGlvbilcblxuICAgICAgaWYgKG5leHRTdHIgPT09ICdodG1sJyB8fCBoZWlnaHQgPiAxICYmIGxlbiArIG91dC5sZW5ndGggKiBzZXBMZW5ndGggKyBuZXh0U3RyLmxlbmd0aCA+PSBNQVhfT1VUUFVUX0xFTikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgb3V0LnB1c2gobmV4dFN0cik7XG4gICAgICBsZW4gKz0gbmV4dFN0ci5sZW5ndGg7XG4gICAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbihzZXBhcmF0b3IpO1xuICB9IGNhdGNoIChfb08pIHtcbiAgICByZXR1cm4gJzx1bmtub3duPic7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHNpbXBsZSwgcXVlcnktc2VsZWN0b3IgcmVwcmVzZW50YXRpb24gb2YgYSBET00gZWxlbWVudFxuICogZS5nLiBbSFRNTEVsZW1lbnRdID0+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIF9odG1sRWxlbWVudEFzU3RyaW5nKGVsLCBrZXlBdHRycykge1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgb3V0ID0gW107XG4gIHZhciBjbGFzc05hbWU7XG4gIHZhciBjbGFzc2VzO1xuICB2YXIga2V5O1xuICB2YXIgYXR0cjtcbiAgdmFyIGk7XG5cbiAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBvdXQucHVzaChlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7IC8vIFBhaXJzIG9mIGF0dHJpYnV0ZSBrZXlzIGRlZmluZWQgaW4gYHNlcmlhbGl6ZUF0dHJpYnV0ZWAgYW5kIHRoZWlyIHZhbHVlcyBvbiBlbGVtZW50LlxuXG4gIHZhciBrZXlBdHRyUGFpcnMgPSBrZXlBdHRycyAmJiBrZXlBdHRycy5sZW5ndGggPyBrZXlBdHRycy5maWx0ZXIoZnVuY3Rpb24gKGtleUF0dHIpIHtcbiAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoa2V5QXR0cik7XG4gIH0pLm1hcChmdW5jdGlvbiAoa2V5QXR0cikge1xuICAgIHJldHVybiBba2V5QXR0ciwgZWxlbS5nZXRBdHRyaWJ1dGUoa2V5QXR0cildO1xuICB9KSA6IG51bGw7XG5cbiAgaWYgKGtleUF0dHJQYWlycyAmJiBrZXlBdHRyUGFpcnMubGVuZ3RoKSB7XG4gICAga2V5QXR0clBhaXJzLmZvckVhY2goZnVuY3Rpb24gKGtleUF0dHJQYWlyKSB7XG4gICAgICBvdXQucHVzaChcIltcIi5jb25jYXQoa2V5QXR0clBhaXJbMF0sIFwiPVxcXCJcIikuY29uY2F0KGtleUF0dHJQYWlyWzFdLCBcIlxcXCJdXCIpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWxlbS5pZCkge1xuICAgICAgb3V0LnB1c2goXCIjXCIuY29uY2F0KGVsZW0uaWQpKTtcbiAgICB9XG5cbiAgICBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZTtcblxuICAgIGlmIChjbGFzc05hbWUgJiYgaXNTdHJpbmcoY2xhc3NOYW1lKSkge1xuICAgICAgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXQucHVzaChcIi5cIi5jb25jYXQoY2xhc3Nlc1tpXSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBhbGxvd2VkQXR0cnMgPSBbJ3R5cGUnLCAnbmFtZScsICd0aXRsZScsICdhbHQnXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgYWxsb3dlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gYWxsb3dlZEF0dHJzW2ldO1xuICAgIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShrZXkpO1xuXG4gICAgaWYgKGF0dHIpIHtcbiAgICAgIG91dC5wdXNoKFwiW1wiLmNvbmNhdChrZXksIFwiPVxcXCJcIikuY29uY2F0KGF0dHIsIFwiXFxcIl1cIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXQuam9pbignJyk7XG59XG4vKipcbiAqIEEgc2FmZSBmb3JtIG9mIGxvY2F0aW9uLmhyZWZcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExvY2F0aW9uSHJlZigpIHtcbiAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGdsb2JhbC5kb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICB9IGNhdGNoIChvTykge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRMb2NhdGlvbkhyZWYsIGh0bWxUcmVlQXNTdHJpbmcgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///595\n')},1508:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h\": function() { return /* binding */ _nullishCoalesce; }\n/* harmony export */ });\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nfunction _nullishCoalesce(lhs, rhsFn) {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n} // Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwOC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzL19udWxsaXNoQ29hbGVzY2UuanM/ZjljMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIFJIUyBpcyB3cmFwcGVkIGluIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBpdCdzIGEgY29tcHV0ZWQgdmFsdWUsIHRoYXQgZXZhbHVhdGlvbiB3b24ndCBoYXBwZW4gdW5sZXNzIHRoZVxuICogTEhTIGV2YWx1YXRlcyB0byBhIG51bGxpc2ggdmFsdWUsIHRvIG1pbWljIHRoZSBvcGVyYXRvcidzIHNob3J0LWNpcmN1aXRpbmcgYmVoYXZpb3IuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICpcbiAqIEBwYXJhbSBsaHMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIHRoZSBgPz9gXG4gKiBAcGFyYW0gcmhzRm4gQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSByaWdodCBvZiB0aGUgYD8/YFxuICogQHJldHVybnMgVGhlIExIUyB2YWx1ZSwgdW5sZXNzIGl0J3MgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBpbiB3aGljaCBjYXNlLCB0aGUgUkhTIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIF9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgcmV0dXJuIGxocyAhPSBudWxsID8gbGhzIDogcmhzRm4oKTtcbn0gLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX251bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4vLyAgIGlmIChsaHMgIT0gbnVsbCkge1xuLy8gICAgIHJldHVybiBsaHM7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcmV0dXJuIHJoc0ZuKCk7XG4vLyAgIH1cbi8vIH1cblxuXG5leHBvcnQgeyBfbnVsbGlzaENvYWxlc2NlIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1508\n")},4105:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"R\": function() { return /* binding */ getGlobalObject; },\n/* harmony export */   \"Y\": function() { return /* binding */ getGlobalSingleton; }\n/* harmony export */ });\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n\n/** Internal */\n\nvar fallbackGlobalObject = {};\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\n\nfunction getGlobalObject() {\n  return (0,_node_js__WEBPACK_IMPORTED_MODULE_0__/* .isNodeEnv */ .KV)() ? __webpack_require__.g : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : fallbackGlobalObject;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\n\n\nfunction getGlobalSingleton(name, creator, obj) {\n  var global = obj || getGlobalObject();\n\n  var __SENTRY__ = global.__SENTRY__ = global.__SENTRY__ || {};\n\n  var singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEwNS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLDZEQUFTLEtBQUsscUJBQU07QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2dsb2JhbC5qcz8zMzBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZUVudiB9IGZyb20gJy4vbm9kZS5qcyc7XG4vKiogSW50ZXJuYWwgKi9cblxudmFyIGZhbGxiYWNrR2xvYmFsT2JqZWN0ID0ge307XG4vKipcbiAqIFNhZmVseSBnZXQgZ2xvYmFsIHNjb3BlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIEdsb2JhbCBzY29wZSBvYmplY3RcbiAqL1xuXG5mdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gIHJldHVybiBpc05vZGVFbnYoKSA/IGdsb2JhbCA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IGZhbGxiYWNrR2xvYmFsT2JqZWN0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZ2xvYmFsIHNpbmdsZXRvbiBjb250YWluZWQgaW4gdGhlIGdsb2JhbCBgX19TRU5UUllfX2Agb2JqZWN0LlxuICpcbiAqIElmIHRoZSBzaW5nbGV0b24gZG9lc24ndCBhbHJlYWR5IGV4aXN0IGluIGBfX1NFTlRSWV9fYCwgaXQgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZSBnaXZlbiBmYWN0b3J5XG4gKiBmdW5jdGlvbiBhbmQgYWRkZWQgdG8gdGhlIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgZ2xvYmFsIHNpbmdsZXRvbiBvbiBfX1NFTlRSWV9fXG4gKiBAcGFyYW0gY3JlYXRvciBjcmVhdG9yIEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBzaW5nbGV0b24gaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIGBfX1NFTlRSWV9fYFxuICogQHBhcmFtIG9iaiAoT3B0aW9uYWwpIFRoZSBnbG9iYWwgb2JqZWN0IG9uIHdoaWNoIHRvIGxvb2sgZm9yIGBfX1NFTlRSWV9fYCwgaWYgbm90IGBnZXRHbG9iYWxPYmplY3RgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRHbG9iYWxTaW5nbGV0b24obmFtZSwgY3JlYXRvciwgb2JqKSB7XG4gIHZhciBnbG9iYWwgPSBvYmogfHwgZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgdmFyIF9fU0VOVFJZX18gPSBnbG9iYWwuX19TRU5UUllfXyA9IGdsb2JhbC5fX1NFTlRSWV9fIHx8IHt9O1xuXG4gIHZhciBzaW5nbGV0b24gPSBfX1NFTlRSWV9fW25hbWVdIHx8IChfX1NFTlRSWV9fW25hbWVdID0gY3JlYXRvcigpKTtcbiAgcmV0dXJuIHNpbmdsZXRvbjtcbn1cblxuZXhwb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBnZXRHbG9iYWxTaW5nbGV0b24gfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4105\n")},6710:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"o\": function() { return /* binding */ addInstrumentationHandler; }\n/* harmony export */ });\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4105);\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2684);\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(245);\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2362);\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1313);\n/* harmony import */ var _supports_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4712);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\nvar global = (0,_global_js__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalObject */ .R)();\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nvar handlers = {};\nvar instrumented = {};\n/** Instruments given API */\n\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n\n    case 'dom':\n      instrumentDOM();\n      break;\n\n    case 'xhr':\n      instrumentXHR();\n      break;\n\n    case 'fetch':\n      instrumentFetch();\n      break;\n\n    case 'history':\n      instrumentHistory();\n      break;\n\n    case 'error':\n      instrumentError();\n      break;\n\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n\n    default:\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_2__/* .logger.warn */ .kg.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\n\n\nfunction addInstrumentationHandler(type, callback) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(callback);\n  instrument(type);\n}\n/** JSDoc */\n\n\nfunction triggerHandlers(type, data) {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  var _iterator = _createForOfIteratorHelper(handlers[type] || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var handler = _step.value;\n\n      try {\n        handler(data);\n      } catch (e) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_2__/* .logger.error */ .kg.error(\"Error while triggering instrumentation handler.\\nType: \".concat(type, \"\\nName: \").concat((0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__/* .getFunctionName */ .$P)(handler), \"\\nError:\"), e);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n/** JSDoc */\n\n\nfunction instrumentConsole() {\n  if (!('console' in global)) {\n    return;\n  }\n\n  _logger_js__WEBPACK_IMPORTED_MODULE_2__/* .CONSOLE_LEVELS.forEach */ .RU.forEach(function (level) {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(global.console, level, function (originalConsoleMethod) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        triggerHandlers('console', {\n          args: args,\n          level: level\n        }); // this fails for some browsers. :(\n\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n/** JSDoc */\n\n\nfunction instrumentFetch() {\n  if (!(0,_supports_js__WEBPACK_IMPORTED_MODULE_5__/* .supportsNativeFetch */ .t$)()) {\n    return;\n  }\n\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(global, 'fetch', function (originalFetch) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var handlerData = {\n        args: args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args)\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', _objectSpread({}, handlerData));\n      return originalFetch.apply(global, args).then(function (response) {\n        triggerHandlers('fetch', _objectSpread(_objectSpread({}, handlerData), {}, {\n          endTimestamp: Date.now(),\n          response: response\n        }));\n        return response;\n      }, function (error) {\n        triggerHandlers('fetch', _objectSpread(_objectSpread({}, handlerData), {}, {\n          endTimestamp: Date.now(),\n          error: error\n        })); // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n        throw error;\n      });\n    };\n  });\n}\n/** Extract `method` from fetch call arguments */\n\n\nfunction getFetchMethod() {\n  var fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if ('Request' in global && (0,_is_js__WEBPACK_IMPORTED_MODULE_6__/* .isInstanceOf */ .V9)(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n\n  return 'GET';\n}\n/** Extract `url` from fetch call arguments */\n\n\nfunction getFetchUrl() {\n  var fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n\n  if ('Request' in global && (0,_is_js__WEBPACK_IMPORTED_MODULE_6__/* .isInstanceOf */ .V9)(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n\n  return String(fetchArgs[0]);\n}\n/** JSDoc */\n\n\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  var xhrproto = XMLHttpRequest.prototype;\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var xhr = this;\n      var url = args[1];\n      var xhrInfo = xhr.__sentry_xhr__ = {\n        method: (0,_is_js__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .HD)(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1]\n      }; // if Sentry key appears in URL, don't capture it as a request\n\n      if ((0,_is_js__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .HD)(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      var onreadystatechangeHandler = function onreadystatechangeHandler() {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: xhr\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(xhr, 'onreadystatechange', function (original) {\n          return function () {\n            onreadystatechangeHandler();\n\n            for (var _len4 = arguments.length, readyStateArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              readyStateArgs[_key4] = arguments[_key4];\n            }\n\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(xhrproto, 'send', function (originalSend) {\n    return function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args: args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nvar lastHref;\n/** JSDoc */\n\nfunction instrumentHistory() {\n  if (!(0,_supports_js__WEBPACK_IMPORTED_MODULE_5__/* .supportsHistory */ .Bf)()) {\n    return;\n  }\n\n  var oldOnPopState = global.onpopstate;\n\n  global.onpopstate = function () {\n    var to = global.location.href; // keep track of the current URL state, as we always receive only the updated state\n\n    var from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from: from,\n      to: to\n    });\n\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {// no-empty\n      }\n    }\n  };\n  /** @hidden */\n\n\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var url = args.length > 2 ? args[2] : undefined;\n\n      if (url) {\n        // coerce to string (this is what pushState does)\n        var from = lastHref;\n        var to = String(url); // keep track of the current URL state, as we always receive only the updated state\n\n        lastHref = to;\n        triggerHandlers('history', {\n          from: from,\n          to: to\n        });\n      }\n\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(global.history, 'pushState', historyReplacementFunction);\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(global.history, 'replaceState', historyReplacementFunction);\n}\n\nvar debounceDuration = 1000;\nvar debounceTimerID;\nvar lastCapturedEvent;\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\n\nfunction shouldShortcircuitPreviousDebounce(previous, current) {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  } // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n\n\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {// just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  } // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n\n\n  return false;\n}\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\n\n\nfunction shouldSkipDOMEvent(event) {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    var target = event.target;\n\n    if (!target || !target.tagName) {\n      return true;\n    } // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n\n\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {// just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\n\n\nfunction makeDOMEventHandler(handler) {\n  var globalListener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (event) {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    } // We always want to skip _some_ events.\n\n\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    var name = event.type === 'keypress' ? 'input' : event.type; // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    } // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    } // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n\n\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(function () {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n/** JSDoc */\n\n\nfunction instrumentDOM() {\n  if (!('document' in global)) {\n    return;\n  } // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n\n\n  var triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false); // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n\n  ['EventTarget', 'Node'].forEach(function (target) {\n    var proto = global[target] && global[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var handlers = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = handlers[type] = handlers[type] || {\n              refCount: 0\n            };\n\n            if (!handlerForType.handler) {\n              var handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {// Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_4__/* .fill */ .hl)(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var handlers = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = handlers[type];\n\n            if (handlerForType) {\n              handlerForType.refCount -= 1; // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type];\n              } // If there are no longer any custom handlers of any type on this element, cleanup everything.\n\n\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {// Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\nvar _oldOnErrorHandler = null;\n/** JSDoc */\n\nfunction instrumentError() {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column: column,\n      error: error,\n      line: line,\n      msg: msg,\n      url: url\n    });\n\n    if (_oldOnErrorHandler) {\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nvar _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6710\n")},2684:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cy\": function() { return /* binding */ isSyntheticEvent; },\n/* harmony export */   \"HD\": function() { return /* binding */ isString; },\n/* harmony export */   \"J8\": function() { return /* binding */ isThenable; },\n/* harmony export */   \"Kj\": function() { return /* binding */ isRegExp; },\n/* harmony export */   \"PO\": function() { return /* binding */ isPlainObject; },\n/* harmony export */   \"TX\": function() { return /* binding */ isDOMError; },\n/* harmony export */   \"V9\": function() { return /* binding */ isInstanceOf; },\n/* harmony export */   \"VW\": function() { return /* binding */ isErrorEvent; },\n/* harmony export */   \"VZ\": function() { return /* binding */ isError; },\n/* harmony export */   \"cO\": function() { return /* binding */ isEvent; },\n/* harmony export */   \"fm\": function() { return /* binding */ isDOMException; },\n/* harmony export */   \"i2\": function() { return /* binding */ isNaN; },\n/* harmony export */   \"kK\": function() { return /* binding */ isElement; },\n/* harmony export */   \"pt\": function() { return /* binding */ isPrimitive; }\n/* harmony export */ });\nvar objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat, ty) {\n  return objectToString.call(wat) === \"[object \".concat(ty, \"]\");\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isPrimitive(wat) {\n  return wat === null || typeof wat !== 'object' && typeof wat !== 'function';\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\n\n\nfunction isThenable(wat) {\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nfunction isNaN(wat) {\n  return typeof wat === 'number' && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\n\n\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsSUFBSSxjQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxtQkFBbUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlCQUFpQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscUJBQXFCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxrQkFBa0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9CQUFvQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksY0FBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0JBQWdCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUJBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxtQkFBbUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2lzLmpzPzM3YWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIG9uZSBvZiBhIGZldyBFcnJvciBvciBFcnJvci1saWtlXG4gKiB7QGxpbmsgaXNFcnJvcn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cblxuZnVuY3Rpb24gaXNFcnJvcih3YXQpIHtcbiAgc3dpdGNoIChvYmplY3RUb1N0cmluZy5jYWxsKHdhdCkpIHtcbiAgICBjYXNlICdbb2JqZWN0IEVycm9yXSc6XG4gICAgY2FzZSAnW29iamVjdCBFeGNlcHRpb25dJzpcbiAgICBjYXNlICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nOlxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGlzSW5zdGFuY2VPZih3YXQsIEVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0J1aWx0aW4od2F0LCB0eSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh3YXQpID09PSBcIltvYmplY3QgXCIuY29uY2F0KHR5LCBcIl1cIik7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBFcnJvckV2ZW50XG4gKiB7QGxpbmsgaXNFcnJvckV2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzRXJyb3JFdmVudCh3YXQpIHtcbiAgcmV0dXJuIGlzQnVpbHRpbih3YXQsICdFcnJvckV2ZW50Jyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FcnJvclxuICoge0BsaW5rIGlzRE9NRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNET01FcnJvcih3YXQpIHtcbiAgcmV0dXJuIGlzQnVpbHRpbih3YXQsICdET01FcnJvcicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRE9NRXhjZXB0aW9uXG4gKiB7QGxpbmsgaXNET01FeGNlcHRpb259LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNET01FeGNlcHRpb24od2F0KSB7XG4gIHJldHVybiBpc0J1aWx0aW4od2F0LCAnRE9NRXhjZXB0aW9uJyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhIHN0cmluZ1xuICoge0BsaW5rIGlzU3RyaW5nfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHdhdCkge1xuICByZXR1cm4gaXNCdWlsdGluKHdhdCwgJ1N0cmluZycpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSBpcyBhIHByaW1pdGl2ZSAodW5kZWZpbmVkLCBudWxsLCBudW1iZXIsIGJvb2xlYW4sIHN0cmluZywgYmlnaW50LCBzeW1ib2wpXG4gKiB7QGxpbmsgaXNQcmltaXRpdmV9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNQcmltaXRpdmUod2F0KSB7XG4gIHJldHVybiB3YXQgPT09IG51bGwgfHwgdHlwZW9mIHdhdCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHdhdCAhPT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB7QGxpbmsgaXNQbGFpbk9iamVjdH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cblxuXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHdhdCkge1xuICByZXR1cm4gaXNCdWlsdGluKHdhdCwgJ09iamVjdCcpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRXZlbnQgaW5zdGFuY2VcbiAqIHtAbGluayBpc0V2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzRXZlbnQod2F0KSB7XG4gIHJldHVybiB0eXBlb2YgRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih3YXQsIEV2ZW50KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEVsZW1lbnQgaW5zdGFuY2VcbiAqIHtAbGluayBpc0VsZW1lbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNFbGVtZW50KHdhdCkge1xuICByZXR1cm4gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih3YXQsIEVsZW1lbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gcmVnZXhwXG4gKiB7QGxpbmsgaXNSZWdFeHB9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNSZWdFeHAod2F0KSB7XG4gIHJldHVybiBpc0J1aWx0aW4od2F0LCAnUmVnRXhwJyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlIGhhcyBhIHRoZW4gZnVuY3Rpb24uXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzVGhlbmFibGUod2F0KSB7XG4gIHJldHVybiBCb29sZWFuKHdhdCAmJiB3YXQudGhlbiAmJiB0eXBlb2Ygd2F0LnRoZW4gPT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBTeW50aGV0aWNFdmVudFxuICoge0BsaW5rIGlzU3ludGhldGljRXZlbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5cblxuZnVuY3Rpb24gaXNTeW50aGV0aWNFdmVudCh3YXQpIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3Qod2F0KSAmJiAnbmF0aXZlRXZlbnQnIGluIHdhdCAmJiAncHJldmVudERlZmF1bHQnIGluIHdhdCAmJiAnc3RvcFByb3BhZ2F0aW9uJyBpbiB3YXQ7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlIGlzIE5hTlxuICoge0BsaW5rIGlzTmFOfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzTmFOKHdhdCkge1xuICByZXR1cm4gdHlwZW9mIHdhdCA9PT0gJ251bWJlcicgJiYgd2F0ICE9PSB3YXQ7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBpbnN0YW5jZSBvZiBwcm92aWRlZCBjb25zdHJ1Y3Rvci5cbiAqIHtAbGluayBpc0luc3RhbmNlT2Z9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIGJhc2UgQSBjb25zdHJ1Y3RvciB0byBiZSB1c2VkIGluIGEgY2hlY2suXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cblxuXG5mdW5jdGlvbiBpc0luc3RhbmNlT2Yod2F0LCBiYXNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdhdCBpbnN0YW5jZW9mIGJhc2U7XG4gIH0gY2F0Y2ggKF9lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7IGlzRE9NRXJyb3IsIGlzRE9NRXhjZXB0aW9uLCBpc0VsZW1lbnQsIGlzRXJyb3IsIGlzRXJyb3JFdmVudCwgaXNFdmVudCwgaXNJbnN0YW5jZU9mLCBpc05hTiwgaXNQbGFpbk9iamVjdCwgaXNQcmltaXRpdmUsIGlzUmVnRXhwLCBpc1N0cmluZywgaXNTeW50aGV0aWNFdmVudCwgaXNUaGVuYWJsZSB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2684\n")},245:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cf\": function() { return /* binding */ consoleSandbox; },\n/* harmony export */   \"RU\": function() { return /* binding */ CONSOLE_LEVELS; },\n/* harmony export */   \"kg\": function() { return /* binding */ logger; }\n/* harmony export */ });\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4105);\n // TODO: Implement different loggers for different environments\n\nvar global = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)();\n/** Prefix for logging strings */\n\nvar PREFIX = 'Sentry Logger ';\nvar CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\n\nfunction consoleSandbox(callback) {\n  var global = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  var originalConsole = global.console;\n  var wrappedLevels = {}; // Restore all wrapped console methods\n\n  CONSOLE_LEVELS.forEach(function (level) {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;\n\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalWrappedFunc;\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n      originalConsole[level] = wrappedLevels[level];\n    });\n  }\n}\n\nfunction makeLogger() {\n  var enabled = false;\n  var logger = {\n    enable: function enable() {\n      enabled = true;\n    },\n    disable: function disable() {\n      enabled = false;\n    }\n  };\n\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (enabled) {\n          consoleSandbox(function () {\n            var _global$console;\n\n            (_global$console = global.console)[name].apply(_global$console, [\"\".concat(PREFIX, \"[\").concat(name, \"]:\")].concat(args));\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        return undefined;\n      };\n    });\n  }\n\n  return logger;\n} // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n\n\nvar logger;\n\nif (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n  logger = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalSingleton */ .Y)('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRSxDQUFDOztBQUVuRSxhQUFhLG9FQUFlO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9FQUFlOztBQUU5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxhQUFhO0FBQ3pGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsRUFBRTs7O0FBR0Y7O0FBRUE7QUFDQSxXQUFXLHVFQUFrQjtBQUM3QixFQUFFO0FBQ0Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcz8wZDk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgZ2V0R2xvYmFsU2luZ2xldG9uIH0gZnJvbSAnLi9nbG9iYWwuanMnOyAvLyBUT0RPOiBJbXBsZW1lbnQgZGlmZmVyZW50IGxvZ2dlcnMgZm9yIGRpZmZlcmVudCBlbnZpcm9ubWVudHNcblxudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG5cbnZhciBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xudmFyIENPTlNPTEVfTEVWRUxTID0gWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnbG9nJywgJ2Fzc2VydCcsICd0cmFjZSddO1xuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlIHNlbnRyeSBjb25zb2xlIGluc3RydW1lbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gYWdhaW5zdCB0aGUgb3JpZ2luYWwgYGNvbnNvbGVgIG1lc3NhZ2VzXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuXG5mdW5jdGlvbiBjb25zb2xlU2FuZGJveChjYWxsYmFjaykge1xuICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgaWYgKCEoJ2NvbnNvbGUnIGluIGdsb2JhbCkpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbENvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgdmFyIHdyYXBwZWRMZXZlbHMgPSB7fTsgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcblxuICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgIC8vIFRPRE8odjcpOiBSZW1vdmUgdGhpcyBjaGVjayBhcyBpdCdzIG9ubHkgbmVlZGVkIGZvciBOb2RlIDZcbiAgICB2YXIgb3JpZ2luYWxXcmFwcGVkRnVuYyA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0gJiYgb3JpZ2luYWxDb25zb2xlW2xldmVsXS5fX3NlbnRyeV9vcmlnaW5hbF9fO1xuXG4gICAgaWYgKGxldmVsIGluIGdsb2JhbC5jb25zb2xlICYmIG9yaWdpbmFsV3JhcHBlZEZ1bmMpIHtcbiAgICAgIHdyYXBwZWRMZXZlbHNbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlW2xldmVsXTtcbiAgICAgIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0gPSBvcmlnaW5hbFdyYXBwZWRGdW5jO1xuICAgIH1cbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXZlcnQgcmVzdG9yYXRpb24gdG8gd3JhcHBlZCBzdGF0ZVxuICAgIE9iamVjdC5rZXlzKHdyYXBwZWRMZXZlbHMpLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZExldmVsc1tsZXZlbF07XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxvZ2dlcigpIHtcbiAgdmFyIGVuYWJsZWQgPSBmYWxzZTtcbiAgdmFyIGxvZ2dlciA9IHtcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgbG9nZ2VyW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2dsb2JhbCRjb25zb2xlO1xuXG4gICAgICAgICAgICAoX2dsb2JhbCRjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpW25hbWVdLmFwcGx5KF9nbG9iYWwkY29uc29sZSwgW1wiXCIuY29uY2F0KFBSRUZJWCwgXCJbXCIpLmNvbmNhdChuYW1lLCBcIl06XCIpXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGxvZ2dlcltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyO1xufSAvLyBFbnN1cmUgd2Ugb25seSBoYXZlIGEgc2luZ2xlIGxvZ2dlciBpbnN0YW5jZSwgZXZlbiBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBAc2VudHJ5L3V0aWxzIGFyZSBiZWluZyB1c2VkXG5cblxudmFyIGxvZ2dlcjtcblxuaWYgKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKSB7XG4gIGxvZ2dlciA9IGdldEdsb2JhbFNpbmdsZXRvbignbG9nZ2VyJywgbWFrZUxvZ2dlcik7XG59IGVsc2Uge1xuICBsb2dnZXIgPSBtYWtlTG9nZ2VyKCk7XG59XG5cbmV4cG9ydCB7IENPTlNPTEVfTEVWRUxTLCBjb25zb2xlU2FuZGJveCwgbG9nZ2VyIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///245\n")},2861:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DM\": function() { return /* binding */ uuid4; },\n/* harmony export */   \"Db\": function() { return /* binding */ addExceptionTypeValue; },\n/* harmony export */   \"EG\": function() { return /* binding */ addExceptionMechanism; },\n/* harmony export */   \"YO\": function() { return /* binding */ checkOrSetAlreadyCaught; },\n/* harmony export */   \"en\": function() { return /* binding */ parseUrl; },\n/* harmony export */   \"jH\": function() { return /* binding */ getEventDescription; }\n/* harmony export */ });\n/* unused harmony exports addContextToFrame, parseSemver, stripUrlQueryAndFragment */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4105);\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2362);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\n\nfunction uuid4() {\n  var global = (0,_global_js__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalObject */ .R)();\n  var crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    var arr = new Uint16Array(8);\n    crypto.getRandomValues(arr); // set 4 in byte 7\n\n    arr[3] = arr[3] & 0xfff | 0x4000; // set 2 most significant bits of byte 9 to '10'\n\n    arr[4] = arr[4] & 0x3fff | 0x8000;\n\n    var pad = function pad(num) {\n      var v = num.toString(16);\n\n      while (v.length < 4) {\n        v = \"0\".concat(v);\n      }\n\n      return v;\n    };\n\n    return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n  } // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\n\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\n\n\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  var match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  } // coerce to undefined values to empty string so we don't get 'undefined'\n\n\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment // everything minus origin\n\n  };\n}\n\nfunction getFirstException(event) {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\n\n\nfunction getEventDescription(event) {\n  var message = event.message,\n      eventId = event.event_id;\n\n  if (message) {\n    return message;\n  }\n\n  var firstException = getFirstException(event);\n\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return \"\".concat(firstException.type, \": \").concat(firstException.value);\n    }\n\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n\n  return eventId || '<unknown>';\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\n\n\nfunction addExceptionTypeValue(event, value, type) {\n  var exception = event.exception = event.exception || {};\n  var values = exception.values = exception.values || [];\n  var firstException = values[0] = values[0] || {};\n\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\n\n\nfunction addExceptionMechanism(event, newMechanism) {\n  var firstException = getFirstException(event);\n\n  if (!firstException) {\n    return;\n  }\n\n  var defaultMechanism = {\n    type: 'generic',\n    handled: true\n  };\n  var currentMechanism = firstException.mechanism;\n  firstException.mechanism = _objectSpread(_objectSpread(_objectSpread({}, defaultMechanism), currentMechanism), newMechanism);\n\n  if (newMechanism && 'data' in newMechanism) {\n    var mergedData = _objectSpread(_objectSpread({}, currentMechanism && currentMechanism.data), newMechanism.data);\n\n    firstException.mechanism.data = mergedData;\n  }\n} // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n\n\nvar SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\n\nfunction parseSemver(input) {\n  var match = input.match(SEMVER_REGEXP) || [];\n  var major = parseInt(match[1], 10);\n  var minor = parseInt(match[2], 10);\n  var patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\n\n\nfunction addContextToFrame(lines, frame) {\n  var linesOfContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  var lineno = frame.lineno || 0;\n  var maxLines = lines.length;\n  var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {\n    return snipLine(line, 0);\n  });\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {\n    return snipLine(line, 0);\n  });\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\n\n\nfunction stripUrlQueryAndFragment(urlPath) {\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\n\n\nfunction checkOrSetAlreadyCaught(exception) {\n  if (exception && exception.__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_2__/* .addNonEnumerableProperty */ .xp)(exception, '__sentry_captured__', true);\n  } catch (err) {// `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2861\n")},9:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"l$\": function() { return /* binding */ dynamicRequire; },\n  \"KV\": function() { return /* binding */ isNodeEnv; },\n  \"$y\": function() { return /* binding */ loadModule; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/env.js\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These fags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/node.js\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\nfunction isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return !isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n\n\nfunction dynamicRequire(mod, request) {\n  return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\n\n\nfunction loadModule(moduleName) {\n  var mod;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {// no-empty\n  }\n\n  try {\n    var _dynamicRequire = dynamicRequire(module, 'process'),\n        cwd = _dynamicRequire.cwd;\n\n    mod = dynamicRequire(module, \"\".concat(cwd(), \"/node_modules/\").concat(moduleName));\n  } catch (e) {// no-empty\n  }\n\n  return mod;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdEIyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsZ0JBQWdCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLFdBQVc7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLFdBQVc7QUFDZjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZW52LmpzPzNmM2YiLCJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS5qcz9iMGVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUaGlzIG1vZHVsZSBleGlzdHMgZm9yIG9wdGltaXphdGlvbnMgaW4gdGhlIGJ1aWxkIHByb2Nlc3MgdGhyb3VnaCByb2xsdXAgYW5kIHRlcnNlci4gIFdlIGRlZmluZSBzb21lIGdsb2JhbFxuICogY29uc3RhbnRzLCB3aGljaCBjYW4gYmUgb3ZlcnJpZGRlbiBkdXJpbmcgYnVpbGQuIEJ5IGd1YXJkaW5nIGNlcnRhaW4gcGllY2VzIG9mIGNvZGUgd2l0aCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdGhlc2VcbiAqIGNvbnN0YW50cywgd2UgY2FuIGNvbnRyb2wgd2hldGhlciBvciBub3QgdGhleSBhcHBlYXIgaW4gdGhlIGZpbmFsIGJ1bmRsZS4gKEFueSBjb2RlIGd1YXJkZWQgYnkgYSBmYWxzZSBjb25kaXRpb24gd2lsbFxuICogbmV2ZXIgcnVuLCBhbmQgd2lsbCBoZW5jZSBiZSBkcm9wcGVkIGR1cmluZyB0cmVlc2hha2luZy4pIFRoZSB0d28gcHJpbWFyeSB1c2VzIGZvciB0aGlzIGFyZSBzdHJpcHBpbmcgb3V0IGNhbGxzIHRvXG4gKiBgbG9nZ2VyYCBhbmQgcHJldmVudGluZyBub2RlLXJlbGF0ZWQgY29kZSBmcm9tIGFwcGVhcmluZyBpbiBicm93c2VyIGJ1bmRsZXMuXG4gKlxuICogQXR0ZW50aW9uOlxuICogVGhpcyBmaWxlIHNob3VsZCBub3QgYmUgdXNlZCB0byBkZWZpbmUgY29uc3RhbnRzL2ZsYWdzIHRoYXQgYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIHRyZWUtc2hha2luZyBjb25kdWN0ZWQgYnlcbiAqIHVzZXJzLiBUaGVzZSBmYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IGlmIHdlJ3JlIGJ1aWxkaW5nIGEgYnJvd3NlciBidW5kbGUuXG4gKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgYnJvd3NlciBidW5kbGUgYnVpbGQuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlckJ1bmRsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fICE9PSAndW5kZWZpbmVkJyAmJiAhIV9fU0VOVFJZX0JST1dTRVJfQlVORExFX187XG59XG5cbmV4cG9ydCB7IGlzQnJvd3NlckJ1bmRsZSB9OyIsImltcG9ydCB7IGlzQnJvd3NlckJ1bmRsZSB9IGZyb20gJy4vZW52LmpzJztcbi8qKlxuICogTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBpZiB5b3UgYWRkIGEgZnVuY3Rpb24gdG8gdGhpcyBtb2R1bGUgYW5kIGl0IG5lZWRzIHRvIHByaW50IHNvbWV0aGluZyxcbiAqIHlvdSBtdXN0IGVpdGhlciBhKSB1c2UgYGNvbnNvbGUubG9nYCByYXRoZXIgdGhhbiB0aGUgbG9nZ2VyLCBvciBiKSBwdXQgeW91ciBmdW5jdGlvbiBlbHNld2hlcmUuXG4gKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAvLyBleHBsaWNpdGx5IGNoZWNrIGZvciBicm93c2VyIGJ1bmRsZXMgYXMgdGhvc2UgY2FuIGJlIG9wdGltaXplZCBzdGF0aWNhbGx5XG4gIC8vIGJ5IHRlcnNlci9yb2xsdXAuXG4gIHJldHVybiAhaXNCcm93c2VyQnVuZGxlKCkgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xufVxuLyoqXG4gKiBSZXF1aXJlcyBhIG1vZHVsZSB3aGljaCBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBidW5kbGVyIG1pbmlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdCBUaGUgbW9kdWxlIHBhdGggdG8gcmVzb2x2ZVxuICovXG5cblxuZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gIHJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTtcbn1cbi8qKlxuICogSGVscGVyIGZvciBkeW5hbWljYWxseSBsb2FkaW5nIG1vZHVsZSB0aGF0IHNob3VsZCB3b3JrIHdpdGggbGlua2VkIGRlcGVuZGVuY2llcy5cbiAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgd2UgX3Nob3VsZF8gYmUgdXNpbmcgYHJlcXVpcmUocmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUsIHsgcGF0aHM6IFtjd2QoKV0gfSkpYFxuICogSG93ZXZlciBpdCdzIF9ub3QgcG9zc2libGVfIHRvIGRvIHRoYXQgd2l0aCBXZWJwYWNrLCBhcyBpdCBoYXMgdG8ga25vdyBhbGwgdGhlIGRlcGVuZGVuY2llcyBkdXJpbmdcbiAqIGJ1aWxkIHRpbWUuIGByZXF1aXJlLnJlc29sdmVgIGlzIGFsc28gbm90IGF2YWlsYWJsZSBpbiBhbnkgb3RoZXIgd2F5LCBzbyB3ZSBjYW5ub3QgY3JlYXRlLFxuICogYSBmYWtlIGhlbHBlciBsaWtlIHdlIGRvIHdpdGggYGR5bmFtaWNSZXF1aXJlYC5cbiAqXG4gKiBXZSBhbHdheXMgcHJlZmVyIHRvIHVzZSBsb2NhbCBwYWNrYWdlLCB0aHVzIHRoZSB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZWFybHkgZnJvbSBlYWNoIGB0cnkvY2F0Y2hgIGJsb2NrLlxuICogVGhhdCBpcyB0byBtaW1pYyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUucmVzb2x2ZWAgZXhhY3RseS5cbiAqXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBtb2R1bGUgbmFtZSB0byByZXF1aXJlXG4gKiBAcmV0dXJucyBwb3NzaWJseSByZXF1aXJlZCBtb2R1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvYWRNb2R1bGUobW9kdWxlTmFtZSkge1xuICB2YXIgbW9kO1xuXG4gIHRyeSB7XG4gICAgbW9kID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCBtb2R1bGVOYW1lKTtcbiAgfSBjYXRjaCAoZSkgey8vIG5vLWVtcHR5XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBfZHluYW1pY1JlcXVpcmUgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdwcm9jZXNzJyksXG4gICAgICAgIGN3ZCA9IF9keW5hbWljUmVxdWlyZS5jd2Q7XG5cbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIFwiXCIuY29uY2F0KGN3ZCgpLCBcIi9ub2RlX21vZHVsZXMvXCIpLmNvbmNhdChtb2R1bGVOYW1lKSk7XG4gIH0gY2F0Y2ggKGUpIHsvLyBuby1lbXB0eVxuICB9XG5cbiAgcmV0dXJuIG1vZDtcbn1cblxuZXhwb3J0IHsgZHluYW1pY1JlcXVpcmUsIGlzTm9kZUVudiwgbG9hZE1vZHVsZSB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},2362:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$Q\": function() { return /* binding */ markFunctionWrapped; },\n/* harmony export */   \"HK\": function() { return /* binding */ getOriginalFunction; },\n/* harmony export */   \"Jr\": function() { return /* binding */ dropUndefinedKeys; },\n/* harmony export */   \"Sh\": function() { return /* binding */ convertToPlainObject; },\n/* harmony export */   \"_j\": function() { return /* binding */ urlEncode; },\n/* harmony export */   \"hl\": function() { return /* binding */ fill; },\n/* harmony export */   \"xp\": function() { return /* binding */ addNonEnumerableProperty; },\n/* harmony export */   \"zf\": function() { return /* binding */ extractExceptionKeysForMessage; }\n/* harmony export */ });\n/* unused harmony export objectify */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(595);\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2684);\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7940);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\n\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  var original = source[name];\n  var wrapped = replacementFactory(original); // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {// This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\n\n\nfunction addNonEnumerableProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true\n  });\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\n\n\nfunction markFunctionWrapped(wrapped, original) {\n  var proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n\n\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\n\n\nfunction urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(object[key]));\n  }).join('&');\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\n\n\nfunction convertToPlainObject(value) {\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__/* .isError */ .VZ)(value)) {\n    return _objectSpread({\n      message: value.message,\n      name: value.name,\n      stack: value.stack\n    }, getOwnProperties(value));\n  } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__/* .isEvent */ .cO)(value)) {\n    var newObj = _objectSpread({\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget)\n    }, getOwnProperties(value));\n\n    if (typeof CustomEvent !== 'undefined' && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__/* .isInstanceOf */ .V9)(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n/** Creates a string representation of the target of an `Event` object */\n\n\nfunction serializeEventTarget(target) {\n  try {\n    return (0,_is_js__WEBPACK_IMPORTED_MODULE_1__/* .isElement */ .kK)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_2__/* .htmlTreeAsString */ .R)(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/** Filters out all but an object's own properties */\n\n\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    var extractedProps = {};\n\n    for (var property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n\n\nfunction extractExceptionKeysForMessage(exception) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n  var keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return (0,_string_js__WEBPACK_IMPORTED_MODULE_3__/* .truncate */ .$G)(keys[0], maxLength);\n  }\n\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n\n    if (serialized.length > maxLength) {\n      continue;\n    }\n\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n\n    return (0,_string_js__WEBPACK_IMPORTED_MODULE_3__/* .truncate */ .$G)(serialized, maxLength);\n  }\n\n  return '';\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\n\n\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  var memoizationMap = new Map(); // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__/* .isPlainObject */ .PO)(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    var memoVal = memoizationMap.get(inputValue);\n\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n\n    var returnValue = {}; // Store the mapping of this value in case we visit it again, in case of circular data\n\n    memoizationMap.set(inputValue, returnValue);\n\n    for (var _i = 0, _Object$keys = Object.keys(inputValue); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    var memoVal = memoizationMap.get(inputValue);\n\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n\n    var returnValue = []; // Store the mapping of this value in case we visit it again, in case of circular data\n\n    memoizationMap.set(inputValue, returnValue);\n    inputValue.forEach(function (item) {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n    return returnValue;\n  }\n\n  return inputValue;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\n\n\nfunction objectify(wat) {\n  var objectified;\n\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n\n    case isPrimitive(wat):\n      objectified = new wat.constructor(wat);\n      break;\n    // by process of elimination, at this point we know that `wat` must already be an object\n\n    default:\n      objectified = wat;\n      break;\n  }\n\n  return objectified;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2362\n")},1313:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$P\": function() { return /* binding */ getFunctionName; },\n/* harmony export */   \"Sq\": function() { return /* binding */ stackParserFromStackParserOptions; },\n/* harmony export */   \"pE\": function() { return /* binding */ createStackParser; }\n/* harmony export */ });\n/* unused harmony exports nodeStackLineParser, stripSentryFramesAndReverse */\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2982);\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\nvar STACKTRACE_LIMIT = 50;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\n\nfunction createStackParser() {\n  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {\n    parsers[_key] = arguments[_key];\n  }\n\n  var sortedParsers = parsers.sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (p) {\n    return p[1];\n  });\n  return function (stack) {\n    var skipFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var frames = [];\n\n    var _iterator = _createForOfIteratorHelper(stack.split('\\n').slice(skipFirst)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var line = _step.value;\n\n        var _iterator2 = _createForOfIteratorHelper(sortedParsers),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var parser = _step2.value;\n            var frame = parser(line);\n\n            if (frame) {\n              frames.push(frame);\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\n\n\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser.apply(void 0, (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_toConsumableArray_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(stackParser));\n  }\n\n  return stackParser;\n}\n/**\n * @hidden\n */\n\n\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n\n  var localStack = stack;\n  var firstFrameFunction = localStack[0].function || '';\n  var lastFrameFunction = localStack[localStack.length - 1].function || ''; // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  } // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n\n\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  } // The frame where the crash happened, should be the last entry in the array\n\n\n  return localStack.slice(0, STACKTRACE_LIMIT).map(function (frame) {\n    return _objectSpread(_objectSpread({}, frame), {}, {\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?'\n    });\n  }).reverse();\n}\n\nvar defaultFunctionName = '<anonymous>';\n/**\n * Safely extract function name from itself\n */\n\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\nfunction node(getModule) {\n  var FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  var FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/;\n  return function (line) {\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line\n      };\n    }\n\n    var lineMatch = line.match(FULL_MATCH);\n\n    if (!lineMatch) {\n      return undefined;\n    }\n\n    var object;\n    var method;\n    var functionName;\n    var typeName;\n    var methodName;\n\n    if (lineMatch[1]) {\n      functionName = lineMatch[1];\n      var methodStart = functionName.lastIndexOf('.');\n\n      if (functionName[methodStart - 1] === '.') {\n        methodStart--;\n      }\n\n      if (methodStart > 0) {\n        object = functionName.substr(0, methodStart);\n        method = functionName.substr(methodStart + 1);\n        var objectEnd = object.indexOf('.Module');\n\n        if (objectEnd > 0) {\n          functionName = functionName.substr(objectEnd + 1);\n          object = object.substr(0, objectEnd);\n        }\n      }\n\n      typeName = undefined;\n    }\n\n    if (method) {\n      typeName = object;\n      methodName = method;\n    }\n\n    if (method === '<anonymous>') {\n      methodName = undefined;\n      functionName = undefined;\n    }\n\n    if (functionName === undefined) {\n      methodName = methodName || '<anonymous>';\n      functionName = typeName ? \"\".concat(typeName, \".\").concat(methodName) : methodName;\n    }\n\n    var filename = _optionalChain([lineMatch, 'access', function (_) {\n      return _[2];\n    }, 'optionalAccess', function (_2) {\n      return _2.startsWith;\n    }, 'call', function (_3) {\n      return _3('file://');\n    }]) ? lineMatch[2].substr(7) : lineMatch[2];\n    var isNative = lineMatch[5] === 'native';\n    var isInternal = isNative || filename && !filename.startsWith('/') && !filename.startsWith('.') && filename.indexOf(':\\\\') !== 1; // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n\n    var in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');\n    return {\n      filename: filename,\n      module: _optionalChain([getModule, 'optionalCall', function (_4) {\n        return _4(filename);\n      }]),\n      function: functionName,\n      lineno: parseInt(lineMatch[3], 10) || undefined,\n      colno: parseInt(lineMatch[4], 10) || undefined,\n      in_app: in_app\n    };\n  };\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\n\n\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1313\n")},7940:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$G\": function() { return /* binding */ truncate; },\n/* harmony export */   \"nK\": function() { return /* binding */ safeJoin; },\n/* harmony export */   \"zC\": function() { return /* binding */ isMatchingPattern; }\n/* harmony export */ });\n/* unused harmony exports escapeStringForRegex, snipLine */\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2684);\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\n\nfunction truncate(str) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n\n  return str.length <= max ? str : \"\".concat(str.substr(0, max), \"...\");\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\n\nfunction snipLine(line, colno) {\n  var newLine = line;\n  var lineLength = newLine.length;\n\n  if (lineLength <= 150) {\n    return newLine;\n  }\n\n  if (colno > lineLength) {\n    colno = lineLength;\n  }\n\n  var start = Math.max(colno - 60, 0);\n\n  if (start < 5) {\n    start = 0;\n  }\n\n  var end = Math.min(start + 140, lineLength);\n\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n\n  if (start > 0) {\n    newLine = \"'{snip} \".concat(newLine);\n  }\n\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n\n\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  var output = [];\n\n  for (var i = 0; i < input.length; i++) {\n    var value = input[i];\n\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\n\n\nfunction isMatchingPattern(value, pattern) {\n  if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(value)) {\n    return false;\n  }\n\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__/* .isRegExp */ .Kj)(pattern)) {\n    return pattern.test(value);\n  }\n\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n\n  return false;\n}\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\n\n\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk0MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGlCQUFpQixNQUFNO0FBQ3ZCOztBQUVBO0FBQ0Esa0JBQWtCLEtBQUs7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLGtCQUFrQjtBQUNwQzs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxPQUFPLDBEQUFRO0FBQ2Y7QUFDQTs7QUFFQSxNQUFNLDBEQUFRO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N0cmluZy5qcz9iYzAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU3RyaW5nLCBpc1JlZ0V4cCB9IGZyb20gJy4vaXMuanMnO1xuLyoqXG4gKiBUcnVuY2F0ZXMgZ2l2ZW4gc3RyaW5nIHRvIHRoZSBtYXhpbXVtIGNoYXJhY3RlcnMgY291bnRcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nICgwID0gdW5saW1pdGVkKVxuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuXG5mdW5jdGlvbiB0cnVuY2F0ZShzdHIpIHtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgbWF4ID09PSAwKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHJldHVybiBzdHIubGVuZ3RoIDw9IG1heCA/IHN0ciA6IFwiXCIuY29uY2F0KHN0ci5zdWJzdHIoMCwgbWF4KSwgXCIuLi5cIik7XG59XG4vKipcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGp1c3QgYHRyaW1fbGluZWAgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnkvYmxvYi9tYXN0ZXIvc3JjL3NlbnRyeS9sYW5nL2phdmFzY3JpcHQvcHJvY2Vzc29yLnB5I0w2N1xuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cblxuXG5mdW5jdGlvbiBzbmlwTGluZShsaW5lLCBjb2xubykge1xuICB2YXIgbmV3TGluZSA9IGxpbmU7XG4gIHZhciBsaW5lTGVuZ3RoID0gbmV3TGluZS5sZW5ndGg7XG5cbiAgaWYgKGxpbmVMZW5ndGggPD0gMTUwKSB7XG4gICAgcmV0dXJuIG5ld0xpbmU7XG4gIH1cblxuICBpZiAoY29sbm8gPiBsaW5lTGVuZ3RoKSB7XG4gICAgY29sbm8gPSBsaW5lTGVuZ3RoO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgoY29sbm8gLSA2MCwgMCk7XG5cbiAgaWYgKHN0YXJ0IDwgNSkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIHZhciBlbmQgPSBNYXRoLm1pbihzdGFydCArIDE0MCwgbGluZUxlbmd0aCk7XG5cbiAgaWYgKGVuZCA+IGxpbmVMZW5ndGggLSA1KSB7XG4gICAgZW5kID0gbGluZUxlbmd0aDtcbiAgfVxuXG4gIGlmIChlbmQgPT09IGxpbmVMZW5ndGgpIHtcbiAgICBzdGFydCA9IE1hdGgubWF4KGVuZCAtIDE0MCwgMCk7XG4gIH1cblxuICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcblxuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgbmV3TGluZSA9IFwiJ3tzbmlwfSBcIi5jb25jYXQobmV3TGluZSk7XG4gIH1cblxuICBpZiAoZW5kIDwgbGluZUxlbmd0aCkge1xuICAgIG5ld0xpbmUgKz0gJyB7c25pcH0nO1xuICB9XG5cbiAgcmV0dXJuIG5ld0xpbmU7XG59XG4vKipcbiAqIEpvaW4gdmFsdWVzIGluIGFycmF5XG4gKiBAcGFyYW0gaW5wdXQgYXJyYXkgb2YgdmFsdWVzIHRvIGJlIGpvaW5lZCB0b2dldGhlclxuICogQHBhcmFtIGRlbGltaXRlciBzdHJpbmcgdG8gYmUgcGxhY2VkIGluLWJldHdlZW4gdmFsdWVzXG4gKiBAcmV0dXJucyBKb2luZWQgdmFsdWVzXG4gKi9cblxuXG5mdW5jdGlvbiBzYWZlSm9pbihpbnB1dCwgZGVsaW1pdGVyKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuXG4gICAgdHJ5IHtcbiAgICAgIG91dHB1dC5wdXNoKFN0cmluZyh2YWx1ZSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG91dHB1dC5wdXNoKCdbdmFsdWUgY2Fubm90IGJlIHNlcmlhbGl6ZWRdJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dC5qb2luKGRlbGltaXRlcik7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgbWF0Y2hlcyBhIHJlZ2V4IG9yIGluY2x1ZGVzIHRoZSBzdHJpbmdcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHZhbHVlIHRvIGJlIGNoZWNrZWQgYWdhaW5zdFxuICogQHBhcmFtIHBhdHRlcm4gRWl0aGVyIGEgcmVnZXggb3IgYSBzdHJpbmcgdGhhdCBtdXN0IGJlIGNvbnRhaW5lZCBpbiB2YWx1ZVxuICovXG5cblxuZnVuY3Rpb24gaXNNYXRjaGluZ1BhdHRlcm4odmFsdWUsIHBhdHRlcm4pIHtcbiAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihwYXR0ZXJuKSAhPT0gLTE7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nLCBlc2NhcGUgY2hhcmFjdGVycyB3aGljaCBoYXZlIG1lYW5pbmcgaW4gdGhlIHJlZ2V4IGdyYW1tYXIsIHN1Y2ggdGhhdCB0aGUgcmVzdWx0IGlzIHNhZmUgdG8gZmVlZCB0b1xuICogYG5ldyBSZWdFeHAoKWAuXG4gKlxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cC4gVmVuZG9yZWQgdG8gYSkgcmVkdWNlIHRoZSBzaXplIGJ5IHNraXBwaW5nIHRoZSBydW50aW1lXG4gKiB0eXBlLWNoZWNraW5nLCBhbmQgYikgZW5zdXJlIGl0IGdldHMgZG93bi1jb21waWxlZCBmb3Igb2xkIHZlcnNpb25zIG9mIE5vZGUgKHRoZSBwdWJsaXNoZWQgcGFja2FnZSBvbmx5IHN1cHBvcnRzIE5vZGVcbiAqIDEyKykuXG4gKlxuICogQHBhcmFtIHJlZ2V4U3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlXG4gKiBAcmV0dXJucyBBbiB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcgd2l0aCBhbGwgc3BlY2lhbCByZWdleCBjaGFyYWN0ZXJzIGVzY2FwZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZ0ZvclJlZ2V4KHJlZ2V4U3RyaW5nKSB7XG4gIC8vIGVzY2FwZSB0aGUgaHlwaGVuIHNlcGFyYXRlbHkgc28gd2UgY2FuIGFsc28gcmVwbGFjZSBpdCB3aXRoIGEgdW5pY29kZSBsaXRlcmFsIGh5cGhlbiwgdG8gYXZvaWQgdGhlIHByb2JsZW1zXG4gIC8vIGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2lzc3Vlcy8yMC5cbiAgcmV0dXJuIHJlZ2V4U3RyaW5nLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJykucmVwbGFjZSgvLS9nLCAnXFxcXHgyZCcpO1xufVxuXG5leHBvcnQgeyBlc2NhcGVTdHJpbmdGb3JSZWdleCwgaXNNYXRjaGluZ1BhdHRlcm4sIHNhZmVKb2luLCBzbmlwTGluZSwgdHJ1bmNhdGUgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7940\n")},4712:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ak\": function() { return /* binding */ supportsFetch; },\n/* harmony export */   \"Bf\": function() { return /* binding */ supportsHistory; },\n/* harmony export */   \"Du\": function() { return /* binding */ isNativeFetch; },\n/* harmony export */   \"t$\": function() { return /* binding */ supportsNativeFetch; }\n/* harmony export */ });\n/* unused harmony exports supportsDOMError, supportsDOMException, supportsErrorEvent, supportsReferrerPolicy, supportsReportingObserver */\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4105);\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(245);\n\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsFetch() {\n  if (!('fetch' in (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n\n\nfunction isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\n\n\nfunction supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  var global = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)(); // Fast path to avoid DOM I/O\n\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  } // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n\n\n  var result = false;\n  var doc = global.document;\n\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_1__/* .logger.warn */ .kg.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in getGlobalObject();\n}\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  var global = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)();\n  var chrome = global.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4712\n")},5370:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "$2": function() { return /* binding */ rejectedSyncPromise; },\n/* harmony export */   "WD": function() { return /* binding */ resolvedSyncPromise; },\n/* harmony export */   "cW": function() { return /* binding */ SyncPromise; }\n/* harmony export */ });\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5671);\n/* harmony import */ var _Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3144);\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2684);\n\n\n\n/** SyncPromise internal states */\n\nvar States;\n\n(function (States) {\n  /** Pending */\n  var PENDING = 0;\n  States[States["PENDING"] = PENDING] = "PENDING";\n  /** Resolved / OK */\n\n  var RESOLVED = 1;\n  States[States["RESOLVED"] = RESOLVED] = "RESOLVED";\n  /** Rejected / Error */\n\n  var REJECTED = 2;\n  States[States["REJECTED"] = REJECTED] = "REJECTED";\n})(States || (States = {})); // Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\n\n\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(function (resolve) {\n    resolve(value);\n  });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\n\n\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise(function (_, reject) {\n    reject(reason);\n  });\n}\n/**\n * Thenable class that behaves like a Promise and follows it\'s interface\n * but is not async internally\n */\n\n\nvar SyncPromise = /*#__PURE__*/function () {\n  function SyncPromise(executor) {\n    (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, SyncPromise);\n\n    ;\n\n    SyncPromise.prototype.__init.call(this);\n\n    SyncPromise.prototype.__init2.call(this);\n\n    SyncPromise.prototype.__init3.call(this);\n\n    SyncPromise.prototype.__init4.call(this);\n\n    SyncPromise.prototype.__init5.call(this);\n\n    SyncPromise.prototype.__init6.call(this);\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /** JSDoc */\n\n\n  (0,_Users_enost_Documents_GitHub_j40_cejst_2_client_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(SyncPromise, [{\n    key: "__init",\n    value: function __init() {\n      this._state = States.PENDING;\n    }\n  }, {\n    key: "__init2",\n    value: function __init2() {\n      this._handlers = [];\n    }\n  }, {\n    key: "then",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n\n      return new SyncPromise(function (resolve, reject) {\n        _this._handlers.push([false, function (result) {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }, function (reason) {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }]);\n\n        _this._executeHandlers();\n      });\n    }\n    /** JSDoc */\n\n  }, {\n    key: "catch",\n    value: function _catch(onrejected) {\n      return this.then(function (val) {\n        return val;\n      }, onrejected);\n    }\n    /** JSDoc */\n\n  }, {\n    key: "finally",\n    value: function _finally(onfinally) {\n      var _this2 = this;\n\n      return new SyncPromise(function (resolve, reject) {\n        var val;\n        var isRejected;\n        return _this2.then(function (value) {\n          isRejected = false;\n          val = value;\n\n          if (onfinally) {\n            onfinally();\n          }\n        }, function (reason) {\n          isRejected = true;\n          val = reason;\n\n          if (onfinally) {\n            onfinally();\n          }\n        }).then(function () {\n          if (isRejected) {\n            reject(val);\n            return;\n          }\n\n          resolve(val);\n        });\n      });\n    }\n    /** JSDoc */\n\n  }, {\n    key: "__init3",\n    value: function __init3() {\n      var _this3 = this;\n\n      this._resolve = function (value) {\n        _this3._setResult(States.RESOLVED, value);\n      };\n    }\n    /** JSDoc */\n\n  }, {\n    key: "__init4",\n    value: function __init4() {\n      var _this4 = this;\n\n      this._reject = function (reason) {\n        _this4._setResult(States.REJECTED, reason);\n      };\n    }\n    /** JSDoc */\n\n  }, {\n    key: "__init5",\n    value: function __init5() {\n      var _this5 = this;\n\n      this._setResult = function (state, value) {\n        if (_this5._state !== States.PENDING) {\n          return;\n        }\n\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__/* .isThenable */ .J8)(value)) {\n          void value.then(_this5._resolve, _this5._reject);\n          return;\n        }\n\n        _this5._state = state;\n        _this5._value = value;\n\n        _this5._executeHandlers();\n      };\n    }\n    /** JSDoc */\n\n  }, {\n    key: "__init6",\n    value: function __init6() {\n      var _this6 = this;\n\n      this._executeHandlers = function () {\n        if (_this6._state === States.PENDING) {\n          return;\n        }\n\n        var cachedHandlers = _this6._handlers.slice();\n\n        _this6._handlers = [];\n        cachedHandlers.forEach(function (handler) {\n          if (handler[0]) {\n            return;\n          }\n\n          if (_this6._state === States.RESOLVED) {\n            handler[1](_this6._value);\n          }\n\n          if (_this6._state === States.REJECTED) {\n            handler[2](_this6._value);\n          }\n\n          handler[0] = true;\n        });\n      };\n    }\n  }]);\n\n  return SyncPromise;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5370\n')},5153:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z1\": function() { return /* binding */ browserPerformanceTimeOrigin; },\n/* harmony export */   \"_I\": function() { return /* binding */ timestampWithMs; },\n/* harmony export */   \"ph\": function() { return /* binding */ timestampInSeconds; },\n/* harmony export */   \"yW\": function() { return /* binding */ dateTimestampInSeconds; }\n/* harmony export */ });\n/* unused harmony exports _browserPerformanceTimeOriginMode, usingPerformanceAPI */\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4105);\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\n\nvar dateTimestampSource = {\n  nowSeconds: function nowSeconds() {\n    return Date.now() / 1000;\n  }\n};\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\n\nfunction getBrowserPerformance() {\n  var _getGlobalObject = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)(),\n      performance = _getGlobalObject.performance;\n\n  if (!performance || !performance.now) {\n    return undefined;\n  } // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n\n\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function now() {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\n\n\nfunction getNodePerformance() {\n  try {\n    var perfHooks = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__/* .dynamicRequire */ .l$)(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\n\n\nvar platformPerformance = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__/* .isNodeEnv */ .KV)() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function nowSeconds() {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\n\nvar dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\n\nvar timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource); // Re-exported with an old name for backwards-compatibility.\n\nvar timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\n\nvar usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\n\nvar _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\n\n\nvar browserPerformanceTimeOrigin = function () {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n  var _getGlobalObject2 = (0,_global_js__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalObject */ .R)(),\n      performance = _getGlobalObject2.performance;\n\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  var threshold = 3600 * 1000;\n  var performanceNow = performance.now();\n  var dateNow = Date.now(); // if timeOrigin isn't available set delta to threshold so it isn't used\n\n  var timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n  var timeOriginIsReliable = timeOriginDelta < threshold; // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n\n  var navigationStart = performance.timing && performance.timing.navigationStart;\n  var hasNavigationStart = typeof navigationStart === 'number'; // if navigationStart isn't available set delta to threshold so it isn't used\n\n  var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  var navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  } // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n\n\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5153\n")},9771:function(__unused_webpack_module,exports){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\n\nfunction startsWith(string, target, position) {\n  var length = string.length;\n  position = position == null ? 0 : position;\n\n  if (position < 0) {\n    position = 0;\n  } else if (position > length) {\n    position = length;\n  }\n\n  target = "".concat(target);\n  return string.slice(position, position + target.length) == target;\n}\n\nfunction getBrowserLang() {\n  if (typeof window === "undefined") {\n    return null;\n  }\n\n  var lang = window.navigator.languages && window.navigator.languages[0] || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage || window.navigator.systemLanguage || null;\n  return lang;\n}\n\nfunction normalizeCode(code) {\n  return code.toLowerCase().replace(/-/, "_");\n}\n\nfunction getPreferredLanguage(options) {\n  if (!options) {\n    return getBrowserLang();\n  }\n\n  var languages = options.languages,\n      fallback = options.fallback;\n\n  if (!options.languages) {\n    return fallback;\n  } // some browsers report language as en-US instead of en_US\n\n\n  var browserLanguage = normalizeCode(getBrowserLang());\n\n  if (!browserLanguage) {\n    return fallback;\n  }\n\n  var match = languages.filter(function (lang) {\n    return normalizeCode(lang) === browserLanguage;\n  });\n\n  if (match.length > 0) {\n    return match[0] || fallback;\n  } // en == en_US\n\n\n  var matchCodeOnly = languages.filter(function (lang) {\n    return startsWith(browserLanguage, lang);\n  });\n  return matchCodeOnly[0] || fallback;\n}\n\nvar _default = getPreferredLanguage;\nexports["default"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc3MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTs7QUFFZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7OztBQUdKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9icm93c2VyLWxhbmcvZGlzdC9pbmRleC5qcz9iNmY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsID8gMCA6IHBvc2l0aW9uO1xuXG4gIGlmIChwb3NpdGlvbiA8IDApIHtcbiAgICBwb3NpdGlvbiA9IDA7XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPiBsZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgfVxuXG4gIHRhcmdldCA9IFwiXCIuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyTGFuZygpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsYW5nID0gd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZXMgJiYgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZXNbMF0gfHwgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSB8fCB3aW5kb3cubmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJMYW5ndWFnZSB8fCB3aW5kb3cubmF2aWdhdG9yLnN5c3RlbUxhbmd1YWdlIHx8IG51bGw7XG4gIHJldHVybiBsYW5nO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tLywgXCJfXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRQcmVmZXJyZWRMYW5ndWFnZShvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCcm93c2VyTGFuZygpO1xuICB9XG5cbiAgdmFyIGxhbmd1YWdlcyA9IG9wdGlvbnMubGFuZ3VhZ2VzLFxuICAgICAgZmFsbGJhY2sgPSBvcHRpb25zLmZhbGxiYWNrO1xuXG4gIGlmICghb3B0aW9ucy5sYW5ndWFnZXMpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH0gLy8gc29tZSBicm93c2VycyByZXBvcnQgbGFuZ3VhZ2UgYXMgZW4tVVMgaW5zdGVhZCBvZiBlbl9VU1xuXG5cbiAgdmFyIGJyb3dzZXJMYW5ndWFnZSA9IG5vcm1hbGl6ZUNvZGUoZ2V0QnJvd3NlckxhbmcoKSk7XG5cbiAgaWYgKCFicm93c2VyTGFuZ3VhZ2UpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSBsYW5ndWFnZXMuZmlsdGVyKGZ1bmN0aW9uIChsYW5nKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUNvZGUobGFuZykgPT09IGJyb3dzZXJMYW5ndWFnZTtcbiAgfSk7XG5cbiAgaWYgKG1hdGNoLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gfHwgZmFsbGJhY2s7XG4gIH0gLy8gZW4gPT0gZW5fVVNcblxuXG4gIHZhciBtYXRjaENvZGVPbmx5ID0gbGFuZ3VhZ2VzLmZpbHRlcihmdW5jdGlvbiAobGFuZykge1xuICAgIHJldHVybiBzdGFydHNXaXRoKGJyb3dzZXJMYW5ndWFnZSwgbGFuZyk7XG4gIH0pO1xuICByZXR1cm4gbWF0Y2hDb2RlT25seVswXSB8fCBmYWxsYmFjaztcbn1cblxudmFyIF9kZWZhdWx0ID0gZ2V0UHJlZmVycmVkTGFuZ3VhZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9771\n')},6494:function(module){"use strict";eval("\n\nmodule.exports = Object.assign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL2dhdHNieS9kaXN0L2ludGVybmFsLXBsdWdpbnMvYnVuZGxlLW9wdGltaXNhdGlvbnMvcG9seWZpbGxzL29iamVjdC1hc3NpZ24uanM/ZWJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6494\n")},5706:function(module,__unused_webpack_exports,__webpack_require__){"use strict";eval("\n\nvar reactIs = __webpack_require__(8812);\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcwNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsSUFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcz83MzFjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG5cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5706\n")},165:function(__unused_webpack_module,exports){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = "function" === typeof Symbol && Symbol.for,\n    c = b ? Symbol.for("react.element") : 60103,\n    d = b ? Symbol.for("react.portal") : 60106,\n    e = b ? Symbol.for("react.fragment") : 60107,\n    f = b ? Symbol.for("react.strict_mode") : 60108,\n    g = b ? Symbol.for("react.profiler") : 60114,\n    h = b ? Symbol.for("react.provider") : 60109,\n    k = b ? Symbol.for("react.context") : 60110,\n    l = b ? Symbol.for("react.async_mode") : 60111,\n    m = b ? Symbol.for("react.concurrent_mode") : 60111,\n    n = b ? Symbol.for("react.forward_ref") : 60112,\n    p = b ? Symbol.for("react.suspense") : 60113,\n    q = b ? Symbol.for("react.suspense_list") : 60120,\n    r = b ? Symbol.for("react.memo") : 60115,\n    t = b ? Symbol.for("react.lazy") : 60116,\n    v = b ? Symbol.for("react.block") : 60121,\n    w = b ? Symbol.for("react.fundamental") : 60117,\n    x = b ? Symbol.for("react.responder") : 60118,\n    y = b ? Symbol.for("react.scope") : 60119;\n\nfunction z(a) {\n  if ("object" === typeof a && null !== a) {\n    var u = a.$$typeof;\n\n    switch (u) {\n      case c:\n        switch (a = a.type, a) {\n          case l:\n          case m:\n          case e:\n          case g:\n          case f:\n          case p:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case n:\n              case t:\n              case r:\n              case h:\n                return a;\n\n              default:\n                return u;\n            }\n\n        }\n\n      case d:\n        return u;\n    }\n  }\n}\n\nfunction A(a) {\n  return z(a) === m;\n}\n\nexports.AsyncMode = l;\nexports.ConcurrentMode = m;\nexports.ContextConsumer = k;\nexports.ContextProvider = h;\nexports.Element = c;\nexports.ForwardRef = n;\nexports.Fragment = e;\nexports.Lazy = t;\nexports.Memo = r;\nexports.Portal = d;\nexports.Profiler = g;\nexports.StrictMode = f;\nexports.Suspense = p;\n\nexports.isAsyncMode = function (a) {\n  return A(a) || z(a) === l;\n};\n\nexports.isConcurrentMode = A;\n\nexports.isContextConsumer = function (a) {\n  return z(a) === k;\n};\n\nexports.isContextProvider = function (a) {\n  return z(a) === h;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === c;\n};\n\nexports.isForwardRef = function (a) {\n  return z(a) === n;\n};\n\nexports.isFragment = function (a) {\n  return z(a) === e;\n};\n\nexports.isLazy = function (a) {\n  return z(a) === t;\n};\n\nexports.isMemo = function (a) {\n  return z(a) === r;\n};\n\nexports.isPortal = function (a) {\n  return z(a) === d;\n};\n\nexports.isProfiler = function (a) {\n  return z(a) === g;\n};\n\nexports.isStrictMode = function (a) {\n  return z(a) === f;\n};\n\nexports.isSuspense = function (a) {\n  return z(a) === p;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\n\nexports.typeOf = z;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLGVBQWU7QUFDZixrQkFBa0I7QUFDbEIsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixZQUFZO0FBQ1osY0FBYztBQUNkLGdCQUFnQjtBQUNoQixrQkFBa0I7QUFDbEIsZ0JBQWdCOztBQUVoQixtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQSx3QkFBd0I7O0FBRXhCLHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanM/YWQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGIgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLmZvcixcbiAgICBjID0gYiA/IFN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpIDogNjAxMDMsXG4gICAgZCA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpIDogNjAxMDYsXG4gICAgZSA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikgOiA2MDEwNyxcbiAgICBmID0gYiA/IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSA6IDYwMTA4LFxuICAgIGcgPSBiID8gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpIDogNjAxMTQsXG4gICAgaCA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIikgOiA2MDEwOSxcbiAgICBrID0gYiA/IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpIDogNjAxMTAsXG4gICAgbCA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKSA6IDYwMTExLFxuICAgIG0gPSBiID8gU3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKSA6IDYwMTExLFxuICAgIG4gPSBiID8gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpIDogNjAxMTIsXG4gICAgcCA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikgOiA2MDExMyxcbiAgICBxID0gYiA/IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpIDogNjAxMjAsXG4gICAgciA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSA6IDYwMTE1LFxuICAgIHQgPSBiID8gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIikgOiA2MDExNixcbiAgICB2ID0gYiA/IFN5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKSA6IDYwMTIxLFxuICAgIHcgPSBiID8gU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpIDogNjAxMTcsXG4gICAgeCA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpIDogNjAxMTgsXG4gICAgeSA9IGIgPyBTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIikgOiA2MDExOTtcblxuZnVuY3Rpb24geihhKSB7XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgYSAmJiBudWxsICE9PSBhKSB7XG4gICAgdmFyIHUgPSBhLiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICh1KSB7XG4gICAgICBjYXNlIGM6XG4gICAgICAgIHN3aXRjaCAoYSA9IGEudHlwZSwgYSkge1xuICAgICAgICAgIGNhc2UgbDpcbiAgICAgICAgICBjYXNlIG06XG4gICAgICAgICAgY2FzZSBlOlxuICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICBjYXNlIGY6XG4gICAgICAgICAgY2FzZSBwOlxuICAgICAgICAgICAgcmV0dXJuIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc3dpdGNoIChhID0gYSAmJiBhLiQkdHlwZW9mLCBhKSB7XG4gICAgICAgICAgICAgIGNhc2UgazpcbiAgICAgICAgICAgICAgY2FzZSBuOlxuICAgICAgICAgICAgICBjYXNlIHQ6XG4gICAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgY2FzZSBoOlxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIGQ6XG4gICAgICAgIHJldHVybiB1O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBBKGEpIHtcbiAgcmV0dXJuIHooYSkgPT09IG07XG59XG5cbmV4cG9ydHMuQXN5bmNNb2RlID0gbDtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBtO1xuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBrO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBoO1xuZXhwb3J0cy5FbGVtZW50ID0gYztcbmV4cG9ydHMuRm9yd2FyZFJlZiA9IG47XG5leHBvcnRzLkZyYWdtZW50ID0gZTtcbmV4cG9ydHMuTGF6eSA9IHQ7XG5leHBvcnRzLk1lbW8gPSByO1xuZXhwb3J0cy5Qb3J0YWwgPSBkO1xuZXhwb3J0cy5Qcm9maWxlciA9IGc7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBmO1xuZXhwb3J0cy5TdXNwZW5zZSA9IHA7XG5cbmV4cG9ydHMuaXNBc3luY01vZGUgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gQShhKSB8fCB6KGEpID09PSBsO1xufTtcblxuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gQTtcblxuZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiB6KGEpID09PSBrO1xufTtcblxuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiB6KGEpID09PSBoO1xufTtcblxuZXhwb3J0cy5pc0VsZW1lbnQgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIGEgJiYgbnVsbCAhPT0gYSAmJiBhLiQkdHlwZW9mID09PSBjO1xufTtcblxuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4geihhKSA9PT0gbjtcbn07XG5cbmV4cG9ydHMuaXNGcmFnbWVudCA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiB6KGEpID09PSBlO1xufTtcblxuZXhwb3J0cy5pc0xhenkgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4geihhKSA9PT0gdDtcbn07XG5cbmV4cG9ydHMuaXNNZW1vID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIHooYSkgPT09IHI7XG59O1xuXG5leHBvcnRzLmlzUG9ydGFsID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIHooYSkgPT09IGQ7XG59O1xuXG5leHBvcnRzLmlzUHJvZmlsZXIgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4geihhKSA9PT0gZztcbn07XG5cbmV4cG9ydHMuaXNTdHJpY3RNb2RlID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIHooYSkgPT09IGY7XG59O1xuXG5leHBvcnRzLmlzU3VzcGVuc2UgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4geihhKSA9PT0gcDtcbn07XG5cbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBhIHx8IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGEgfHwgYSA9PT0gZSB8fCBhID09PSBtIHx8IGEgPT09IGcgfHwgYSA9PT0gZiB8fCBhID09PSBwIHx8IGEgPT09IHEgfHwgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGEgJiYgbnVsbCAhPT0gYSAmJiAoYS4kJHR5cGVvZiA9PT0gdCB8fCBhLiQkdHlwZW9mID09PSByIHx8IGEuJCR0eXBlb2YgPT09IGggfHwgYS4kJHR5cGVvZiA9PT0gayB8fCBhLiQkdHlwZW9mID09PSBuIHx8IGEuJCR0eXBlb2YgPT09IHcgfHwgYS4kJHR5cGVvZiA9PT0geCB8fCBhLiQkdHlwZW9mID09PSB5IHx8IGEuJCR0eXBlb2YgPT09IHYpO1xufTtcblxuZXhwb3J0cy50eXBlT2YgPSB6OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///165\n')},8812:function(module,__unused_webpack_exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(165);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODgxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLElBQXFDO0FBQ3pDLEVBQUUseUNBQTREO0FBQzlELEVBQUUsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzM5ODEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8812\n")},9108:function(module){"use strict";eval("\n\nfunction shallowEqualObjects(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (!objA || !objB) {\n    return false;\n  }\n\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n  var len = aKeys.length;\n\n  if (bKeys.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqualObjects;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEwOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvc2hhbGxvdy1lcXVhbC9vYmplY3RzL2luZGV4LmpzPzM2MTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWxPYmplY3RzKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghb2JqQSB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgdmFyIGxlbiA9IGFLZXlzLmxlbmd0aDtcblxuICBpZiAoYktleXMubGVuZ3RoICE9PSBsZW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGFLZXlzW2ldO1xuXG4gICAgaWYgKG9iakFba2V5XSAhPT0gb2JqQltrZXldIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbE9iamVjdHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9108\n")},8037:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('var __webpack_unused_export__;\n\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\n__webpack_unused_export__ = true;\nexports.dq = withPrefix;\nexports.mc = withAssetPrefix;\nexports.c4 = exports.ZP = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(7316));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(1506));\n\nvar _inheritsLoose2 = _interopRequireDefault(__webpack_require__(5354));\n\nvar _extends2 = _interopRequireDefault(__webpack_require__(7154));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(5697));\n\nvar _react = _interopRequireDefault(__webpack_require__(7294));\n\nvar _reachRouter = __webpack_require__(9499);\n\nvar _utils = __webpack_require__(2098);\n\nvar _parsePath = __webpack_require__(1752);\n\nexports.cP = _parsePath.parsePath;\nvar _excluded = ["to", "getProps", "onClick", "onMouseEnter", "activeClassName", "activeStyle", "innerRef", "partiallyActive", "state", "replace", "_location"];\n\nvar isAbsolutePath = function isAbsolutePath(path) {\n  return path === null || path === void 0 ? void 0 : path.startsWith("/");\n};\n\nfunction withPrefix(path, prefix) {\n  var _ref, _prefix;\n\n  if (prefix === void 0) {\n    prefix = getGlobalBasePrefix();\n  }\n\n  if (!isLocalLink(path)) {\n    return path;\n  }\n\n  if (path.startsWith("./") || path.startsWith("../")) {\n    return path;\n  }\n\n  var base = (_ref = (_prefix = prefix) !== null && _prefix !== void 0 ? _prefix : getGlobalPathPrefix()) !== null && _ref !== void 0 ? _ref : "/";\n  return "" + (base !== null && base !== void 0 && base.endsWith("/") ? base.slice(0, -1) : base) + (path.startsWith("/") ? path : "/" + path);\n} // These global values are wrapped in typeof clauses to ensure the values exist.\n// This is especially problematic in unit testing of this component.\n\n\nvar getGlobalPathPrefix = function getGlobalPathPrefix() {\n  return  false ? 0 : "";\n};\n\nvar getGlobalBasePrefix = function getGlobalBasePrefix() {\n  return  false ? 0 : "";\n};\n\nvar isLocalLink = function isLocalLink(path) {\n  return path && !path.startsWith("http://") && !path.startsWith("https://") && !path.startsWith("//");\n};\n\nfunction withAssetPrefix(path) {\n  return withPrefix(path, getGlobalPathPrefix());\n}\n\nfunction absolutify(path, current) {\n  // If it\'s already absolute, return as-is\n  if (isAbsolutePath(path)) {\n    return path;\n  }\n\n  return (0, _utils.resolve)(path, current);\n}\n\nvar rewriteLinkPath = function rewriteLinkPath(path, relativeTo) {\n  if (typeof path === "number") {\n    return path;\n  }\n\n  if (!isLocalLink(path)) {\n    return path;\n  }\n\n  return isAbsolutePath(path) ? withPrefix(path) : absolutify(path, relativeTo);\n};\n\nvar NavLinkPropTypes = {\n  activeClassName: _propTypes.default.string,\n  activeStyle: _propTypes.default.object,\n  partiallyActive: _propTypes.default.bool\n}; // Set up IntersectionObserver\n\nvar createIntersectionObserver = function createIntersectionObserver(el, cb) {\n  var io = new window.IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn\'t currently support isIntersecting, so also test for  an intersectionRatio > 0\n        if (entry.isIntersecting || entry.intersectionRatio > 0) {\n          io.unobserve(el);\n          io.disconnect();\n          cb();\n        }\n      }\n    });\n  }); // Add element to the observer\n\n  io.observe(el);\n  return {\n    instance: io,\n    el: el\n  };\n};\n\nfunction GatsbyLinkLocationWrapper(props) {\n  return /*#__PURE__*/_react.default.createElement(_reachRouter.Location, null, function (_ref2) {\n    var location = _ref2.location;\n    return /*#__PURE__*/_react.default.createElement(GatsbyLink, (0, _extends2.default)({}, props, {\n      _location: location\n    }));\n  });\n}\n\nvar GatsbyLink = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(GatsbyLink, _React$Component);\n\n  function GatsbyLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // Default to no support for IntersectionObserver\n\n    _this.defaultGetProps = function (_ref3) {\n      var isPartiallyCurrent = _ref3.isPartiallyCurrent,\n          isCurrent = _ref3.isCurrent;\n\n      if (_this.props.partiallyActive ? isPartiallyCurrent : isCurrent) {\n        return {\n          className: [_this.props.className, _this.props.activeClassName].filter(Boolean).join(" "),\n          style: (0, _extends2.default)({}, _this.props.style, _this.props.activeStyle)\n        };\n      }\n\n      return null;\n    };\n\n    var IOSupported = false;\n\n    if (typeof window !== "undefined" && window.IntersectionObserver) {\n      IOSupported = true;\n    }\n\n    _this.state = {\n      IOSupported: IOSupported\n    };\n    _this.handleRef = _this.handleRef.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  var _proto = GatsbyLink.prototype;\n\n  _proto._prefetch = function _prefetch() {\n    var currentPath = window.location.pathname; // reach router should have the correct state\n\n    if (this.props._location && this.props._location.pathname) {\n      currentPath = this.props._location.pathname;\n    }\n\n    var rewrittenPath = rewriteLinkPath(this.props.to, currentPath);\n    var newPathName = (0, _parsePath.parsePath)(rewrittenPath).pathname; // Prefech is used to speed up next navigations. When you use it on the current navigation,\n    // there could be a race-condition where Chrome uses the stale data instead of waiting for the network to complete\n\n    if (currentPath !== newPathName) {\n      ___loader.enqueue(newPathName);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // Preserve non IO functionality if no support\n    if (this.props.to !== prevProps.to && !this.state.IOSupported) {\n      this._prefetch();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Preserve non IO functionality if no support\n    if (!this.state.IOSupported) {\n      this._prefetch();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (!this.io) {\n      return;\n    }\n\n    var _this$io = this.io,\n        instance = _this$io.instance,\n        el = _this$io.el;\n    instance.unobserve(el);\n    instance.disconnect();\n  };\n\n  _proto.handleRef = function handleRef(ref) {\n    var _this2 = this;\n\n    if (this.props.innerRef && this.props.innerRef.hasOwnProperty("current")) {\n      this.props.innerRef.current = ref;\n    } else if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      this.io = createIntersectionObserver(ref, function () {\n        _this2._prefetch();\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props = this.props,\n        to = _this$props.to,\n        _this$props$getProps = _this$props.getProps,\n        getProps = _this$props$getProps === void 0 ? this.defaultGetProps : _this$props$getProps,\n        _onClick = _this$props.onClick,\n        _onMouseEnter = _this$props.onMouseEnter,\n        $activeClassName = _this$props.activeClassName,\n        $activeStyle = _this$props.activeStyle,\n        $innerRef = _this$props.innerRef,\n        partiallyActive = _this$props.partiallyActive,\n        state = _this$props.state,\n        replace = _this$props.replace,\n        _location = _this$props._location,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, _excluded);\n\n    if (false) {}\n\n    var prefixedTo = rewriteLinkPath(to, _location.pathname);\n\n    if (!isLocalLink(prefixedTo)) {\n      return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({\n        href: prefixedTo\n      }, rest));\n    }\n\n    return /*#__PURE__*/_react.default.createElement(_reachRouter.Link, (0, _extends2.default)({\n      to: prefixedTo,\n      state: state,\n      getProps: getProps,\n      innerRef: this.handleRef,\n      onMouseEnter: function onMouseEnter(e) {\n        if (_onMouseEnter) {\n          _onMouseEnter(e);\n        }\n\n        ___loader.hovering((0, _parsePath.parsePath)(prefixedTo).pathname);\n      },\n      onClick: function onClick(e) {\n        if (_onClick) {\n          _onClick(e);\n        }\n\n        if (e.button === 0 && // ignore right clicks\n        !_this3.props.target && // let browser handle "target=_blank"\n        !e.defaultPrevented && // onClick prevented default\n        !e.metaKey && // ignore clicks with modifier keys...\n        !e.altKey && !e.ctrlKey && !e.shiftKey) {\n          e.preventDefault();\n          var shouldReplace = replace;\n\n          var isCurrent = encodeURI(prefixedTo) === _location.pathname;\n\n          if (typeof replace !== "boolean" && isCurrent) {\n            shouldReplace = true;\n          } // Make sure the necessary scripts and data are\n          // loaded before continuing.\n\n\n          window.___navigate(prefixedTo, {\n            state: state,\n            replace: shouldReplace\n          });\n        }\n\n        return true;\n      }\n    }, rest));\n  };\n\n  return GatsbyLink;\n}(_react.default.Component);\n\nGatsbyLink.propTypes = (0, _extends2.default)({}, NavLinkPropTypes, {\n  onClick: _propTypes.default.func,\n  to: _propTypes.default.string.isRequired,\n  replace: _propTypes.default.bool,\n  state: _propTypes.default.object\n});\n\nvar _default = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {\n  return /*#__PURE__*/_react.default.createElement(GatsbyLinkLocationWrapper, (0, _extends2.default)({\n    innerRef: ref\n  }, props));\n});\n\nexports.ZP = _default;\n\nvar navigate = function navigate(to, options) {\n  window.___navigate(rewriteLinkPath(to, window.location.pathname), options);\n};\n\nexports.c4 = navigate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8037\n')},1752:function(__unused_webpack_module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.parsePath = parsePath;\n\nfunction parsePath(path) {\n  var pathname = path || "/";\n  var search = "";\n  var hash = "";\n  var hashIndex = pathname.indexOf("#");\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf("?");\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === "?" ? "" : search,\n    hash: hash === "#" ? "" : hash\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1saW5rL3BhcnNlLXBhdGguanM/NzJlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucGFyc2VQYXRoID0gcGFyc2VQYXRoO1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8IFwiL1wiO1xuICB2YXIgc2VhcmNoID0gXCJcIjtcbiAgdmFyIGhhc2ggPSBcIlwiO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZihcIiNcIik7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoXCI/XCIpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaFxuICB9O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1752\n')},9679:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = true;\nexports.p2 = exports.$C = void 0;\n\nvar _scrollHandler = __webpack_require__(1432);\n\nexports.$C = _scrollHandler.ScrollHandler;\n\nvar _useScrollRestoration = __webpack_require__(4855);\n\nexports.p2 = _useScrollRestoration.useScrollRestoration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY3OS5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBRWIseUJBQWtCO0FBQ2xCLFVBQTRCLEdBQUcsVUFBcUI7O0FBRXBELHFCQUFxQixtQkFBTyxDQUFDLElBQWtCOztBQUUvQyxVQUFxQjs7QUFFckIsNEJBQTRCLG1CQUFPLENBQUMsSUFBMEI7O0FBRTlELFVBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGwvaW5kZXguanM/ZWUxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMudXNlU2Nyb2xsUmVzdG9yYXRpb24gPSBleHBvcnRzLlNjcm9sbENvbnRleHQgPSB2b2lkIDA7XG5cbnZhciBfc2Nyb2xsSGFuZGxlciA9IHJlcXVpcmUoXCIuL3Njcm9sbC1oYW5kbGVyXCIpO1xuXG5leHBvcnRzLlNjcm9sbENvbnRleHQgPSBfc2Nyb2xsSGFuZGxlci5TY3JvbGxIYW5kbGVyO1xuXG52YXIgX3VzZVNjcm9sbFJlc3RvcmF0aW9uID0gcmVxdWlyZShcIi4vdXNlLXNjcm9sbC1yZXN0b3JhdGlvblwiKTtcblxuZXhwb3J0cy51c2VTY3JvbGxSZXN0b3JhdGlvbiA9IF91c2VTY3JvbGxSZXN0b3JhdGlvbi51c2VTY3JvbGxSZXN0b3JhdGlvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9679\n")},1432:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.ScrollHandler = exports.ScrollContext = void 0;\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(1506));\n\nvar _inheritsLoose2 = _interopRequireDefault(__webpack_require__(5354));\n\nvar React = _interopRequireWildcard(__webpack_require__(7294));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(5697));\n\nvar _sessionStorage = __webpack_require__(1142);\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ScrollContext = /*#__PURE__*/React.createContext(new _sessionStorage.SessionStorage());\nexports.ScrollContext = ScrollContext;\nScrollContext.displayName = "GatsbyScrollContext";\n\nvar ScrollHandler = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(ScrollHandler, _React$Component);\n\n  function ScrollHandler() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this._stateStorage = new _sessionStorage.SessionStorage();\n    _this._isTicking = false;\n    _this._latestKnownScrollY = 0;\n\n    _this.scrollListener = function () {\n      _this._latestKnownScrollY = window.scrollY;\n\n      if (!_this._isTicking) {\n        _this._isTicking = true;\n        requestAnimationFrame(_this._saveScroll.bind((0, _assertThisInitialized2.default)(_this)));\n      }\n    };\n\n    _this.windowScroll = function (position, prevProps) {\n      if (_this.shouldUpdateScroll(prevProps, _this.props)) {\n        window.scrollTo(0, position);\n      }\n    };\n\n    _this.scrollToHash = function (hash, prevProps) {\n      var node = document.getElementById(hash.substring(1));\n\n      if (node && _this.shouldUpdateScroll(prevProps, _this.props)) {\n        node.scrollIntoView();\n      }\n    };\n\n    _this.shouldUpdateScroll = function (prevRouterProps, routerProps) {\n      var shouldUpdateScroll = _this.props.shouldUpdateScroll;\n\n      if (!shouldUpdateScroll) {\n        return true;\n      } // Hack to allow accessing this._stateStorage.\n\n\n      return shouldUpdateScroll.call((0, _assertThisInitialized2.default)(_this), prevRouterProps, routerProps);\n    };\n\n    return _this;\n  }\n\n  var _proto = ScrollHandler.prototype;\n\n  _proto._saveScroll = function _saveScroll() {\n    var key = this.props.location.key || null;\n\n    if (key) {\n      this._stateStorage.save(this.props.location, key, this._latestKnownScrollY);\n    }\n\n    this._isTicking = false;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener("scroll", this.scrollListener);\n    var scrollPosition;\n    var _this$props$location = this.props.location,\n        key = _this$props$location.key,\n        hash = _this$props$location.hash;\n\n    if (key) {\n      scrollPosition = this._stateStorage.read(this.props.location, key);\n    }\n\n    if (scrollPosition) {\n      this.windowScroll(scrollPosition, undefined);\n    } else if (hash) {\n      this.scrollToHash(decodeURI(hash), undefined);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener("scroll", this.scrollListener);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props$location2 = this.props.location,\n        hash = _this$props$location2.hash,\n        key = _this$props$location2.key;\n    var scrollPosition;\n\n    if (key) {\n      scrollPosition = this._stateStorage.read(this.props.location, key);\n    }\n    /**  There are two pieces of state: the browser url and\n     * history state which keeps track of scroll position\n     * Native behaviour prescribes that we ought to restore scroll position\n     * when a user navigates back in their browser (this is the `POP` action)\n     * Currently, reach router has a bug that prevents this at https://github.com/reach/router/issues/228\n     * So we _always_ stick to the url as a source of truth — if the url\n     * contains a hash, we scroll to it\n     */\n\n\n    if (hash) {\n      this.scrollToHash(decodeURI(hash), prevProps);\n    } else {\n      this.windowScroll(scrollPosition, prevProps);\n    }\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(ScrollContext.Provider, {\n      value: this._stateStorage\n    }, this.props.children);\n  };\n\n  return ScrollHandler;\n}(React.Component);\n\nexports.ScrollHandler = ScrollHandler;\nScrollHandler.propTypes = {\n  shouldUpdateScroll: _propTypes.default.func,\n  children: _propTypes.default.element.isRequired,\n  location: _propTypes.default.object.isRequired\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLHFCQUFxQixHQUFHLHFCQUFxQjs7QUFFN0MscURBQXFELG1CQUFPLENBQUMsSUFBOEM7O0FBRTNHLDZDQUE2QyxtQkFBTyxDQUFDLElBQXNDOztBQUUzRixvQ0FBb0MsbUJBQU8sQ0FBQyxJQUFPOztBQUVuRCx3Q0FBd0MsbUJBQU8sQ0FBQyxJQUFZOztBQUU1RCxzQkFBc0IsbUJBQU8sQ0FBQyxJQUFtQjs7QUFFakQsaURBQWlELGdEQUFnRCx1Q0FBdUMsc0NBQXNDLG9GQUFvRiw0REFBNEQ7O0FBRTlULHFEQUFxRCw2Q0FBNkMsY0FBYyw0RUFBNEUsU0FBUyxrQkFBa0IsbURBQW1ELCtCQUErQix5QkFBeUIsaUJBQWlCLHNGQUFzRix1QkFBdUIsMkVBQTJFLHFGQUFxRixzQ0FBc0MsNENBQTRDLE9BQU8sOEJBQThCLHNCQUFzQixhQUFhLDBCQUEwQjs7QUFFcHhCO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGwvc2Nyb2xsLWhhbmRsZXIuanM/MTI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlNjcm9sbEhhbmRsZXIgPSBleHBvcnRzLlNjcm9sbENvbnRleHQgPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfc2Vzc2lvblN0b3JhZ2UgPSByZXF1aXJlKFwiLi9zZXNzaW9uLXN0b3JhZ2VcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbnZhciBTY3JvbGxDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobmV3IF9zZXNzaW9uU3RvcmFnZS5TZXNzaW9uU3RvcmFnZSgpKTtcbmV4cG9ydHMuU2Nyb2xsQ29udGV4dCA9IFNjcm9sbENvbnRleHQ7XG5TY3JvbGxDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJHYXRzYnlTY3JvbGxDb250ZXh0XCI7XG5cbnZhciBTY3JvbGxIYW5kbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoU2Nyb2xsSGFuZGxlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsSGFuZGxlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5fc3RhdGVTdG9yYWdlID0gbmV3IF9zZXNzaW9uU3RvcmFnZS5TZXNzaW9uU3RvcmFnZSgpO1xuICAgIF90aGlzLl9pc1RpY2tpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5fbGF0ZXN0S25vd25TY3JvbGxZID0gMDtcblxuICAgIF90aGlzLnNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX2xhdGVzdEtub3duU2Nyb2xsWSA9IHdpbmRvdy5zY3JvbGxZO1xuXG4gICAgICBpZiAoIV90aGlzLl9pc1RpY2tpbmcpIHtcbiAgICAgICAgX3RoaXMuX2lzVGlja2luZyA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy5fc2F2ZVNjcm9sbC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMud2luZG93U2Nyb2xsID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChfdGhpcy5zaG91bGRVcGRhdGVTY3JvbGwocHJldlByb3BzLCBfdGhpcy5wcm9wcykpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2Nyb2xsVG9IYXNoID0gZnVuY3Rpb24gKGhhc2gsIHByZXZQcm9wcykge1xuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoLnN1YnN0cmluZygxKSk7XG5cbiAgICAgIGlmIChub2RlICYmIF90aGlzLnNob3VsZFVwZGF0ZVNjcm9sbChwcmV2UHJvcHMsIF90aGlzLnByb3BzKSkge1xuICAgICAgICBub2RlLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNob3VsZFVwZGF0ZVNjcm9sbCA9IGZ1bmN0aW9uIChwcmV2Um91dGVyUHJvcHMsIHJvdXRlclByb3BzKSB7XG4gICAgICB2YXIgc2hvdWxkVXBkYXRlU2Nyb2xsID0gX3RoaXMucHJvcHMuc2hvdWxkVXBkYXRlU2Nyb2xsO1xuXG4gICAgICBpZiAoIXNob3VsZFVwZGF0ZVNjcm9sbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gLy8gSGFjayB0byBhbGxvdyBhY2Nlc3NpbmcgdGhpcy5fc3RhdGVTdG9yYWdlLlxuXG5cbiAgICAgIHJldHVybiBzaG91bGRVcGRhdGVTY3JvbGwuY2FsbCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpLCBwcmV2Um91dGVyUHJvcHMsIHJvdXRlclByb3BzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjcm9sbEhhbmRsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5fc2F2ZVNjcm9sbCA9IGZ1bmN0aW9uIF9zYXZlU2Nyb2xsKCkge1xuICAgIHZhciBrZXkgPSB0aGlzLnByb3BzLmxvY2F0aW9uLmtleSB8fCBudWxsO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgdGhpcy5fc3RhdGVTdG9yYWdlLnNhdmUodGhpcy5wcm9wcy5sb2NhdGlvbiwga2V5LCB0aGlzLl9sYXRlc3RLbm93blNjcm9sbFkpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzVGlja2luZyA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuICAgIHZhciBzY3JvbGxQb3NpdGlvbjtcbiAgICB2YXIgX3RoaXMkcHJvcHMkbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uLFxuICAgICAgICBrZXkgPSBfdGhpcyRwcm9wcyRsb2NhdGlvbi5rZXksXG4gICAgICAgIGhhc2ggPSBfdGhpcyRwcm9wcyRsb2NhdGlvbi5oYXNoO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgc2Nyb2xsUG9zaXRpb24gPSB0aGlzLl9zdGF0ZVN0b3JhZ2UucmVhZCh0aGlzLnByb3BzLmxvY2F0aW9uLCBrZXkpO1xuICAgIH1cblxuICAgIGlmIChzY3JvbGxQb3NpdGlvbikge1xuICAgICAgdGhpcy53aW5kb3dTY3JvbGwoc2Nyb2xsUG9zaXRpb24sIHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIGlmIChoYXNoKSB7XG4gICAgICB0aGlzLnNjcm9sbFRvSGFzaChkZWNvZGVVUkkoaGFzaCksIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIF90aGlzJHByb3BzJGxvY2F0aW9uMiA9IHRoaXMucHJvcHMubG9jYXRpb24sXG4gICAgICAgIGhhc2ggPSBfdGhpcyRwcm9wcyRsb2NhdGlvbjIuaGFzaCxcbiAgICAgICAga2V5ID0gX3RoaXMkcHJvcHMkbG9jYXRpb24yLmtleTtcbiAgICB2YXIgc2Nyb2xsUG9zaXRpb247XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBzY3JvbGxQb3NpdGlvbiA9IHRoaXMuX3N0YXRlU3RvcmFnZS5yZWFkKHRoaXMucHJvcHMubG9jYXRpb24sIGtleSk7XG4gICAgfVxuICAgIC8qKiAgVGhlcmUgYXJlIHR3byBwaWVjZXMgb2Ygc3RhdGU6IHRoZSBicm93c2VyIHVybCBhbmRcbiAgICAgKiBoaXN0b3J5IHN0YXRlIHdoaWNoIGtlZXBzIHRyYWNrIG9mIHNjcm9sbCBwb3NpdGlvblxuICAgICAqIE5hdGl2ZSBiZWhhdmlvdXIgcHJlc2NyaWJlcyB0aGF0IHdlIG91Z2h0IHRvIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICogd2hlbiBhIHVzZXIgbmF2aWdhdGVzIGJhY2sgaW4gdGhlaXIgYnJvd3NlciAodGhpcyBpcyB0aGUgYFBPUGAgYWN0aW9uKVxuICAgICAqIEN1cnJlbnRseSwgcmVhY2ggcm91dGVyIGhhcyBhIGJ1ZyB0aGF0IHByZXZlbnRzIHRoaXMgYXQgaHR0cHM6Ly9naXRodWIuY29tL3JlYWNoL3JvdXRlci9pc3N1ZXMvMjI4XG4gICAgICogU28gd2UgX2Fsd2F5c18gc3RpY2sgdG8gdGhlIHVybCBhcyBhIHNvdXJjZSBvZiB0cnV0aCDigJQgaWYgdGhlIHVybFxuICAgICAqIGNvbnRhaW5zIGEgaGFzaCwgd2Ugc2Nyb2xsIHRvIGl0XG4gICAgICovXG5cblxuICAgIGlmIChoYXNoKSB7XG4gICAgICB0aGlzLnNjcm9sbFRvSGFzaChkZWNvZGVVUkkoaGFzaCksIHByZXZQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2luZG93U2Nyb2xsKHNjcm9sbFBvc2l0aW9uLCBwcmV2UHJvcHMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5fc3RhdGVTdG9yYWdlXG4gICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbEhhbmRsZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuU2Nyb2xsSGFuZGxlciA9IFNjcm9sbEhhbmRsZXI7XG5TY3JvbGxIYW5kbGVyLnByb3BUeXBlcyA9IHtcbiAgc2hvdWxkVXBkYXRlU2Nyb2xsOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1432\n')},1142:function(__unused_webpack_module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.SessionStorage = void 0;\nvar STATE_KEY_PREFIX = "@@scroll|";\nvar GATSBY_ROUTER_SCROLL_STATE = "___GATSBY_REACT_ROUTER_SCROLL";\n\nvar SessionStorage = /*#__PURE__*/function () {\n  function SessionStorage() {}\n\n  var _proto = SessionStorage.prototype;\n\n  _proto.read = function read(location, key) {\n    var stateKey = this.getStateKey(location, key);\n\n    try {\n      var value = window.sessionStorage.getItem(stateKey);\n      return value ? JSON.parse(value) : 0;\n    } catch (e) {\n      if (false) {}\n\n      if (window && window[GATSBY_ROUTER_SCROLL_STATE] && window[GATSBY_ROUTER_SCROLL_STATE][stateKey]) {\n        return window[GATSBY_ROUTER_SCROLL_STATE][stateKey];\n      }\n\n      return 0;\n    }\n  };\n\n  _proto.save = function save(location, key, value) {\n    var stateKey = this.getStateKey(location, key);\n    var storedValue = JSON.stringify(value);\n\n    try {\n      window.sessionStorage.setItem(stateKey, storedValue);\n    } catch (e) {\n      if (window && window[GATSBY_ROUTER_SCROLL_STATE]) {\n        window[GATSBY_ROUTER_SCROLL_STATE][stateKey] = JSON.parse(storedValue);\n      } else {\n        window[GATSBY_ROUTER_SCROLL_STATE] = {};\n        window[GATSBY_ROUTER_SCROLL_STATE][stateKey] = JSON.parse(storedValue);\n      }\n\n      if (false) {}\n    }\n  };\n\n  _proto.getStateKey = function getStateKey(location, key) {\n    var stateKeyBase = "" + STATE_KEY_PREFIX + location.pathname;\n    return key === null || typeof key === "undefined" ? stateKeyBase : stateKeyBase + "|" + key;\n  };\n\n  return SessionStorage;\n}();\n\nexports.SessionStorage = SessionStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixVQUFVLEtBQXFDLEVBQUUsRUFFMUM7O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLEtBQXFDLEVBQUUsRUFFMUM7QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9nYXRzYnktcmVhY3Qtcm91dGVyLXNjcm9sbC9zZXNzaW9uLXN0b3JhZ2UuanM/ZmUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuU2Vzc2lvblN0b3JhZ2UgPSB2b2lkIDA7XG52YXIgU1RBVEVfS0VZX1BSRUZJWCA9IFwiQEBzY3JvbGx8XCI7XG52YXIgR0FUU0JZX1JPVVRFUl9TQ1JPTExfU1RBVEUgPSBcIl9fX0dBVFNCWV9SRUFDVF9ST1VURVJfU0NST0xMXCI7XG5cbnZhciBTZXNzaW9uU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlc3Npb25TdG9yYWdlKCkge31cblxuICB2YXIgX3Byb3RvID0gU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZWFkID0gZnVuY3Rpb24gcmVhZChsb2NhdGlvbiwga2V5KSB7XG4gICAgdmFyIHN0YXRlS2V5ID0gdGhpcy5nZXRTdGF0ZUtleShsb2NhdGlvbiwga2V5KTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgdmFsdWUgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdGF0ZUtleSk7XG4gICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IDA7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxdIFVuYWJsZSB0byBhY2Nlc3Mgc2Vzc2lvblN0b3JhZ2U7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0gJiYgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0pIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV1bc3RhdGVLZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhdmUgPSBmdW5jdGlvbiBzYXZlKGxvY2F0aW9uLCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIHN0YXRlS2V5ID0gdGhpcy5nZXRTdGF0ZUtleShsb2NhdGlvbiwga2V5KTtcbiAgICB2YXIgc3RvcmVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RhdGVLZXksIHN0b3JlZFZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0pIHtcbiAgICAgICAgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0gPSBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0gPSB7fTtcbiAgICAgICAgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0gPSBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxdIFVuYWJsZSB0byBzYXZlIHN0YXRlIGluIHNlc3Npb25TdG9yYWdlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFN0YXRlS2V5ID0gZnVuY3Rpb24gZ2V0U3RhdGVLZXkobG9jYXRpb24sIGtleSkge1xuICAgIHZhciBzdGF0ZUtleUJhc2UgPSBcIlwiICsgU1RBVEVfS0VZX1BSRUZJWCArIGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHJldHVybiBrZXkgPT09IG51bGwgfHwgdHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIiA/IHN0YXRlS2V5QmFzZSA6IHN0YXRlS2V5QmFzZSArIFwifFwiICsga2V5O1xuICB9O1xuXG4gIHJldHVybiBTZXNzaW9uU3RvcmFnZTtcbn0oKTtcblxuZXhwb3J0cy5TZXNzaW9uU3RvcmFnZSA9IFNlc3Npb25TdG9yYWdlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1142\n')},4855:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nexports.__esModule = true;\nexports.useScrollRestoration = useScrollRestoration;\n\nvar _scrollHandler = __webpack_require__(1432);\n\nvar _react = __webpack_require__(7294);\n\nvar _reachRouter = __webpack_require__(9499);\n\nfunction useScrollRestoration(identifier) {\n  var location = (0, _reachRouter.useLocation)();\n  var state = (0, _react.useContext)(_scrollHandler.ScrollContext);\n  var ref = (0, _react.useRef)(null);\n  (0, _react.useLayoutEffect)(function () {\n    if (ref.current) {\n      var position = state.read(location, identifier);\n      ref.current.scrollTo(0, position || 0);\n    }\n  }, [location.key]);\n  return {\n    ref: ref,\n    onScroll: function onScroll() {\n      if (ref.current) {\n        state.save(location, identifier, ref.current.scrollTop);\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsNEJBQTRCOztBQUU1QixxQkFBcUIsbUJBQU8sQ0FBQyxJQUFrQjs7QUFFL0MsYUFBYSxtQkFBTyxDQUFDLElBQU87O0FBRTVCLG1CQUFtQixtQkFBTyxDQUFDLElBQXdCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGwvdXNlLXNjcm9sbC1yZXN0b3JhdGlvbi5qcz9kZWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy51c2VTY3JvbGxSZXN0b3JhdGlvbiA9IHVzZVNjcm9sbFJlc3RvcmF0aW9uO1xuXG52YXIgX3Njcm9sbEhhbmRsZXIgPSByZXF1aXJlKFwiLi9zY3JvbGwtaGFuZGxlclwiKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjaFJvdXRlciA9IHJlcXVpcmUoXCJAZ2F0c2J5anMvcmVhY2gtcm91dGVyXCIpO1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihpZGVudGlmaWVyKSB7XG4gIHZhciBsb2NhdGlvbiA9ICgwLCBfcmVhY2hSb3V0ZXIudXNlTG9jYXRpb24pKCk7XG4gIHZhciBzdGF0ZSA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoX3Njcm9sbEhhbmRsZXIuU2Nyb2xsQ29udGV4dCk7XG4gIHZhciByZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7XG4gICgwLCBfcmVhY3QudXNlTGF5b3V0RWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSBzdGF0ZS5yZWFkKGxvY2F0aW9uLCBpZGVudGlmaWVyKTtcbiAgICAgIHJlZi5jdXJyZW50LnNjcm9sbFRvKDAsIHBvc2l0aW9uIHx8IDApO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLmtleV0pO1xuICByZXR1cm4ge1xuICAgIHJlZjogcmVmLFxuICAgIG9uU2Nyb2xsOiBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgICBzdGF0ZS5zYXZlKGxvY2F0aW9uLCBpZGVudGlmaWVyLCByZWYuY3VycmVudC5zY3JvbGxUb3ApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4855\n")},4999:function(__unused_webpack_module,exports,__webpack_require__){eval('// prefer default export if available\nvar preferDefault=function preferDefault(m){return m&&m.default||m;};exports.components={"component---src-pages-404-tsx":function componentSrcPages404Tsx(){return Promise.all(/* import() | component---src-pages-404-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(218)]).then(__webpack_require__.bind(__webpack_require__, 9458));},"component---src-pages-about-tsx":function componentSrcPagesAboutTsx(){return Promise.all(/* import() | component---src-pages-about-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(49)]).then(__webpack_require__.bind(__webpack_require__, 4996));},"component---src-pages-contact-tsx":function componentSrcPagesContactTsx(){return Promise.all(/* import() | component---src-pages-contact-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(650)]).then(__webpack_require__.bind(__webpack_require__, 4209));},"component---src-pages-downloads-tsx":function componentSrcPagesDownloadsTsx(){return Promise.all(/* import() | component---src-pages-downloads-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(283)]).then(__webpack_require__.bind(__webpack_require__, 6620));},"component---src-pages-frequently-asked-questions-tsx":function componentSrcPagesFrequentlyAskedQuestionsTsx(){return Promise.all(/* import() | component---src-pages-frequently-asked-questions-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(363), __webpack_require__.e(48)]).then(__webpack_require__.bind(__webpack_require__, 2018));},"component---src-pages-index-tsx":function componentSrcPagesIndexTsx(){return Promise.all(/* import() | component---src-pages-index-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(644), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(363), __webpack_require__.e(691)]).then(__webpack_require__.bind(__webpack_require__, 4053));},"component---src-pages-methodology-tsx":function componentSrcPagesMethodologyTsx(){return Promise.all(/* import() | component---src-pages-methodology-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(647)]).then(__webpack_require__.bind(__webpack_require__, 8503));},"component---src-pages-previous-versions-tsx":function componentSrcPagesPreviousVersionsTsx(){return Promise.all(/* import() | component---src-pages-previous-versions-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(612), __webpack_require__.e(971)]).then(__webpack_require__.bind(__webpack_require__, 1180));},"component---src-pages-privacy-tsx":function componentSrcPagesPrivacyTsx(){return Promise.all(/* import() | component---src-pages-privacy-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(831)]).then(__webpack_require__.bind(__webpack_require__, 8003));},"component---src-pages-public-engagement-tsx":function componentSrcPagesPublicEngagementTsx(){return Promise.all(/* import() | component---src-pages-public-engagement-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(336)]).then(__webpack_require__.bind(__webpack_require__, 9570));},"component---src-pages-technical-support-document-tsx":function componentSrcPagesTechnicalSupportDocumentTsx(){return Promise.all(/* import() | component---src-pages-technical-support-document-tsx */[__webpack_require__.e(532), __webpack_require__.e(30), __webpack_require__.e(351), __webpack_require__.e(165)]).then(__webpack_require__.bind(__webpack_require__, 5412));}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk5OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLEdBQU1BLENBQUFBLGFBQWEsQ0FBRyxRQUFoQkEsQ0FBQUEsYUFBZ0IsQ0FBQUMsQ0FBQyxRQUFLQSxDQUFBQSxDQUFDLEVBQUlBLENBQUMsQ0FBQ0MsT0FBUixFQUFvQkQsQ0FBeEIsRUFBdkIsQ0FFQUUsa0JBQUEsQ0FBcUIsQ0FDbkIsZ0NBQWlDLHlDQUFNLHFPQUFOLEVBRGQsQ0FFbkIsa0NBQW1DLDJDQUFNLGtRQUFOLEVBRmhCLENBR25CLG9DQUFxQyw2Q0FBTSxxUUFBTixFQUhsQixDQUluQixzQ0FBdUMsK0NBQU0sdVFBQU4sRUFKcEIsQ0FLbkIsdURBQXdELDhEQUFNLG1UQUFOLEVBTHJDLENBTW5CLGtDQUFtQywyQ0FBTSwyVEFBTixFQU5oQixDQU9uQix3Q0FBeUMsaURBQU0seVFBQU4sRUFQdEIsQ0FRbkIsOENBQStDLHNEQUFNLCtRQUFOLEVBUjVCLENBU25CLG9DQUFxQyw2Q0FBTSx5T0FBTixFQVRsQixDQVVuQiw4Q0FBK0Msc0RBQU0sbVBBQU4sRUFWNUIsQ0FXbkIsdURBQXdELDhEQUFNLDRQQUFOLEVBWHJDLENBQXJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi8uY2FjaGUvX3RoaXNfaXNfdmlydHVhbF9mc19wYXRoXy8kdmlydHVhbC9hc3luYy1yZXF1aXJlcy5qcz8zNmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHByZWZlciBkZWZhdWx0IGV4cG9ydCBpZiBhdmFpbGFibGVcbmNvbnN0IHByZWZlckRlZmF1bHQgPSBtID0+IChtICYmIG0uZGVmYXVsdCkgfHwgbVxuXG5leHBvcnRzLmNvbXBvbmVudHMgPSB7XG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLTQwNC10c3hcIjogKCkgPT4gaW1wb3J0KFwiLi8uLi8uLi8uLi9zcmMvcGFnZXMvNDA0LnRzeFwiIC8qIHdlYnBhY2tDaHVua05hbWU6IFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLTQwNC10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWFib3V0LXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9hYm91dC50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1hYm91dC10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWNvbnRhY3QtdHN4XCI6ICgpID0+IGltcG9ydChcIi4vLi4vLi4vLi4vc3JjL3BhZ2VzL2NvbnRhY3QudHN4XCIgLyogd2VicGFja0NodW5rTmFtZTogXCJjb21wb25lbnQtLS1zcmMtcGFnZXMtY29udGFjdC10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWRvd25sb2Fkcy10c3hcIjogKCkgPT4gaW1wb3J0KFwiLi8uLi8uLi8uLi9zcmMvcGFnZXMvZG93bmxvYWRzLnRzeFwiIC8qIHdlYnBhY2tDaHVua05hbWU6IFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWRvd25sb2Fkcy10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWluZGV4LXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9pbmRleC50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1pbmRleC10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLW1ldGhvZG9sb2d5LXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9tZXRob2RvbG9neS50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1tZXRob2RvbG9neS10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLXByZXZpb3VzLXZlcnNpb25zLXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9wcmV2aW91cy12ZXJzaW9ucy50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1wcmV2aW91cy12ZXJzaW9ucy10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLXByaXZhY3ktdHN4XCI6ICgpID0+IGltcG9ydChcIi4vLi4vLi4vLi4vc3JjL3BhZ2VzL3ByaXZhY3kudHN4XCIgLyogd2VicGFja0NodW5rTmFtZTogXCJjb21wb25lbnQtLS1zcmMtcGFnZXMtcHJpdmFjeS10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLXB1YmxpYy1lbmdhZ2VtZW50LXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9wdWJsaWMtZW5nYWdlbWVudC50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1wdWJsaWMtZW5nYWdlbWVudC10c3hcIiAqLyksXG4gIFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLXRlY2huaWNhbC1zdXBwb3J0LWRvY3VtZW50LXRzeFwiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy90ZWNobmljYWwtc3VwcG9ydC1kb2N1bWVudC50c3hcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy10ZWNobmljYWwtc3VwcG9ydC1kb2N1bWVudC10c3hcIiAqLylcbn1cblxuIl0sIm5hbWVzIjpbInByZWZlckRlZmF1bHQiLCJtIiwiZGVmYXVsdCIsImV4cG9ydHMiLCJjb21wb25lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4999\n')},5182:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=[{plugin:__webpack_require__(5526),options:{"plugins":[],"path":"/Users/enost/Documents/GitHub/j40-cejst-2/client/src/intl","languages":["en","es"],"defaultLanguage":"en","redirect":true}},{plugin:__webpack_require__(6101),options:{"plugins":[],"sampleRate":0.7}},{plugin:__webpack_require__(9037),options:{"plugins":[]}}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE4Mi5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWlCLENBQUMsQ0FDWkMsTUFBTSxDQUFFQyxtQkFBTyxDQUFDLElBQUQsQ0FESCxDQUVaQyxPQUFPLENBQUUsQ0FBQyxVQUFVLEVBQVgsQ0FBYyxPQUFPLDJEQUFyQixDQUFpRixZQUFZLENBQUMsSUFBRCxDQUFNLElBQU4sQ0FBN0YsQ0FBeUcsa0JBQWtCLElBQTNILENBQWdJLFdBQVcsSUFBM0ksQ0FGRyxDQUFELENBR1gsQ0FDQUYsTUFBTSxDQUFFQyxtQkFBTyxDQUFDLElBQUQsQ0FEZixDQUVBQyxPQUFPLENBQUUsQ0FBQyxVQUFVLEVBQVgsQ0FBYyxhQUFhLEdBQTNCLENBRlQsQ0FIVyxDQU1YLENBQ0FGLE1BQU0sQ0FBRUMsbUJBQU8sQ0FBQyxJQUFELENBRGYsQ0FFQUMsT0FBTyxDQUFFLENBQUMsVUFBVSxFQUFYLENBRlQsQ0FOVyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vLmNhY2hlL2FwaS1ydW5uZXItYnJvd3Nlci1wbHVnaW5zLmpzPzJkZTIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBbe1xuICAgICAgcGx1Z2luOiByZXF1aXJlKCcuLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXBsdWdpbi1pbnRsL2dhdHNieS1icm93c2VyLmpzJyksXG4gICAgICBvcHRpb25zOiB7XCJwbHVnaW5zXCI6W10sXCJwYXRoXCI6XCIvVXNlcnMvZW5vc3QvRG9jdW1lbnRzL0dpdEh1Yi9qNDAtY2Vqc3QtMi9jbGllbnQvc3JjL2ludGxcIixcImxhbmd1YWdlc1wiOltcImVuXCIsXCJlc1wiXSxcImRlZmF1bHRMYW5ndWFnZVwiOlwiZW5cIixcInJlZGlyZWN0XCI6dHJ1ZX0sXG4gICAgfSx7XG4gICAgICBwbHVnaW46IHJlcXVpcmUoJy4uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2dhdHNieS9nYXRzYnktYnJvd3Nlci5qcycpLFxuICAgICAgb3B0aW9uczoge1wicGx1Z2luc1wiOltdLFwic2FtcGxlUmF0ZVwiOjAuN30sXG4gICAgfSx7XG4gICAgICBwbHVnaW46IHJlcXVpcmUoJy4uL2dhdHNieS1icm93c2VyLmpzJyksXG4gICAgICBvcHRpb25zOiB7XCJwbHVnaW5zXCI6W119LFxuICAgIH1dXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBsdWdpbiIsInJlcXVpcmUiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5182\n')},7343:function(__unused_webpack_module,exports,__webpack_require__){eval('var plugins=__webpack_require__(5182);var _require$publicLoader=(__webpack_require__(8741)/* .publicLoader */ .jN),getResourceURLsForPathname=_require$publicLoader.getResourceURLsForPathname,loadPage=_require$publicLoader.loadPage,loadPageSync=_require$publicLoader.loadPageSync;exports.h=function(api,args,defaultReturn,argTransform){if(args===void 0){args={};}// Hooks for gatsby-cypress\'s API handler\nif(false){}var results=plugins.map(function(plugin){if(!plugin.plugin[api]){return undefined;}args.getResourceURLsForPathname=getResourceURLsForPathname;args.loadPage=loadPage;args.loadPageSync=loadPageSync;var result=plugin.plugin[api](args,plugin.options);if(result&&argTransform){args=argTransform({args:args,result:result,plugin:plugin});}return result;});// Filter out undefined results.\nresults=results.filter(function(result){return typeof result!=="undefined";});if(results.length>0){return results;}else if(defaultReturn){return[defaultReturn];}else{return[];}};exports.I=function(api,args,defaultReturn){return plugins.reduce(function(previous,next){return next.plugin[api]?previous.then(function(){return next.plugin[api](args,next.options);}):previous;},Promise.resolve());};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM0My5qcyIsIm1hcHBpbmdzIjoiQUFBQSxHQUFNQSxDQUFBQSxPQUFPLENBQUdDLG1CQUFPLENBQUMsS0FBeEIsQ0FDQSwwQkFDRUEsa0RBREYsQ0FBUUUsMEJBQVIsdUJBQVFBLDBCQUFSLENBQW9DQyxRQUFwQyx1QkFBb0NBLFFBQXBDLENBQThDQyxZQUE5Qyx1QkFBOENBLFlBQTlDLENBR0FDLFNBQUEsQ0FBb0IsU0FBQ0UsR0FBRCxDQUFNQyxJQUFOLENBQWlCQyxhQUFqQixDQUFnQ0MsWUFBaEMsQ0FBaUQsSUFBM0NGLElBQTJDLFdBQTNDQSxJQUEyQyxDQUFwQyxFQUFvQyxFQUNuRTtBQUNBLEdBQUlHLEtBQUosQ0FBaUMsRUFVakMsR0FBSU8sQ0FBQUEsT0FBTyxDQUFHbkIsT0FBTyxDQUFDb0IsR0FBUixDQUFZLFNBQUFDLE1BQU0sQ0FBSSxDQUNsQyxHQUFJLENBQUNBLE1BQU0sQ0FBQ0EsTUFBUCxDQUFjYixHQUFkLENBQUwsQ0FBeUIsQ0FDdkIsTUFBT2MsQ0FBQUEsU0FBUCxDQUNELENBRURiLElBQUksQ0FBQ04sMEJBQUwsQ0FBa0NBLDBCQUFsQyxDQUNBTSxJQUFJLENBQUNMLFFBQUwsQ0FBZ0JBLFFBQWhCLENBQ0FLLElBQUksQ0FBQ0osWUFBTCxDQUFvQkEsWUFBcEIsQ0FFQSxHQUFNa0IsQ0FBQUEsTUFBTSxDQUFHRixNQUFNLENBQUNBLE1BQVAsQ0FBY2IsR0FBZCxFQUFtQkMsSUFBbkIsQ0FBeUJZLE1BQU0sQ0FBQ0csT0FBaEMsQ0FBZixDQUNBLEdBQUlELE1BQU0sRUFBSVosWUFBZCxDQUE0QixDQUMxQkYsSUFBSSxDQUFHRSxZQUFZLENBQUMsQ0FBRUYsSUFBSSxDQUFKQSxJQUFGLENBQVFjLE1BQU0sQ0FBTkEsTUFBUixDQUFnQkYsTUFBTSxDQUFOQSxNQUFoQixDQUFELENBQW5CLENBQ0QsQ0FDRCxNQUFPRSxDQUFBQSxNQUFQLENBQ0QsQ0FkYSxDQUFkLENBZ0JBO0FBQ0FKLE9BQU8sQ0FBR0EsT0FBTyxDQUFDTSxNQUFSLENBQWUsU0FBQUYsTUFBTSxRQUFJLE9BQU9BLENBQUFBLE1BQVAsY0FBSixFQUFyQixDQUFWLENBRUEsR0FBSUosT0FBTyxDQUFDTyxNQUFSLENBQWlCLENBQXJCLENBQXdCLENBQ3RCLE1BQU9QLENBQUFBLE9BQVAsQ0FDRCxDQUZELElBRU8sSUFBSVQsYUFBSixDQUFtQixDQUN4QixNQUFPLENBQUNBLGFBQUQsQ0FBUCxDQUNELENBRk0sSUFFQSxDQUNMLE1BQU8sRUFBUCxDQUNELENBQ0YsQ0F0Q0QsQ0F3Q0FKLFNBQUEsQ0FBeUIsU0FBQ0UsR0FBRCxDQUFNQyxJQUFOLENBQVlDLGFBQVosUUFDdkJWLENBQUFBLE9BQU8sQ0FBQzRCLE1BQVIsQ0FDRSxTQUFDQyxRQUFELENBQVdDLElBQVgsUUFDRUEsQ0FBQUEsSUFBSSxDQUFDVCxNQUFMLENBQVliLEdBQVosRUFDSXFCLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjLGlCQUFNRCxDQUFBQSxJQUFJLENBQUNULE1BQUwsQ0FBWWIsR0FBWixFQUFpQkMsSUFBakIsQ0FBdUJxQixJQUFJLENBQUNOLE9BQTVCLENBQU4sRUFBZCxDQURKLENBRUlLLFFBSE4sRUFERixDQUtFRyxPQUFPLENBQUNDLE9BQVIsRUFMRixDQUR1QixFQUF6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vLmNhY2hlL2FwaS1ydW5uZXItYnJvd3Nlci5qcz9jNmRiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBsdWdpbnMgPSByZXF1aXJlKGAuL2FwaS1ydW5uZXItYnJvd3Nlci1wbHVnaW5zYClcbmNvbnN0IHsgZ2V0UmVzb3VyY2VVUkxzRm9yUGF0aG5hbWUsIGxvYWRQYWdlLCBsb2FkUGFnZVN5bmMgfSA9XG4gIHJlcXVpcmUoYC4vbG9hZGVyYCkucHVibGljTG9hZGVyXG5cbmV4cG9ydHMuYXBpUnVubmVyID0gKGFwaSwgYXJncyA9IHt9LCBkZWZhdWx0UmV0dXJuLCBhcmdUcmFuc2Zvcm0pID0+IHtcbiAgLy8gSG9va3MgZm9yIGdhdHNieS1jeXByZXNzJ3MgQVBJIGhhbmRsZXJcbiAgaWYgKHByb2Nlc3MuZW52LkNZUFJFU1NfU1VQUE9SVCkge1xuICAgIGlmICh3aW5kb3cuX19fYXBpSGFuZGxlcikge1xuICAgICAgd2luZG93Ll9fX2FwaUhhbmRsZXIoYXBpKVxuICAgIH0gZWxzZSBpZiAod2luZG93Ll9fX3Jlc29sdmVkQVBJcykge1xuICAgICAgd2luZG93Ll9fX3Jlc29sdmVkQVBJcy5wdXNoKGFwaSlcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Ll9fX3Jlc29sdmVkQVBJcyA9IFthcGldXG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3VsdHMgPSBwbHVnaW5zLm1hcChwbHVnaW4gPT4ge1xuICAgIGlmICghcGx1Z2luLnBsdWdpblthcGldKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgYXJncy5nZXRSZXNvdXJjZVVSTHNGb3JQYXRobmFtZSA9IGdldFJlc291cmNlVVJMc0ZvclBhdGhuYW1lXG4gICAgYXJncy5sb2FkUGFnZSA9IGxvYWRQYWdlXG4gICAgYXJncy5sb2FkUGFnZVN5bmMgPSBsb2FkUGFnZVN5bmNcblxuICAgIGNvbnN0IHJlc3VsdCA9IHBsdWdpbi5wbHVnaW5bYXBpXShhcmdzLCBwbHVnaW4ub3B0aW9ucylcbiAgICBpZiAocmVzdWx0ICYmIGFyZ1RyYW5zZm9ybSkge1xuICAgICAgYXJncyA9IGFyZ1RyYW5zZm9ybSh7IGFyZ3MsIHJlc3VsdCwgcGx1Z2luIH0pXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfSlcblxuICAvLyBGaWx0ZXIgb3V0IHVuZGVmaW5lZCByZXN1bHRzLlxuICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIocmVzdWx0ID0+IHR5cGVvZiByZXN1bHQgIT09IGB1bmRlZmluZWRgKVxuXG4gIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcmVzdWx0c1xuICB9IGVsc2UgaWYgKGRlZmF1bHRSZXR1cm4pIHtcbiAgICByZXR1cm4gW2RlZmF1bHRSZXR1cm5dXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0cy5hcGlSdW5uZXJBc3luYyA9IChhcGksIGFyZ3MsIGRlZmF1bHRSZXR1cm4pID0+XG4gIHBsdWdpbnMucmVkdWNlKFxuICAgIChwcmV2aW91cywgbmV4dCkgPT5cbiAgICAgIG5leHQucGx1Z2luW2FwaV1cbiAgICAgICAgPyBwcmV2aW91cy50aGVuKCgpID0+IG5leHQucGx1Z2luW2FwaV0oYXJncywgbmV4dC5vcHRpb25zKSlcbiAgICAgICAgOiBwcmV2aW91cyxcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICApXG4iXSwibmFtZXMiOlsicGx1Z2lucyIsInJlcXVpcmUiLCJwdWJsaWNMb2FkZXIiLCJnZXRSZXNvdXJjZVVSTHNGb3JQYXRobmFtZSIsImxvYWRQYWdlIiwibG9hZFBhZ2VTeW5jIiwiZXhwb3J0cyIsImFwaVJ1bm5lciIsImFwaSIsImFyZ3MiLCJkZWZhdWx0UmV0dXJuIiwiYXJnVHJhbnNmb3JtIiwicHJvY2VzcyIsImVudiIsIkNZUFJFU1NfU1VQUE9SVCIsIndpbmRvdyIsIl9fX2FwaUhhbmRsZXIiLCJfX19yZXNvbHZlZEFQSXMiLCJwdXNoIiwicmVzdWx0cyIsIm1hcCIsInBsdWdpbiIsInVuZGVmaW5lZCIsInJlc3VsdCIsIm9wdGlvbnMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJhcGlSdW5uZXJBc3luYyIsInJlZHVjZSIsInByZXZpb3VzIiwibmV4dCIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7343\n')},8110:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _cache_emitter; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/mitt/dist/mitt.es.js\n//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `"*"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `"*"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `"*"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all[\'*\'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\n/* harmony default export */ var mitt_es = (mitt);\n//# sourceMappingURL=mitt.es.js.map\n\n;// CONCATENATED MODULE: ./.cache/emitter.js\nvar emitter=mitt_es();/* harmony default export */ var _cache_emitter = (emitter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZUFBZTtBQUNyRSxxREFBcUQscUJBQXFCO0FBQzFFO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBZSxJQUFJLEVBQUM7QUFDcEI7OztBQzdEQSxHQUFNQyxDQUFBQSxPQUFPLENBQUdELE9BQUksRUFBcEIsQ0FDQSxtREFBZUMsT0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL21pdHQvZGlzdC9taXR0LmVzLmpzPzE0YjciLCJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi8uY2FjaGUvZW1pdHRlci5qcz9lNzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgICAgXG4vLyBBbiBldmVudCBoYW5kbGVyIGNhbiB0YWtlIGFuIG9wdGlvbmFsIGV2ZW50IGFyZ3VtZW50XG4vLyBhbmQgc2hvdWxkIG5vdCByZXR1cm4gYSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuLy8gQW4gYXJyYXkgb2YgYWxsIGN1cnJlbnRseSByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJzIGZvciBhIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEEgbWFwIG9mIGV2ZW50IHR5cGVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcihldnQpOyB9KTtcblx0XHRcdChhbGxbJyonXSB8fCBbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcih0eXBlLCBldnQpOyB9KTtcblx0XHR9XG5cdH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1pdHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXR0LmVzLmpzLm1hcFxuIiwiaW1wb3J0IG1pdHQgZnJvbSBcIm1pdHRcIlxuXG5jb25zdCBlbWl0dGVyID0gbWl0dCgpXG5leHBvcnQgZGVmYXVsdCBlbWl0dGVyXG4iXSwibmFtZXMiOlsibWl0dCIsImVtaXR0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8110\n')},2257:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "UD": function() { return /* binding */ findMatchPath; },\n  "Cj": function() { return /* binding */ findPath; },\n  "GA": function() { return /* binding */ grabMatchParams; },\n  "DS": function() { return /* binding */ setMatchPaths; }\n});\n\n// UNUSED EXPORTS: cleanPath\n\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/lib/utils.js\nvar utils = __webpack_require__(2098);\n// EXTERNAL MODULE: ./.cache/strip-prefix.js\nvar strip_prefix = __webpack_require__(1578);\n;// CONCATENATED MODULE: ./.cache/normalize-page-path.js\n/* harmony default export */ var normalize_page_path = (function(path){if(path===undefined){return path;}if(path==="/"){return"/";}if(path.charAt(path.length-1)==="/"){return path.slice(0,-1);}return path;});\n// EXTERNAL MODULE: ./.cache/redirect-utils.js + 1 modules\nvar redirect_utils = __webpack_require__(969);\n;// CONCATENATED MODULE: ./.cache/find-path.js\nvar pathCache=new Map();var matchPaths=[];var trimPathname=function trimPathname(rawPathname){var pathname=decodeURIComponent(rawPathname);// Remove the pathPrefix from the pathname.\nvar trimmedPathname=(0,strip_prefix/* default */.Z)(pathname,decodeURIComponent(""))// Remove any hashfragment\n.split("#")[0]// Remove search query\n.split("?")[0];return trimmedPathname;};function absolutify(path){// If it\'s already absolute, return as-is\nif(path.startsWith("/")||path.startsWith("https://")||path.startsWith("http://")){return path;}// Calculate path relative to current location, adding a trailing slash to\n// match behavior of @reach/router\nreturn new URL(path,window.location.href+(window.location.href.endsWith("/")?"":"/")).pathname;}/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */var setMatchPaths=function setMatchPaths(value){matchPaths=value;};/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */var findMatchPath=function findMatchPath(rawPathname){var trimmedPathname=cleanPath(rawPathname);var pickPaths=matchPaths.map(function(_ref){var path=_ref.path,matchPath=_ref.matchPath;return{path:matchPath,originalPath:path};});var path=(0,utils.pick)(pickPaths,trimmedPathname);if(path){return normalize_page_path(path.route.originalPath);}return null;};/**\n * Return a matchpath params from reach/router rules\n * if `match-paths.json` contains `{ ":bar/*foo" }`, and the path is /baz/zaz/zoo\n * then it returns\n *  { bar: baz, foo: zaz/zoo }\n *\n * @param {string} rawPathname A raw pathname\n * @return {object}\n */var grabMatchParams=function grabMatchParams(rawPathname){var trimmedPathname=cleanPath(rawPathname);var pickPaths=matchPaths.map(function(_ref2){var path=_ref2.path,matchPath=_ref2.matchPath;return{path:matchPath,originalPath:path};});var path=(0,utils.pick)(pickPaths,trimmedPathname);if(path){return path.params;}return{};};// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then\n// `/foo?bar=far` => `/page1`\nvar findPath=function findPath(rawPathname){var trimmedPathname=trimPathname(absolutify(rawPathname));if(pathCache.has(trimmedPathname)){return pathCache.get(trimmedPathname);}var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(rawPathname);if(redirect){return findPath(redirect.toPath);}var foundPath=findMatchPath(trimmedPathname);if(!foundPath){foundPath=cleanPath(rawPathname);}pathCache.set(trimmedPathname,foundPath);return foundPath;};/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */var cleanPath=function cleanPath(rawPathname){var trimmedPathname=trimPathname(absolutify(rawPathname));var foundPath=trimmedPathname;if(foundPath==="/index.html"){foundPath="/";}foundPath=normalize_page_path(foundPath);return foundPath;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI1Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQWUsU0FBQUEsSUFBSSxDQUFJLENBQ3JCLEdBQUlBLElBQUksR0FBS0MsU0FBYixDQUF3QixDQUN0QixNQUFPRCxDQUFBQSxJQUFQLENBQ0QsQ0FDRCxHQUFJQSxJQUFJLE1BQVIsQ0FBa0IsQ0FDaEIsVUFDRCxDQUNELEdBQUlBLElBQUksQ0FBQ0UsTUFBTCxDQUFZRixJQUFJLENBQUNHLE1BQUwsQ0FBYyxDQUExQixPQUFKLENBQTBDLENBQ3hDLE1BQU9ILENBQUFBLElBQUksQ0FBQ0ksS0FBTCxDQUFXLENBQVgsQ0FBYyxDQUFDLENBQWYsQ0FBUCxDQUNELENBQ0QsTUFBT0osQ0FBQUEsSUFBUCxDQUNELENBWEQsRTs7OztBQ0tBLEdBQU1TLENBQUFBLFNBQVMsQ0FBRyxHQUFJQyxDQUFBQSxHQUFKLEVBQWxCLENBQ0EsR0FBSUMsQ0FBQUEsVUFBVSxDQUFHLEVBQWpCLENBRUEsR0FBTUMsQ0FBQUEsWUFBWSxDQUFHLFFBQWZBLENBQUFBLFlBQWUsQ0FBQUMsV0FBVyxDQUFJLENBQ2xDLEdBQU1DLENBQUFBLFFBQVEsQ0FBR0Msa0JBQWtCLENBQUNGLFdBQUQsQ0FBbkMsQ0FDQTtBQUNBLEdBQU1HLENBQUFBLGVBQWUsQ0FBR1YsK0JBQVcsQ0FDakNRLFFBRGlDLENBRWpDQyxrQkFBa0IsQ0FBQ0UsRUFBRCxDQUZlLENBSWpDO0FBSnNCLENBS3JCQyxLQUxxQixNQUtWLENBTFUsQ0FNdEI7QUFOc0IsQ0FPckJBLEtBUHFCLE1BT1YsQ0FQVSxDQUF4QixDQVNBLE1BQU9GLENBQUFBLGVBQVAsQ0FDRCxDQWJELENBZUEsUUFBU0csQ0FBQUEsVUFBVCxDQUFvQm5CLElBQXBCLENBQTBCLENBQ3hCO0FBQ0EsR0FDRUEsSUFBSSxDQUFDb0IsVUFBTCxPQUNBcEIsSUFBSSxDQUFDb0IsVUFBTCxZQURBLEVBRUFwQixJQUFJLENBQUNvQixVQUFMLFdBSEYsQ0FJRSxDQUNBLE1BQU9wQixDQUFBQSxJQUFQLENBQ0QsQ0FDRDtBQUNBO0FBQ0EsTUFBTyxJQUFJcUIsQ0FBQUEsR0FBSixDQUNMckIsSUFESyxDQUVMc0IsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixFQUF3QkYsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixDQUFxQkMsUUFBckIsWUFBeEIsQ0FGSyxFQUdMWCxRQUhGLENBSUQsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ08sR0FBTVksQ0FBQUEsYUFBYSxDQUFHLFFBQWhCQSxDQUFBQSxhQUFnQixDQUFBQyxLQUFLLENBQUksQ0FDcENoQixVQUFVLENBQUdnQixLQUFiLENBQ0QsQ0FGTSxDQUlQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNQyxDQUFBQSxhQUFhLENBQUcsUUFBaEJBLENBQUFBLGFBQWdCLENBQUFmLFdBQVcsQ0FBSSxDQUMxQyxHQUFNRyxDQUFBQSxlQUFlLENBQUdhLFNBQVMsQ0FBQ2hCLFdBQUQsQ0FBakMsQ0FFQSxHQUFNaUIsQ0FBQUEsU0FBUyxDQUFHbkIsVUFBVSxDQUFDb0IsR0FBWCxDQUFlLGNBQXlCLElBQXRCL0IsQ0FBQUEsSUFBc0IsTUFBdEJBLElBQXNCLENBQWhCZ0MsU0FBZ0IsTUFBaEJBLFNBQWdCLENBQ3hELE1BQU8sQ0FDTGhDLElBQUksQ0FBRWdDLFNBREQsQ0FFTEMsWUFBWSxDQUFFakMsSUFGVCxDQUFQLENBSUQsQ0FMaUIsQ0FBbEIsQ0FPQSxHQUFNQSxDQUFBQSxJQUFJLENBQUdLLGNBQUksQ0FBQ3lCLFNBQUQsQ0FBWWQsZUFBWixDQUFqQixDQUVBLEdBQUloQixJQUFKLENBQVUsQ0FDUixNQUFPTyxDQUFBQSxtQkFBaUIsQ0FBQ1AsSUFBSSxDQUFDa0MsS0FBTCxDQUFXRCxZQUFaLENBQXhCLENBQ0QsQ0FFRCxNQUFPLEtBQVAsQ0FDRCxDQWpCTSxDQW1CUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNRSxDQUFBQSxlQUFlLENBQUcsUUFBbEJBLENBQUFBLGVBQWtCLENBQUF0QixXQUFXLENBQUksQ0FDNUMsR0FBTUcsQ0FBQUEsZUFBZSxDQUFHYSxTQUFTLENBQUNoQixXQUFELENBQWpDLENBRUEsR0FBTWlCLENBQUFBLFNBQVMsQ0FBR25CLFVBQVUsQ0FBQ29CLEdBQVgsQ0FBZSxlQUF5QixJQUF0Qi9CLENBQUFBLElBQXNCLE9BQXRCQSxJQUFzQixDQUFoQmdDLFNBQWdCLE9BQWhCQSxTQUFnQixDQUN4RCxNQUFPLENBQ0xoQyxJQUFJLENBQUVnQyxTQURELENBRUxDLFlBQVksQ0FBRWpDLElBRlQsQ0FBUCxDQUlELENBTGlCLENBQWxCLENBT0EsR0FBTUEsQ0FBQUEsSUFBSSxDQUFHSyxjQUFJLENBQUN5QixTQUFELENBQVlkLGVBQVosQ0FBakIsQ0FFQSxHQUFJaEIsSUFBSixDQUFVLENBQ1IsTUFBT0EsQ0FBQUEsSUFBSSxDQUFDb0MsTUFBWixDQUNELENBRUQsTUFBTyxFQUFQLENBQ0QsQ0FqQk0sQ0FtQlA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLEdBQU1DLENBQUFBLFFBQVEsQ0FBRyxRQUFYQSxDQUFBQSxRQUFXLENBQUF4QixXQUFXLENBQUksQ0FDckMsR0FBTUcsQ0FBQUEsZUFBZSxDQUFHSixZQUFZLENBQUNPLFVBQVUsQ0FBQ04sV0FBRCxDQUFYLENBQXBDLENBQ0EsR0FBSUosU0FBUyxDQUFDNkIsR0FBVixDQUFjdEIsZUFBZCxDQUFKLENBQW9DLENBQ2xDLE1BQU9QLENBQUFBLFNBQVMsQ0FBQzhCLEdBQVYsQ0FBY3ZCLGVBQWQsQ0FBUCxDQUNELENBRUQsR0FBTXdCLENBQUFBLFFBQVEsQ0FBR2hDLGlEQUF1QixDQUFDSyxXQUFELENBQXhDLENBQ0EsR0FBSTJCLFFBQUosQ0FBYyxDQUNaLE1BQU9ILENBQUFBLFFBQVEsQ0FBQ0csUUFBUSxDQUFDQyxNQUFWLENBQWYsQ0FDRCxDQUVELEdBQUlDLENBQUFBLFNBQVMsQ0FBR2QsYUFBYSxDQUFDWixlQUFELENBQTdCLENBRUEsR0FBSSxDQUFDMEIsU0FBTCxDQUFnQixDQUNkQSxTQUFTLENBQUdiLFNBQVMsQ0FBQ2hCLFdBQUQsQ0FBckIsQ0FDRCxDQUVESixTQUFTLENBQUNrQyxHQUFWLENBQWMzQixlQUFkLENBQStCMEIsU0FBL0IsRUFFQSxNQUFPQSxDQUFBQSxTQUFQLENBQ0QsQ0FwQk0sQ0FzQlA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNYixDQUFBQSxTQUFTLENBQUcsUUFBWkEsQ0FBQUEsU0FBWSxDQUFBaEIsV0FBVyxDQUFJLENBQ3RDLEdBQU1HLENBQUFBLGVBQWUsQ0FBR0osWUFBWSxDQUFDTyxVQUFVLENBQUNOLFdBQUQsQ0FBWCxDQUFwQyxDQUVBLEdBQUk2QixDQUFBQSxTQUFTLENBQUcxQixlQUFoQixDQUNBLEdBQUkwQixTQUFTLGdCQUFiLENBQWlDLENBQy9CQSxTQUFTLElBQVQsQ0FDRCxDQUVEQSxTQUFTLENBQUduQyxtQkFBaUIsQ0FBQ21DLFNBQUQsQ0FBN0IsQ0FFQSxNQUFPQSxDQUFBQSxTQUFQLENBQ0QsQ0FYTSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vLmNhY2hlL25vcm1hbGl6ZS1wYWdlLXBhdGguanM/NjdiNSIsIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uLy5jYWNoZS9maW5kLXBhdGguanM/ZGY0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBwYXRoID0+IHtcbiAgaWYgKHBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwYXRoXG4gIH1cbiAgaWYgKHBhdGggPT09IGAvYCkge1xuICAgIHJldHVybiBgL2BcbiAgfVxuICBpZiAocGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gYC9gKSB7XG4gICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgLTEpXG4gIH1cbiAgcmV0dXJuIHBhdGhcbn1cbiIsImltcG9ydCB7IHBpY2sgfSBmcm9tIFwiQGdhdHNieWpzL3JlYWNoLXJvdXRlci9saWIvdXRpbHNcIlxuaW1wb3J0IHN0cmlwUHJlZml4IGZyb20gXCIuL3N0cmlwLXByZWZpeFwiXG5pbXBvcnQgbm9ybWFsaXplUGFnZVBhdGggZnJvbSBcIi4vbm9ybWFsaXplLXBhZ2UtcGF0aFwiXG5pbXBvcnQgeyBtYXliZUdldEJyb3dzZXJSZWRpcmVjdCB9IGZyb20gXCIuL3JlZGlyZWN0LXV0aWxzLmpzXCJcblxuY29uc3QgcGF0aENhY2hlID0gbmV3IE1hcCgpXG5sZXQgbWF0Y2hQYXRocyA9IFtdXG5cbmNvbnN0IHRyaW1QYXRobmFtZSA9IHJhd1BhdGhuYW1lID0+IHtcbiAgY29uc3QgcGF0aG5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQocmF3UGF0aG5hbWUpXG4gIC8vIFJlbW92ZSB0aGUgcGF0aFByZWZpeCBmcm9tIHRoZSBwYXRobmFtZS5cbiAgY29uc3QgdHJpbW1lZFBhdGhuYW1lID0gc3RyaXBQcmVmaXgoXG4gICAgcGF0aG5hbWUsXG4gICAgZGVjb2RlVVJJQ29tcG9uZW50KF9fQkFTRV9QQVRIX18pXG4gIClcbiAgICAvLyBSZW1vdmUgYW55IGhhc2hmcmFnbWVudFxuICAgIC5zcGxpdChgI2ApWzBdXG4gICAgLy8gUmVtb3ZlIHNlYXJjaCBxdWVyeVxuICAgIC5zcGxpdChgP2ApWzBdXG5cbiAgcmV0dXJuIHRyaW1tZWRQYXRobmFtZVxufVxuXG5mdW5jdGlvbiBhYnNvbHV0aWZ5KHBhdGgpIHtcbiAgLy8gSWYgaXQncyBhbHJlYWR5IGFic29sdXRlLCByZXR1cm4gYXMtaXNcbiAgaWYgKFxuICAgIHBhdGguc3RhcnRzV2l0aChgL2ApIHx8XG4gICAgcGF0aC5zdGFydHNXaXRoKGBodHRwczovL2ApIHx8XG4gICAgcGF0aC5zdGFydHNXaXRoKGBodHRwOi8vYClcbiAgKSB7XG4gICAgcmV0dXJuIHBhdGhcbiAgfVxuICAvLyBDYWxjdWxhdGUgcGF0aCByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLCBhZGRpbmcgYSB0cmFpbGluZyBzbGFzaCB0b1xuICAvLyBtYXRjaCBiZWhhdmlvciBvZiBAcmVhY2gvcm91dGVyXG4gIHJldHVybiBuZXcgVVJMKFxuICAgIHBhdGgsXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgKyAod2luZG93LmxvY2F0aW9uLmhyZWYuZW5kc1dpdGgoYC9gKSA/IGBgIDogYC9gKVxuICApLnBhdGhuYW1lXG59XG5cbi8qKlxuICogU2V0IGxpc3Qgb2YgbWF0Y2hQYXRoc1xuICpcbiAqIEBwYXJhbSB7QXJyYXk8e3BhdGg6IHN0cmluZywgbWF0Y2hQYXRoOiBzdHJpbmd9Pn0gdmFsdWUgY29sbGVjdGlvbiBvZiBtYXRjaFBhdGhzXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRNYXRjaFBhdGhzID0gdmFsdWUgPT4ge1xuICBtYXRjaFBhdGhzID0gdmFsdWVcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBtYXRjaHBhdGggdXJsXG4gKiBpZiBgbWF0Y2gtcGF0aHMuanNvbmAgY29udGFpbnMgYHsgXCIvZm9vKlwiOiBcIi9wYWdlMVwiLCAuLi59YCwgdGhlblxuICogYC9mb28/YmFyPWZhcmAgPT4gYC9wYWdlMWBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmF3UGF0aG5hbWUgQSByYXcgcGF0aG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICovXG5leHBvcnQgY29uc3QgZmluZE1hdGNoUGF0aCA9IHJhd1BhdGhuYW1lID0+IHtcbiAgY29uc3QgdHJpbW1lZFBhdGhuYW1lID0gY2xlYW5QYXRoKHJhd1BhdGhuYW1lKVxuXG4gIGNvbnN0IHBpY2tQYXRocyA9IG1hdGNoUGF0aHMubWFwKCh7IHBhdGgsIG1hdGNoUGF0aCB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IG1hdGNoUGF0aCxcbiAgICAgIG9yaWdpbmFsUGF0aDogcGF0aCxcbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgcGF0aCA9IHBpY2socGlja1BhdGhzLCB0cmltbWVkUGF0aG5hbWUpXG5cbiAgaWYgKHBhdGgpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplUGFnZVBhdGgocGF0aC5yb3V0ZS5vcmlnaW5hbFBhdGgpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIFJldHVybiBhIG1hdGNocGF0aCBwYXJhbXMgZnJvbSByZWFjaC9yb3V0ZXIgcnVsZXNcbiAqIGlmIGBtYXRjaC1wYXRocy5qc29uYCBjb250YWlucyBgeyBcIjpiYXIvKmZvb1wiIH1gLCBhbmQgdGhlIHBhdGggaXMgL2Jhei96YXovem9vXG4gKiB0aGVuIGl0IHJldHVybnNcbiAqICB7IGJhcjogYmF6LCBmb286IHphei96b28gfVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXdQYXRobmFtZSBBIHJhdyBwYXRobmFtZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgY29uc3QgZ3JhYk1hdGNoUGFyYW1zID0gcmF3UGF0aG5hbWUgPT4ge1xuICBjb25zdCB0cmltbWVkUGF0aG5hbWUgPSBjbGVhblBhdGgocmF3UGF0aG5hbWUpXG5cbiAgY29uc3QgcGlja1BhdGhzID0gbWF0Y2hQYXRocy5tYXAoKHsgcGF0aCwgbWF0Y2hQYXRoIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogbWF0Y2hQYXRoLFxuICAgICAgb3JpZ2luYWxQYXRoOiBwYXRoLFxuICAgIH1cbiAgfSlcblxuICBjb25zdCBwYXRoID0gcGljayhwaWNrUGF0aHMsIHRyaW1tZWRQYXRobmFtZSlcblxuICBpZiAocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnBhcmFtc1xuICB9XG5cbiAgcmV0dXJuIHt9XG59XG5cbi8vIEdpdmVuIGEgcmF3IFVSTCBwYXRoLCByZXR1cm5zIHRoZSBjbGVhbmVkIHZlcnNpb24gb2YgaXQgKHRyaW0gb2ZmXG4vLyBgI2AgYW5kIHF1ZXJ5IHBhcmFtcyksIG9yIGlmIGl0IG1hdGNoZXMgYW4gZW50cnkgaW5cbi8vIGBtYXRjaC1wYXRocy5qc29uYCwgaXRzIG1hdGNoZWQgcGF0aCBpcyByZXR1cm5lZFxuLy9cbi8vIEUuZy4gYC9mb28/YmFyPWZhcmAgPT4gYC9mb29gXG4vL1xuLy8gT3IgaWYgYG1hdGNoLXBhdGhzLmpzb25gIGNvbnRhaW5zIGB7IFwiL2ZvbypcIjogXCIvcGFnZTFcIiwgLi4ufWAsIHRoZW5cbi8vIGAvZm9vP2Jhcj1mYXJgID0+IGAvcGFnZTFgXG5leHBvcnQgY29uc3QgZmluZFBhdGggPSByYXdQYXRobmFtZSA9PiB7XG4gIGNvbnN0IHRyaW1tZWRQYXRobmFtZSA9IHRyaW1QYXRobmFtZShhYnNvbHV0aWZ5KHJhd1BhdGhuYW1lKSlcbiAgaWYgKHBhdGhDYWNoZS5oYXModHJpbW1lZFBhdGhuYW1lKSkge1xuICAgIHJldHVybiBwYXRoQ2FjaGUuZ2V0KHRyaW1tZWRQYXRobmFtZSlcbiAgfVxuXG4gIGNvbnN0IHJlZGlyZWN0ID0gbWF5YmVHZXRCcm93c2VyUmVkaXJlY3QocmF3UGF0aG5hbWUpXG4gIGlmIChyZWRpcmVjdCkge1xuICAgIHJldHVybiBmaW5kUGF0aChyZWRpcmVjdC50b1BhdGgpXG4gIH1cblxuICBsZXQgZm91bmRQYXRoID0gZmluZE1hdGNoUGF0aCh0cmltbWVkUGF0aG5hbWUpXG5cbiAgaWYgKCFmb3VuZFBhdGgpIHtcbiAgICBmb3VuZFBhdGggPSBjbGVhblBhdGgocmF3UGF0aG5hbWUpXG4gIH1cblxuICBwYXRoQ2FjaGUuc2V0KHRyaW1tZWRQYXRobmFtZSwgZm91bmRQYXRoKVxuXG4gIHJldHVybiBmb3VuZFBhdGhcbn1cblxuLyoqXG4gKiBDbGVhbiBhIHVybCBhbmQgY29udmVydHMgL2luZGV4Lmh0bWwgPT4gL1xuICogRS5nLiBgL2Zvbz9iYXI9ZmFyYCA9PiBgL2Zvb2BcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmF3UGF0aG5hbWUgQSByYXcgcGF0aG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGNsZWFuUGF0aCA9IHJhd1BhdGhuYW1lID0+IHtcbiAgY29uc3QgdHJpbW1lZFBhdGhuYW1lID0gdHJpbVBhdGhuYW1lKGFic29sdXRpZnkocmF3UGF0aG5hbWUpKVxuXG4gIGxldCBmb3VuZFBhdGggPSB0cmltbWVkUGF0aG5hbWVcbiAgaWYgKGZvdW5kUGF0aCA9PT0gYC9pbmRleC5odG1sYCkge1xuICAgIGZvdW5kUGF0aCA9IGAvYFxuICB9XG5cbiAgZm91bmRQYXRoID0gbm9ybWFsaXplUGFnZVBhdGgoZm91bmRQYXRoKVxuXG4gIHJldHVybiBmb3VuZFBhdGhcbn1cbiJdLCJuYW1lcyI6WyJwYXRoIiwidW5kZWZpbmVkIiwiY2hhckF0IiwibGVuZ3RoIiwic2xpY2UiLCJwaWNrIiwic3RyaXBQcmVmaXgiLCJub3JtYWxpemVQYWdlUGF0aCIsIm1heWJlR2V0QnJvd3NlclJlZGlyZWN0IiwicGF0aENhY2hlIiwiTWFwIiwibWF0Y2hQYXRocyIsInRyaW1QYXRobmFtZSIsInJhd1BhdGhuYW1lIiwicGF0aG5hbWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltbWVkUGF0aG5hbWUiLCJfX0JBU0VfUEFUSF9fIiwic3BsaXQiLCJhYnNvbHV0aWZ5Iiwic3RhcnRzV2l0aCIsIlVSTCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImVuZHNXaXRoIiwic2V0TWF0Y2hQYXRocyIsInZhbHVlIiwiZmluZE1hdGNoUGF0aCIsImNsZWFuUGF0aCIsInBpY2tQYXRocyIsIm1hcCIsIm1hdGNoUGF0aCIsIm9yaWdpbmFsUGF0aCIsInJvdXRlIiwiZ3JhYk1hdGNoUGFyYW1zIiwicGFyYW1zIiwiZmluZFBhdGgiLCJoYXMiLCJnZXQiLCJyZWRpcmVjdCIsInRvUGF0aCIsImZvdW5kUGF0aCIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2257\n')},5444:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Link": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.ZP; },\n/* harmony export */   "PageRenderer": function() { return /* reexport default from dynamic */ _public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default.a; },\n/* harmony export */   "StaticQuery": function() { return /* binding */ StaticQuery; },\n/* harmony export */   "StaticQueryContext": function() { return /* binding */ StaticQueryContext; },\n/* harmony export */   "graphql": function() { return /* binding */ graphql; },\n/* harmony export */   "navigate": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.c4; },\n/* harmony export */   "parsePath": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.cP; },\n/* harmony export */   "prefetchPathname": function() { return /* binding */ prefetchPathname; },\n/* harmony export */   "useScrollRestoration": function() { return /* reexport safe */ gatsby_react_router_scroll__WEBPACK_IMPORTED_MODULE_2__.p2; },\n/* harmony export */   "useStaticQuery": function() { return /* binding */ useStaticQuery; },\n/* harmony export */   "withAssetPrefix": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.mc; },\n/* harmony export */   "withPrefix": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.dq; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var gatsby_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8037);\n/* harmony import */ var gatsby_react_router_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9679);\n/* harmony import */ var _public_page_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(861);\n/* harmony import */ var _public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8741);\nvar prefetchPathname=_loader__WEBPACK_IMPORTED_MODULE_4__/* ["default"].enqueue */ .ZP.enqueue;var StaticQueryContext=/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function StaticQueryDataRenderer(_ref){var staticQueryData=_ref.staticQueryData,data=_ref.data,query=_ref.query,render=_ref.render;var finalData=data?data.data:staticQueryData[query]&&staticQueryData[query].data;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,finalData&&render(finalData),!finalData&&/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Loading (StaticQuery)"));}var StaticQuery=function StaticQuery(props){var data=props.data,query=props.query,render=props.render,children=props.children;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticQueryContext.Consumer,null,function(staticQueryData){return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticQueryDataRenderer,{data:data,query:query,render:render||children,staticQueryData:staticQueryData});});};var useStaticQuery=function useStaticQuery(query){var _context$query;if(typeof react__WEBPACK_IMPORTED_MODULE_0__.useContext!=="function"&&"production"==="development"){}var context=react__WEBPACK_IMPORTED_MODULE_0__.useContext(StaticQueryContext);// query is a stringified number like `3303882` when wrapped with graphql, If a user forgets\n// to wrap the query in a grqphql, then casting it to a Number results in `NaN` allowing us to\n// catch the misuse of the API and give proper direction\nif(isNaN(Number(query))){throw new Error("useStaticQuery was called with a string but expects to be called using `graphql`. Try this:\\n\\nimport { useStaticQuery, graphql } from \'gatsby\';\\n\\nuseStaticQuery(graphql`"+query+"`);\\n");}if((_context$query=context[query])!==null&&_context$query!==void 0&&_context$query.data){return context[query].data;}else{throw new Error("The result of this StaticQuery could not be fetched.\\n\\n"+"This is likely a bug in Gatsby and if refreshing the page does not fix it, "+"please open an issue in https://github.com/gatsbyjs/gatsby/issues");}};function graphql(){throw new Error("It appears like Gatsby is misconfigured. Gatsby related `graphql` calls "+"are supposed to only be evaluated at compile time, and then compiled away. "+"Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n"+"Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.");}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ0NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUFNWSxDQUFBQSxnQkFBZ0IsQ0FBR0QseUVBQXpCLENBRUEsR0FBTUcsQ0FBQUEsa0JBQWtCLGNBQUdkLGdEQUFBLENBQW9CLEVBQXBCLENBQTNCLENBRUEsUUFBU2dCLENBQUFBLHVCQUFULE1BQTJFLElBQXhDQyxDQUFBQSxlQUF3QyxNQUF4Q0EsZUFBd0MsQ0FBdkJDLElBQXVCLE1BQXZCQSxJQUF1QixDQUFqQkMsS0FBaUIsTUFBakJBLEtBQWlCLENBQVZDLE1BQVUsTUFBVkEsTUFBVSxDQUN6RSxHQUFNQyxDQUFBQSxTQUFTLENBQUdILElBQUksQ0FDbEJBLElBQUksQ0FBQ0EsSUFEYSxDQUVsQkQsZUFBZSxDQUFDRSxLQUFELENBQWYsRUFBMEJGLGVBQWUsQ0FBQ0UsS0FBRCxDQUFmLENBQXVCRCxJQUZyRCxDQUlBLG1CQUNFLGlEQUFDLDJDQUFELE1BQ0dHLFNBQVMsRUFBSUQsTUFBTSxDQUFDQyxTQUFELENBRHRCLENBRUcsQ0FBQ0EsU0FBRCxlQUFjLG9GQUZqQixDQURGLENBTUQsQ0FFRCxHQUFNQyxDQUFBQSxXQUFXLENBQUcsUUFBZEEsQ0FBQUEsV0FBYyxDQUFBQyxLQUFLLENBQUksQ0FDM0IsR0FBUUwsQ0FBQUEsSUFBUixDQUEwQ0ssS0FBMUMsQ0FBUUwsSUFBUixDQUFjQyxLQUFkLENBQTBDSSxLQUExQyxDQUFjSixLQUFkLENBQXFCQyxNQUFyQixDQUEwQ0csS0FBMUMsQ0FBcUJILE1BQXJCLENBQTZCSSxRQUE3QixDQUEwQ0QsS0FBMUMsQ0FBNkJDLFFBQTdCLENBRUEsbUJBQ0UsaURBQUMsa0JBQUQsQ0FBb0IsUUFBcEIsTUFDRyxTQUFBUCxlQUFlLHFCQUNkLGlEQUFDLHVCQUFELEVBQ0UsSUFBSSxDQUFFQyxJQURSLENBRUUsS0FBSyxDQUFFQyxLQUZULENBR0UsTUFBTSxDQUFFQyxNQUFNLEVBQUlJLFFBSHBCLENBSUUsZUFBZSxDQUFFUCxlQUpuQixFQURjLEVBRGxCLENBREYsQ0FZRCxDQWZELENBaUJBLEdBQU1RLENBQUFBLGNBQWMsQ0FBRyxRQUFqQkEsQ0FBQUEsY0FBaUIsQ0FBQU4sS0FBSyxDQUFJLG9CQUM5QixHQUNFLE1BQU9uQixDQUFBQSw2Q0FBUCxlQUNBMkIsWUFBQSxnQkFGRixDQUdFLEVBTUYsR0FBTUksQ0FBQUEsT0FBTyxDQUFHL0IsNkNBQUEsQ0FBaUJjLGtCQUFqQixDQUFoQixDQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUlrQixLQUFLLENBQUNDLE1BQU0sQ0FBQ2QsS0FBRCxDQUFQLENBQVQsQ0FBMEIsQ0FDeEIsS0FBTSxJQUFJVyxDQUFBQSxLQUFKLCtLQUlnQlgsS0FKaEIsU0FBTixDQU1ELENBRUQsbUJBQUlZLE9BQU8sQ0FBQ1osS0FBRCxDQUFYLG1DQUFJLGVBQWdCRCxJQUFwQixDQUEwQixDQUN4QixNQUFPYSxDQUFBQSxPQUFPLENBQUNaLEtBQUQsQ0FBUCxDQUFlRCxJQUF0QixDQUNELENBRkQsSUFFTyxDQUNMLEtBQU0sSUFBSVksQ0FBQUEsS0FBSixDQUNKLDRNQURJLENBQU4sQ0FLRCxDQUNGLENBakNELENBMENBLFFBQVNJLENBQUFBLE9BQVQsRUFBbUIsQ0FDakIsS0FBTSxJQUFJSixDQUFBQSxLQUFKLENBQ0oscVZBREksQ0FBTixDQU1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi8uY2FjaGUvZ2F0c2J5LWJyb3dzZXItZW50cnkuanM/NTliYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIlxuaW1wb3J0IExpbmssIHtcbiAgd2l0aFByZWZpeCxcbiAgd2l0aEFzc2V0UHJlZml4LFxuICBuYXZpZ2F0ZSxcbiAgcHVzaCxcbiAgcmVwbGFjZSxcbiAgbmF2aWdhdGVUbyxcbiAgcGFyc2VQYXRoLFxufSBmcm9tIFwiZ2F0c2J5LWxpbmtcIlxuaW1wb3J0IHsgdXNlU2Nyb2xsUmVzdG9yYXRpb24gfSBmcm9tIFwiZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxcIlxuaW1wb3J0IFBhZ2VSZW5kZXJlciBmcm9tIFwiLi9wdWJsaWMtcGFnZS1yZW5kZXJlclwiXG5pbXBvcnQgbG9hZGVyIGZyb20gXCIuL2xvYWRlclwiXG5cbmNvbnN0IHByZWZldGNoUGF0aG5hbWUgPSBsb2FkZXIuZW5xdWV1ZVxuXG5jb25zdCBTdGF0aWNRdWVyeUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KVxuXG5mdW5jdGlvbiBTdGF0aWNRdWVyeURhdGFSZW5kZXJlcih7IHN0YXRpY1F1ZXJ5RGF0YSwgZGF0YSwgcXVlcnksIHJlbmRlciB9KSB7XG4gIGNvbnN0IGZpbmFsRGF0YSA9IGRhdGFcbiAgICA/IGRhdGEuZGF0YVxuICAgIDogc3RhdGljUXVlcnlEYXRhW3F1ZXJ5XSAmJiBzdGF0aWNRdWVyeURhdGFbcXVlcnldLmRhdGFcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIHtmaW5hbERhdGEgJiYgcmVuZGVyKGZpbmFsRGF0YSl9XG4gICAgICB7IWZpbmFsRGF0YSAmJiA8ZGl2PkxvYWRpbmcgKFN0YXRpY1F1ZXJ5KTwvZGl2Pn1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmNvbnN0IFN0YXRpY1F1ZXJ5ID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IGRhdGEsIHF1ZXJ5LCByZW5kZXIsIGNoaWxkcmVuIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPFN0YXRpY1F1ZXJ5Q29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtzdGF0aWNRdWVyeURhdGEgPT4gKFxuICAgICAgICA8U3RhdGljUXVlcnlEYXRhUmVuZGVyZXJcbiAgICAgICAgICBkYXRhPXtkYXRhfVxuICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICByZW5kZXI9e3JlbmRlciB8fCBjaGlsZHJlbn1cbiAgICAgICAgICBzdGF0aWNRdWVyeURhdGE9e3N0YXRpY1F1ZXJ5RGF0YX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9TdGF0aWNRdWVyeUNvbnRleHQuQ29uc3VtZXI+XG4gIClcbn1cblxuY29uc3QgdXNlU3RhdGljUXVlcnkgPSBxdWVyeSA9PiB7XG4gIGlmIChcbiAgICB0eXBlb2YgUmVhY3QudXNlQ29udGV4dCAhPT0gYGZ1bmN0aW9uYCAmJlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBgZGV2ZWxvcG1lbnRgXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBZb3UncmUgbGlrZWx5IHVzaW5nIGEgdmVyc2lvbiBvZiBSZWFjdCB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBIb29rc1xcbmAgK1xuICAgICAgICBgUGxlYXNlIHVwZGF0ZSBSZWFjdCBhbmQgUmVhY3RET00gdG8gMTYuOC4wIG9yIGxhdGVyIHRvIHVzZSB0aGUgdXNlU3RhdGljUXVlcnkgaG9vay5gXG4gICAgKVxuICB9XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFN0YXRpY1F1ZXJ5Q29udGV4dClcblxuICAvLyBxdWVyeSBpcyBhIHN0cmluZ2lmaWVkIG51bWJlciBsaWtlIGAzMzAzODgyYCB3aGVuIHdyYXBwZWQgd2l0aCBncmFwaHFsLCBJZiBhIHVzZXIgZm9yZ2V0c1xuICAvLyB0byB3cmFwIHRoZSBxdWVyeSBpbiBhIGdycXBocWwsIHRoZW4gY2FzdGluZyBpdCB0byBhIE51bWJlciByZXN1bHRzIGluIGBOYU5gIGFsbG93aW5nIHVzIHRvXG4gIC8vIGNhdGNoIHRoZSBtaXN1c2Ugb2YgdGhlIEFQSSBhbmQgZ2l2ZSBwcm9wZXIgZGlyZWN0aW9uXG4gIGlmIChpc05hTihOdW1iZXIocXVlcnkpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdXNlU3RhdGljUXVlcnkgd2FzIGNhbGxlZCB3aXRoIGEgc3RyaW5nIGJ1dCBleHBlY3RzIHRvIGJlIGNhbGxlZCB1c2luZyBcXGBncmFwaHFsXFxgLiBUcnkgdGhpczpcblxuaW1wb3J0IHsgdXNlU3RhdGljUXVlcnksIGdyYXBocWwgfSBmcm9tICdnYXRzYnknO1xuXG51c2VTdGF0aWNRdWVyeShncmFwaHFsXFxgJHtxdWVyeX1cXGApO1xuYClcbiAgfVxuXG4gIGlmIChjb250ZXh0W3F1ZXJ5XT8uZGF0YSkge1xuICAgIHJldHVybiBjb250ZXh0W3F1ZXJ5XS5kYXRhXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSByZXN1bHQgb2YgdGhpcyBTdGF0aWNRdWVyeSBjb3VsZCBub3QgYmUgZmV0Y2hlZC5cXG5cXG5gICtcbiAgICAgICAgYFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIEdhdHNieSBhbmQgaWYgcmVmcmVzaGluZyB0aGUgcGFnZSBkb2VzIG5vdCBmaXggaXQsIGAgK1xuICAgICAgICBgcGxlYXNlIG9wZW4gYW4gaXNzdWUgaW4gaHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWpzL2dhdHNieS9pc3N1ZXNgXG4gICAgKVxuICB9XG59XG5cblN0YXRpY1F1ZXJ5LnByb3BUeXBlcyA9IHtcbiAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgcXVlcnk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLFxufVxuXG5mdW5jdGlvbiBncmFwaHFsKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYEl0IGFwcGVhcnMgbGlrZSBHYXRzYnkgaXMgbWlzY29uZmlndXJlZC4gR2F0c2J5IHJlbGF0ZWQgXFxgZ3JhcGhxbFxcYCBjYWxscyBgICtcbiAgICAgIGBhcmUgc3VwcG9zZWQgdG8gb25seSBiZSBldmFsdWF0ZWQgYXQgY29tcGlsZSB0aW1lLCBhbmQgdGhlbiBjb21waWxlZCBhd2F5LiBgICtcbiAgICAgIGBVbmZvcnR1bmF0ZWx5LCBzb21ldGhpbmcgd2VudCB3cm9uZyBhbmQgdGhlIHF1ZXJ5IHdhcyBsZWZ0IGluIHRoZSBjb21waWxlZCBjb2RlLlxcblxcbmAgK1xuICAgICAgYFVubGVzcyB5b3VyIHNpdGUgaGFzIGEgY29tcGxleCBvciBjdXN0b20gYmFiZWwvR2F0c2J5IGNvbmZpZ3VyYXRpb24gdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gR2F0c2J5LmBcbiAgKVxufVxuXG5leHBvcnQge1xuICBMaW5rLFxuICB3aXRoQXNzZXRQcmVmaXgsXG4gIHdpdGhQcmVmaXgsXG4gIGdyYXBocWwsXG4gIHBhcnNlUGF0aCxcbiAgbmF2aWdhdGUsXG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uLFxuICBTdGF0aWNRdWVyeUNvbnRleHQsXG4gIFN0YXRpY1F1ZXJ5LFxuICBQYWdlUmVuZGVyZXIsXG4gIHVzZVN0YXRpY1F1ZXJ5LFxuICBwcmVmZXRjaFBhdGhuYW1lLFxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiTGluayIsIndpdGhQcmVmaXgiLCJ3aXRoQXNzZXRQcmVmaXgiLCJuYXZpZ2F0ZSIsInB1c2giLCJyZXBsYWNlIiwibmF2aWdhdGVUbyIsInBhcnNlUGF0aCIsInVzZVNjcm9sbFJlc3RvcmF0aW9uIiwiUGFnZVJlbmRlcmVyIiwibG9hZGVyIiwicHJlZmV0Y2hQYXRobmFtZSIsImVucXVldWUiLCJTdGF0aWNRdWVyeUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiU3RhdGljUXVlcnlEYXRhUmVuZGVyZXIiLCJzdGF0aWNRdWVyeURhdGEiLCJkYXRhIiwicXVlcnkiLCJyZW5kZXIiLCJmaW5hbERhdGEiLCJTdGF0aWNRdWVyeSIsInByb3BzIiwiY2hpbGRyZW4iLCJ1c2VTdGF0aWNRdWVyeSIsInVzZUNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJFcnJvciIsImNvbnRleHQiLCJpc05hTiIsIk51bWJlciIsImdyYXBocWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5444\n')},8741:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "uQ": function() { return /* binding */ PageResourceStatus; },\n  "kL": function() { return /* binding */ ProdLoader; },\n  "ZP": function() { return /* binding */ loader; },\n  "hs": function() { return /* binding */ getStaticQueryResults; },\n  "jN": function() { return /* binding */ publicLoader; },\n  "N1": function() { return /* binding */ setLoader; }\n});\n\n// UNUSED EXPORTS: BaseLoader\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(2982);\n;// CONCATENATED MODULE: ./.cache/prefetch.js\nvar support=function support(feature){if(typeof document==="undefined"){return false;}var fakeLink=document.createElement("link");try{if(fakeLink.relList&&typeof fakeLink.relList.supports==="function"){return fakeLink.relList.supports(feature);}}catch(err){return false;}return false;};var linkPrefetchStrategy=function linkPrefetchStrategy(url,options){return new Promise(function(resolve,reject){if(typeof document==="undefined"){reject();return;}var link=document.createElement("link");link.setAttribute("rel","prefetch");link.setAttribute("href",url);Object.keys(options).forEach(function(key){link.setAttribute(key,options[key]);});link.onload=resolve;link.onerror=reject;var parentElement=document.getElementsByTagName("head")[0]||document.getElementsByName("script")[0].parentNode;parentElement.appendChild(link);});};var xhrPrefetchStrategy=function xhrPrefetchStrategy(url){return new Promise(function(resolve,reject){var req=new XMLHttpRequest();req.open("GET",url,true);req.onload=function(){if(req.status===200){resolve();}else{reject();}};req.send(null);});};var supportedPrefetchStrategy=support("prefetch")?linkPrefetchStrategy:xhrPrefetchStrategy;var preFetched={};var prefetch=function prefetch(url,options){return new Promise(function(resolve){if(preFetched[url]){resolve();return;}supportedPrefetchStrategy(url,options).then(function(){resolve();preFetched[url]=true;}).catch(function(){});// 404s are logged to the console anyway\n});};/* harmony default export */ var _cache_prefetch = (prefetch);\n// EXTERNAL MODULE: ./.cache/emitter.js + 1 modules\nvar emitter = __webpack_require__(8110);\n// EXTERNAL MODULE: ./.cache/find-path.js + 1 modules\nvar find_path = __webpack_require__(2257);\n;// CONCATENATED MODULE: ./.cache/loader.js\n/**\n * Available resource loading statuses\n */var PageResourceStatus={/**\n   * At least one of critical resources failed to load\n   */Error:"error",/**\n   * Resources loaded successfully\n   */Success:"success"};var preferDefault=function preferDefault(m){return m&&m.default||m;};var stripSurroundingSlashes=function stripSurroundingSlashes(s){s=s[0]==="/"?s.slice(1):s;s=s.endsWith("/")?s.slice(0,-1):s;return s;};var createPageDataUrl=function createPageDataUrl(path){var fixedPath=path==="/"?"index":stripSurroundingSlashes(path);return ""+"/page-data/"+fixedPath+"/page-data.json";};function doFetch(url,method){if(method===void 0){method="GET";}return new Promise(function(resolve,reject){var req=new XMLHttpRequest();req.open(method,url,true);req.onreadystatechange=function(){if(req.readyState==4){resolve(req);}};req.send(null);});}var doesConnectionSupportPrefetch=function doesConnectionSupportPrefetch(){if("connection"in navigator&&typeof navigator.connection!=="undefined"){if((navigator.connection.effectiveType||"").includes("2g")){return false;}if(navigator.connection.saveData){return false;}}return true;};var toPageResources=function toPageResources(pageData,component){if(component===void 0){component=null;}var page={componentChunkName:pageData.componentChunkName,path:pageData.path,webpackCompilationHash:pageData.webpackCompilationHash,matchPath:pageData.matchPath,staticQueryHashes:pageData.staticQueryHashes};return{component:component,json:pageData.result,page:page};};var BaseLoader=/*#__PURE__*/function(){function BaseLoader(loadComponent,matchPaths){this.inFlightNetworkRequests=new Map();// Map of pagePath -> Page. Where Page is an object with: {\n//   status: PageResourceStatus.Success || PageResourceStatus.Error,\n//   payload: PageResources, // undefined if PageResourceStatus.Error\n// }\n// PageResources is {\n//   component,\n//   json: pageData.result,\n//   page: {\n//     componentChunkName,\n//     path,\n//     webpackCompilationHash,\n//     staticQueryHashes\n//   },\n//   staticQueryResults\n// }\nthis.pageDb=new Map();this.inFlightDb=new Map();this.staticQueryDb={};this.pageDataDb=new Map();this.prefetchTriggered=new Set();this.prefetchCompleted=new Set();this.loadComponent=loadComponent;(0,find_path/* setMatchPaths */.DS)(matchPaths);}var _proto=BaseLoader.prototype;_proto.memoizedGet=function memoizedGet(url){var _this=this;var inFlightPromise=this.inFlightNetworkRequests.get(url);if(!inFlightPromise){inFlightPromise=doFetch(url,"GET");this.inFlightNetworkRequests.set(url,inFlightPromise);}// Prefer duplication with then + catch over .finally to prevent problems in ie11 + firefox\nreturn inFlightPromise.then(function(response){_this.inFlightNetworkRequests.delete(url);return response;}).catch(function(err){_this.inFlightNetworkRequests.delete(url);throw err;});};_proto.setApiRunner=function setApiRunner(apiRunner){this.apiRunner=apiRunner;this.prefetchDisabled=apiRunner("disableCorePrefetching").some(function(a){return a;});};_proto.fetchPageDataJson=function fetchPageDataJson(loadObj){var _this2=this;var pagePath=loadObj.pagePath,_loadObj$retries=loadObj.retries,retries=_loadObj$retries===void 0?0:_loadObj$retries;var url=createPageDataUrl(pagePath);return this.memoizedGet(url).then(function(req){var status=req.status,responseText=req.responseText;// Handle 200\nif(status===200){try{var jsonPayload=JSON.parse(responseText);if(jsonPayload.path===undefined){throw new Error("not a valid pageData response");}return Object.assign(loadObj,{status:PageResourceStatus.Success,payload:jsonPayload});}catch(err){// continue regardless of error\n}}// Handle 404\nif(status===404||status===200){// If the request was for a 404 page and it doesn\'t exist, we\'re done\nif(pagePath==="/404.html"){return Object.assign(loadObj,{status:PageResourceStatus.Error});}// Need some code here to cache the 404 request. In case\n// multiple loadPageDataJsons result in 404s\nreturn _this2.fetchPageDataJson(Object.assign(loadObj,{pagePath:"/404.html",notFound:true}));}// handle 500 response (Unrecoverable)\nif(status===500){return Object.assign(loadObj,{status:PageResourceStatus.Error});}// Handle everything else, including status === 0, and 503s. Should retry\nif(retries<3){return _this2.fetchPageDataJson(Object.assign(loadObj,{retries:retries+1}));}// Retried 3 times already, result is an error.\nreturn Object.assign(loadObj,{status:PageResourceStatus.Error});});};_proto.loadPageDataJson=function loadPageDataJson(rawPath){var _this3=this;var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDataDb.has(pagePath)){var pageData=this.pageDataDb.get(pagePath);if(true){return Promise.resolve(pageData);}}return this.fetchPageDataJson({pagePath:pagePath}).then(function(pageData){_this3.pageDataDb.set(pagePath,pageData);return pageData;});};_proto.findMatchPath=function findMatchPath(rawPath){return (0,find_path/* findMatchPath */.UD)(rawPath);}// TODO check all uses of this and whether they use undefined for page resources not exist\n;_proto.loadPage=function loadPage(rawPath){var _this4=this;var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDb.has(pagePath)){var page=this.pageDb.get(pagePath);if(true){if(page.error){return{error:page.error,status:page.status};}return Promise.resolve(page.payload);}}if(this.inFlightDb.has(pagePath)){return this.inFlightDb.get(pagePath);}var inFlightPromise=Promise.all([this.loadAppData(),this.loadPageDataJson(pagePath)]).then(function(allData){var result=allData[1];if(result.status===PageResourceStatus.Error){return{status:PageResourceStatus.Error};}var pageData=result.payload;var _pageData=pageData,componentChunkName=_pageData.componentChunkName,_pageData$staticQuery=_pageData.staticQueryHashes,staticQueryHashes=_pageData$staticQuery===void 0?[]:_pageData$staticQuery;var finalResult={};var componentChunkPromise=_this4.loadComponent(componentChunkName).then(function(component){finalResult.createdAt=new Date();var pageResources;if(!component||component instanceof Error){finalResult.status=PageResourceStatus.Error;finalResult.error=component;}else{finalResult.status=PageResourceStatus.Success;if(result.notFound===true){finalResult.notFound=true;}pageData=Object.assign(pageData,{webpackCompilationHash:allData[0]?allData[0].webpackCompilationHash:""});pageResources=toPageResources(pageData,component);}// undefined if final result is an error\nreturn pageResources;});var staticQueryBatchPromise=Promise.all(staticQueryHashes.map(function(staticQueryHash){// Check for cache in case this static query result has already been loaded\nif(_this4.staticQueryDb[staticQueryHash]){var jsonPayload=_this4.staticQueryDb[staticQueryHash];return{staticQueryHash:staticQueryHash,jsonPayload:jsonPayload};}return _this4.memoizedGet(""+"/page-data/sq/d/"+staticQueryHash+".json").then(function(req){var jsonPayload=JSON.parse(req.responseText);return{staticQueryHash:staticQueryHash,jsonPayload:jsonPayload};}).catch(function(){throw new Error("We couldn\'t load \\""+""+"/page-data/sq/d/"+staticQueryHash+".json\\"");});})).then(function(staticQueryResults){var staticQueryResultsMap={};staticQueryResults.forEach(function(_ref){var staticQueryHash=_ref.staticQueryHash,jsonPayload=_ref.jsonPayload;staticQueryResultsMap[staticQueryHash]=jsonPayload;_this4.staticQueryDb[staticQueryHash]=jsonPayload;});return staticQueryResultsMap;});return Promise.all([componentChunkPromise,staticQueryBatchPromise]).then(function(_ref2){var pageResources=_ref2[0],staticQueryResults=_ref2[1];var payload;if(pageResources){payload=Object.assign({},pageResources,{staticQueryResults:staticQueryResults});finalResult.payload=payload;emitter/* default.emit */.Z.emit("onPostLoadPageResources",{page:payload,pageResources:payload});}_this4.pageDb.set(pagePath,finalResult);if(finalResult.error){return{error:finalResult.error,status:finalResult.status};}return payload;})// when static-query fail to load we throw a better error\n.catch(function(err){return{error:err,status:PageResourceStatus.Error};});});inFlightPromise.then(function(){_this4.inFlightDb.delete(pagePath);}).catch(function(error){_this4.inFlightDb.delete(pagePath);throw error;});this.inFlightDb.set(pagePath,inFlightPromise);return inFlightPromise;}// returns undefined if the page does not exists in cache\n;_proto.loadPageSync=function loadPageSync(rawPath,options){if(options===void 0){options={};}var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDb.has(pagePath)){var _options;var pageData=this.pageDb.get(pagePath);if(pageData.payload){return pageData.payload;}if((_options=options)!==null&&_options!==void 0&&_options.withErrorDetails){return{error:pageData.error,status:pageData.status};}}return undefined;};_proto.shouldPrefetch=function shouldPrefetch(pagePath){// Skip prefetching if we know user is on slow or constrained connection\nif(!doesConnectionSupportPrefetch()){return false;}// Check if the page exists.\nif(this.pageDb.has(pagePath)){return false;}return true;};_proto.prefetch=function prefetch(pagePath){var _this5=this;if(!this.shouldPrefetch(pagePath)){return false;}// Tell plugins with custom prefetching logic that they should start\n// prefetching this path.\nif(!this.prefetchTriggered.has(pagePath)){this.apiRunner("onPrefetchPathname",{pathname:pagePath});this.prefetchTriggered.add(pagePath);}// If a plugin has disabled core prefetching, stop now.\nif(this.prefetchDisabled){return false;}var realPath=(0,find_path/* findPath */.Cj)(pagePath);// Todo make doPrefetch logic cacheable\n// eslint-disable-next-line consistent-return\nthis.doPrefetch(realPath).then(function(){if(!_this5.prefetchCompleted.has(pagePath)){_this5.apiRunner("onPostPrefetchPathname",{pathname:pagePath});_this5.prefetchCompleted.add(pagePath);}});return true;};_proto.doPrefetch=function doPrefetch(pagePath){var _this6=this;var pageDataUrl=createPageDataUrl(pagePath);return _cache_prefetch(pageDataUrl,{crossOrigin:"anonymous",as:"fetch"}).then(function(){return(// This was just prefetched, so will return a response from\n// the cache instead of making another request to the server\n_this6.loadPageDataJson(pagePath));});};_proto.hovering=function hovering(rawPath){this.loadPage(rawPath);};_proto.getResourceURLsForPathname=function getResourceURLsForPathname(rawPath){var pagePath=(0,find_path/* findPath */.Cj)(rawPath);var page=this.pageDataDb.get(pagePath);if(page){var pageResources=toPageResources(page.payload);return[].concat((0,toConsumableArray/* default */.Z)(createComponentUrls(pageResources.page.componentChunkName)),[createPageDataUrl(pagePath)]);}else{return null;}};_proto.isPageNotFound=function isPageNotFound(rawPath){var pagePath=(0,find_path/* findPath */.Cj)(rawPath);var page=this.pageDb.get(pagePath);return!page||page.notFound;};_proto.loadAppData=function loadAppData(retries){var _this7=this;if(retries===void 0){retries=0;}return this.memoizedGet(""+"/page-data/app-data.json").then(function(req){var status=req.status,responseText=req.responseText;var appData;if(status!==200&&retries<3){// Retry 3 times incase of non-200 responses\nreturn _this7.loadAppData(retries+1);}// Handle 200\nif(status===200){try{var jsonPayload=JSON.parse(responseText);if(jsonPayload.webpackCompilationHash===undefined){throw new Error("not a valid app-data response");}appData=jsonPayload;}catch(err){// continue regardless of error\n}}return appData;});};return BaseLoader;}();var createComponentUrls=function createComponentUrls(componentChunkName){return(window.___chunkMapping[componentChunkName]||[]).map(function(chunk){return ""+chunk;});};var ProdLoader=/*#__PURE__*/function(_BaseLoader){(0,inheritsLoose/* default */.Z)(ProdLoader,_BaseLoader);function ProdLoader(asyncRequires,matchPaths,pageData){var _this8;var loadComponent=function loadComponent(chunkName){if(!asyncRequires.components[chunkName]){throw new Error("We couldn\'t find the correct component chunk with the name "+chunkName);}return asyncRequires.components[chunkName]().then(preferDefault)// loader will handle the case when component is error\n.catch(function(err){return err;});};_this8=_BaseLoader.call(this,loadComponent,matchPaths)||this;if(pageData){_this8.pageDataDb.set(pageData.path,{pagePath:pageData.path,payload:pageData,status:"success"});}return _this8;}var _proto2=ProdLoader.prototype;_proto2.doPrefetch=function doPrefetch(pagePath){return _BaseLoader.prototype.doPrefetch.call(this,pagePath).then(function(result){if(result.status!==PageResourceStatus.Success){return Promise.resolve();}var pageData=result.payload;var chunkName=pageData.componentChunkName;var componentUrls=createComponentUrls(chunkName);return Promise.all(componentUrls.map(_cache_prefetch)).then(function(){return pageData;});});};_proto2.loadPageDataJson=function loadPageDataJson(rawPath){return _BaseLoader.prototype.loadPageDataJson.call(this,rawPath).then(function(data){if(data.notFound){// check if html file exist using HEAD request:\n// if it does we should navigate to it instead of showing 404\nreturn doFetch(rawPath,"HEAD").then(function(req){if(req.status===200){// page (.html file) actually exist (or we asked for 404 )\n// returning page resources status as errored to trigger\n// regular browser navigation to given page\nreturn{status:PageResourceStatus.Error};}// if HEAD request wasn\'t 200, return notFound result\n// and show 404 page\nreturn data;});}return data;});};return ProdLoader;}(BaseLoader);var instance;var setLoader=function setLoader(_loader){instance=_loader;};var publicLoader={enqueue:function enqueue(rawPath){return instance.prefetch(rawPath);},// Real methods\ngetResourceURLsForPathname:function getResourceURLsForPathname(rawPath){return instance.getResourceURLsForPathname(rawPath);},loadPage:function loadPage(rawPath){return instance.loadPage(rawPath);},// TODO add deprecation to v4 so people use withErrorDetails and then we can remove in v5 and change default behaviour\nloadPageSync:function loadPageSync(rawPath,options){if(options===void 0){options={};}return instance.loadPageSync(rawPath,options);},prefetch:function prefetch(rawPath){return instance.prefetch(rawPath);},isPageNotFound:function isPageNotFound(rawPath){return instance.isPageNotFound(rawPath);},hovering:function hovering(rawPath){return instance.hovering(rawPath);},loadAppData:function loadAppData(){return instance.loadAppData();}};/* harmony default export */ var loader = (publicLoader);function getStaticQueryResults(){if(instance){return instance.staticQueryDb;}else{return{};}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8741\n')},804:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4578);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _api_runner_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7343);\n/* harmony import */ var _find_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2257);\n// Renders page\nvar PageRenderer=/*#__PURE__*/function(_React$Component){(0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(PageRenderer,_React$Component);function PageRenderer(){return _React$Component.apply(this,arguments)||this;}var _proto=PageRenderer.prototype;_proto.render=function render(){var props=Object.assign({},this.props,{params:Object.assign({},(0,_find_path__WEBPACK_IMPORTED_MODULE_2__/* .grabMatchParams */ .GA)(this.props.location.pathname),this.props.pageResources.json.pageContext.__params)});var pageElement=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(this.props.pageResources.component,Object.assign({},props,{key:this.props.path||this.props.pageResources.page.path}));var wrappedPage=(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_1__/* .apiRunner */ .h)("wrapPageElement",{element:pageElement,props:props},pageElement,function(_ref){var result=_ref.result;return{element:result,props:props};}).pop();return wrappedPage;};return PageRenderer;}(react__WEBPACK_IMPORTED_MODULE_0__.Component);/* harmony default export */ __webpack_exports__["Z"] = (PageRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFLQTtHQUNNSSxDQUFBQSx3U0FDSkMsT0FBQSxpQkFBUyxDQUNQLEdBQU1DLENBQUFBLEtBQUssa0JBQ04sS0FBS0EsS0FEQyxFQUVUQyxNQUFNLGtCQUNESixxRUFBZSxDQUFDLEtBQUtHLEtBQUwsQ0FBV0UsUUFBWCxDQUFvQkMsUUFBckIsQ0FEZCxDQUVELEtBQUtILEtBQUwsQ0FBV0ksYUFBWCxDQUF5QkMsSUFBekIsQ0FBOEJDLFdBQTlCLENBQTBDQyxRQUZ6QyxDQUZHLEVBQVgsQ0FRQSxHQUFNQyxDQUFBQSxXQUFXLGNBQUdiLG9EQUFhLENBQUMsS0FBS0ssS0FBTCxDQUFXSSxhQUFYLENBQXlCSyxTQUExQixrQkFDNUJULEtBRDRCLEVBRS9CVSxHQUFHLENBQUUsS0FBS1YsS0FBTCxDQUFXVyxJQUFYLEVBQW1CLEtBQUtYLEtBQUwsQ0FBV0ksYUFBWCxDQUF5QlEsSUFBekIsQ0FBOEJELElBRnZCLEdBQWpDLENBS0EsR0FBTUUsQ0FBQUEsV0FBVyxDQUFHakIsdUVBQVMsbUJBRTNCLENBQUVrQixPQUFPLENBQUVOLFdBQVgsQ0FBd0JSLEtBQUssQ0FBTEEsS0FBeEIsQ0FGMkIsQ0FHM0JRLFdBSDJCLENBSTNCLGNBQWdCLElBQWJPLENBQUFBLE1BQWEsTUFBYkEsTUFBYSxDQUNkLE1BQU8sQ0FBRUQsT0FBTyxDQUFFQyxNQUFYLENBQW1CZixLQUFLLENBQUxBLEtBQW5CLENBQVAsQ0FDRCxDQU4wQixDQUFULENBT2xCZ0IsR0FQa0IsRUFBcEIsQ0FTQSxNQUFPSCxDQUFBQSxXQUFQLENBQ0Qsd0JBekJ3Qm5CLDhDQW1DM0IseURBQWVJLFlBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uLy5jYWNoZS9wYWdlLXJlbmRlcmVyLmpzPzIwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiXG5pbXBvcnQgeyBhcGlSdW5uZXIgfSBmcm9tIFwiLi9hcGktcnVubmVyLWJyb3dzZXJcIlxuaW1wb3J0IHsgZ3JhYk1hdGNoUGFyYW1zIH0gZnJvbSBcIi4vZmluZC1wYXRoXCJcblxuLy8gUmVuZGVycyBwYWdlXG5jbGFzcyBQYWdlUmVuZGVyZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmdyYWJNYXRjaFBhcmFtcyh0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgLi4udGhpcy5wcm9wcy5wYWdlUmVzb3VyY2VzLmpzb24ucGFnZUNvbnRleHQuX19wYXJhbXMsXG4gICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IHBhZ2VFbGVtZW50ID0gY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLnBhZ2VSZXNvdXJjZXMuY29tcG9uZW50LCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGtleTogdGhpcy5wcm9wcy5wYXRoIHx8IHRoaXMucHJvcHMucGFnZVJlc291cmNlcy5wYWdlLnBhdGgsXG4gICAgfSlcblxuICAgIGNvbnN0IHdyYXBwZWRQYWdlID0gYXBpUnVubmVyKFxuICAgICAgYHdyYXBQYWdlRWxlbWVudGAsXG4gICAgICB7IGVsZW1lbnQ6IHBhZ2VFbGVtZW50LCBwcm9wcyB9LFxuICAgICAgcGFnZUVsZW1lbnQsXG4gICAgICAoeyByZXN1bHQgfSkgPT4ge1xuICAgICAgICByZXR1cm4geyBlbGVtZW50OiByZXN1bHQsIHByb3BzIH1cbiAgICAgIH1cbiAgICApLnBvcCgpXG5cbiAgICByZXR1cm4gd3JhcHBlZFBhZ2VcbiAgfVxufVxuXG5QYWdlUmVuZGVyZXIucHJvcFR5cGVzID0ge1xuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBwYWdlUmVzb3VyY2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBhZ2VDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VSZW5kZXJlclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImFwaVJ1bm5lciIsImdyYWJNYXRjaFBhcmFtcyIsIlBhZ2VSZW5kZXJlciIsInJlbmRlciIsInByb3BzIiwicGFyYW1zIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInBhZ2VSZXNvdXJjZXMiLCJqc29uIiwicGFnZUNvbnRleHQiLCJfX3BhcmFtcyIsInBhZ2VFbGVtZW50IiwiY29tcG9uZW50Iiwia2V5IiwicGF0aCIsInBhZ2UiLCJ3cmFwcGVkUGFnZSIsImVsZW1lbnQiLCJyZXN1bHQiLCJwb3AiLCJDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///804\n')},9917:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n// EXTERNAL MODULE: ./.cache/api-runner-browser.js\nvar api_runner_browser = __webpack_require__(7343);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3935);\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/es/index.js + 2 modules\nvar es = __webpack_require__(9499);\n// EXTERNAL MODULE: ./node_modules/gatsby-react-router-scroll/index.js\nvar gatsby_react_router_scroll = __webpack_require__(9679);\n// EXTERNAL MODULE: ./.cache/gatsby-browser-entry.js\nvar gatsby_browser_entry = __webpack_require__(5444);\n// EXTERNAL MODULE: ./.cache/loader.js + 1 modules\nvar loader = __webpack_require__(8741);\n// EXTERNAL MODULE: ./.cache/redirect-utils.js + 1 modules\nvar redirect_utils = __webpack_require__(969);\n// EXTERNAL MODULE: ./.cache/emitter.js + 1 modules\nvar emitter = __webpack_require__(8110);\n;// CONCATENATED MODULE: ./.cache/route-announcer-props.js\n// This is extracted to separate module because it\'s shared\n// between browser and SSR code\nvar RouteAnnouncerProps={id:"gatsby-announcer",style:{position:"absolute",top:0,width:1,height:1,padding:0,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",border:0},"aria-live":"assertive","aria-atomic":"true"};\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/lib/history.js\nvar lib_history = __webpack_require__(2393);\n// EXTERNAL MODULE: ./node_modules/gatsby-link/index.js\nvar gatsby_link = __webpack_require__(8037);\n;// CONCATENATED MODULE: ./.cache/navigation.js\nfunction maybeRedirect(pathname){var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(pathname);var _window$location=window.location,hash=_window$location.hash,search=_window$location.search;if(redirect!=null){window.___replace(redirect.toPath+search+hash);return true;}else{return false;}}// Catch unhandled chunk loading errors and force a restart of the app.\nvar nextRoute="";window.addEventListener("unhandledrejection",function(event){if(/loading chunk \\d* failed./i.test(event.reason)){if(nextRoute){window.location.pathname=nextRoute;}}});var onPreRouteUpdate=function onPreRouteUpdate(location,prevLocation){if(!maybeRedirect(location.pathname)){nextRoute=location.pathname;(0,api_runner_browser/* apiRunner */.h)("onPreRouteUpdate",{location:location,prevLocation:prevLocation});}};var onRouteUpdate=function onRouteUpdate(location,prevLocation){if(!maybeRedirect(location.pathname)){(0,api_runner_browser/* apiRunner */.h)("onRouteUpdate",{location:location,prevLocation:prevLocation});if(false){}}};var navigation_navigate=function navigate(to,options){if(options===void 0){options={};}// Support forward/backward navigation with numbers\n// navigate(-2) (jumps back 2 history steps)\n// navigate(2)  (jumps forward 2 history steps)\nif(typeof to==="number"){lib_history/* globalHistory.navigate */.V5.navigate(to);return;}var _parsePath=(0,gatsby_link/* parsePath */.cP)(to),pathname=_parsePath.pathname,search=_parsePath.search,hash=_parsePath.hash;var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(pathname);// If we\'re redirecting, just replace the passed in pathname\n// to the one we want to redirect to.\nif(redirect){to=redirect.toPath+search+hash;}// If we had a service worker update, no matter the path, reload window and\n// reset the pathname whitelist\nif(window.___swUpdated){window.location=pathname+search+hash;return;}// Start a timer to wait for a second before transitioning and showing a\n// loader in case resources aren\'t around yet.\nvar timeoutId=setTimeout(function(){emitter/* default.emit */.Z.emit("onDelayedLoadPageResources",{pathname:pathname});(0,api_runner_browser/* apiRunner */.h)("onRouteUpdateDelayed",{location:window.location});},1000);loader/* default.loadPage */.ZP.loadPage(pathname).then(function(pageResources){// If no page resources, then refresh the page\n// Do this, rather than simply `window.location.reload()`, so that\n// pressing the back/forward buttons work - otherwise when pressing\n// back, the browser will just change the URL and expect JS to handle\n// the change, which won\'t always work since it might not be a Gatsby\n// page.\nif(!pageResources||pageResources.status===loader/* PageResourceStatus.Error */.uQ.Error){window.history.replaceState({},"",location.href);window.location=pathname;clearTimeout(timeoutId);return;}// If the loaded page has a different compilation hash to the\n// window, then a rebuild has occurred on the server. Reload.\nif( true&&pageResources){// window.___webpackCompilationHash gets set in production-app.js after navigationInit() is called\n// So on a direct visit of a page with a browser redirect this check is truthy and thus the codepath is hit\n// While the resource actually exists, but only too late\n// TODO: This should probably be fixed by setting ___webpackCompilationHash before navigationInit() is called\nif(pageResources.page.webpackCompilationHash!==window.___webpackCompilationHash){// Purge plugin-offline cache\nif("serviceWorker"in navigator&&navigator.serviceWorker.controller!==null&&navigator.serviceWorker.controller.state==="activated"){navigator.serviceWorker.controller.postMessage({gatsbyApi:"clearPathResources"});}window.location=pathname+search+hash;}}(0,es.navigate)(to,options);clearTimeout(timeoutId);});};function shouldUpdateScroll(prevRouterProps,_ref){var _this=this;var location=_ref.location;var pathname=location.pathname,hash=location.hash;var results=(0,api_runner_browser/* apiRunner */.h)("shouldUpdateScroll",{prevRouterProps:prevRouterProps,// `pathname` for backwards compatibility\npathname:pathname,routerProps:{location:location},getSavedScrollPosition:function getSavedScrollPosition(args){return[0,// FIXME this is actually a big code smell, we should fix this\n// eslint-disable-next-line @babel/no-invalid-this\n_this._stateStorage.read(args,args.key)];}});if(results.length>0){// Use the latest registered shouldUpdateScroll result, this allows users to override plugin\'s configuration\n// @see https://github.com/gatsbyjs/gatsby/issues/12038\nreturn results[results.length-1];}if(prevRouterProps){var oldPathname=prevRouterProps.location.pathname;if(oldPathname===pathname){// Scroll to element if it exists, if it doesn\'t, or no hash is provided,\n// scroll to top.\nreturn hash?decodeURI(hash.slice(1)):[0,0];}}return true;}function init(){// The "scroll-behavior" package expects the "action" to be on the location\n// object so let\'s copy it over.\nlib_history/* globalHistory.listen */.V5.listen(function(args){args.location.action=args.action;});window.___push=function(to){return navigation_navigate(to,{replace:false});};window.___replace=function(to){return navigation_navigate(to,{replace:true});};window.___navigate=function(to,options){return navigation_navigate(to,options);};// Check for initial page-load redirect\nmaybeRedirect(window.location.pathname);}var RouteAnnouncer=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(RouteAnnouncer,_React$Component);function RouteAnnouncer(props){var _this2;_this2=_React$Component.call(this,props)||this;_this2.announcementRef=/*#__PURE__*/react.createRef();return _this2;}var _proto=RouteAnnouncer.prototype;_proto.componentDidUpdate=function componentDidUpdate(prevProps,nextProps){var _this3=this;requestAnimationFrame(function(){var pageName="new page at "+_this3.props.location.pathname;if(document.title){pageName=document.title;}var pageHeadings=document.querySelectorAll("#gatsby-focus-wrapper h1");if(pageHeadings&&pageHeadings.length){pageName=pageHeadings[0].textContent;}var newAnnouncement="Navigated to "+pageName;if(_this3.announcementRef.current){var oldAnnouncement=_this3.announcementRef.current.innerText;if(oldAnnouncement!==newAnnouncement){_this3.announcementRef.current.innerText=newAnnouncement;}}});};_proto.render=function render(){return/*#__PURE__*/react.createElement("div",Object.assign({},RouteAnnouncerProps,{ref:this.announcementRef}));};return RouteAnnouncer;}(react.Component);var compareLocationProps=function compareLocationProps(prevLocation,nextLocation){var _prevLocation$state,_nextLocation$state;if(prevLocation.href!==nextLocation.href){return true;}if((prevLocation===null||prevLocation===void 0?void 0:(_prevLocation$state=prevLocation.state)===null||_prevLocation$state===void 0?void 0:_prevLocation$state.key)!==(nextLocation===null||nextLocation===void 0?void 0:(_nextLocation$state=nextLocation.state)===null||_nextLocation$state===void 0?void 0:_nextLocation$state.key)){return true;}return false;};// Fire on(Pre)RouteUpdate APIs\nvar RouteUpdates=/*#__PURE__*/function(_React$Component2){(0,inheritsLoose/* default */.Z)(RouteUpdates,_React$Component2);function RouteUpdates(props){var _this4;_this4=_React$Component2.call(this,props)||this;onPreRouteUpdate(props.location,null);return _this4;}var _proto2=RouteUpdates.prototype;_proto2.componentDidMount=function componentDidMount(){onRouteUpdate(this.props.location,null);};_proto2.shouldComponentUpdate=function shouldComponentUpdate(prevProps){if(compareLocationProps(prevProps.location,this.props.location)){onPreRouteUpdate(this.props.location,prevProps.location);return true;}return false;};_proto2.componentDidUpdate=function componentDidUpdate(prevProps){if(compareLocationProps(prevProps.location,this.props.location)){onRouteUpdate(this.props.location,prevProps.location);}};_proto2.render=function render(){return/*#__PURE__*/react.createElement(react.Fragment,null,this.props.children,/*#__PURE__*/react.createElement(RouteAnnouncer,{location:location}));};return RouteUpdates;}(react.Component);\n// EXTERNAL MODULE: ./.cache/page-renderer.js\nvar page_renderer = __webpack_require__(804);\n// EXTERNAL MODULE: ./.cache/_this_is_virtual_fs_path_/$virtual/async-requires.js\nvar async_requires = __webpack_require__(4999);\n;// CONCATENATED MODULE: ./node_modules/shallow-compare/es/index.js\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(a, b) {\n  for (var i in a) {\n    if (!(i in b)) return true;\n  }for (var _i in b) {\n    if (a[_i] !== b[_i]) return true;\n  }return false;\n}\n\n/* harmony default export */ var shallow_compare_es = (function (instance, nextProps, nextState) {\n  return shallowDiffers(instance.props, nextProps) || shallowDiffers(instance.state, nextState);\n});\n;// CONCATENATED MODULE: ./.cache/ensure-resources.js\nvar EnsureResources=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(EnsureResources,_React$Component);function EnsureResources(props){var _this;_this=_React$Component.call(this)||this;var location=props.location,pageResources=props.pageResources;_this.state={location:Object.assign({},location),pageResources:pageResources||loader/* default.loadPageSync */.ZP.loadPageSync(location.pathname,{withErrorDetails:true})};return _this;}EnsureResources.getDerivedStateFromProps=function getDerivedStateFromProps(_ref,prevState){var location=_ref.location;if(prevState.location.href!==location.href){var pageResources=loader/* default.loadPageSync */.ZP.loadPageSync(location.pathname,{withErrorDetails:true});return{pageResources:pageResources,location:Object.assign({},location)};}return{location:Object.assign({},location)};};var _proto=EnsureResources.prototype;_proto.loadResources=function loadResources(rawPath){var _this2=this;loader/* default.loadPage */.ZP.loadPage(rawPath).then(function(pageResources){if(pageResources&&pageResources.status!==loader/* PageResourceStatus.Error */.uQ.Error){_this2.setState({location:Object.assign({},window.location),pageResources:pageResources});}else{window.history.replaceState({},"",location.href);window.location=rawPath;}});};_proto.shouldComponentUpdate=function shouldComponentUpdate(nextProps,nextState){// Always return false if we\'re missing resources.\nif(!nextState.pageResources){this.loadResources(nextProps.location.pathname);return false;}if(false){}// Check if the component or json have changed.\nif(this.state.pageResources!==nextState.pageResources){return true;}if(this.state.pageResources.component!==nextState.pageResources.component){return true;}if(this.state.pageResources.json!==nextState.pageResources.json){return true;}// Check if location has changed on a page using internal routing\n// via matchPath configuration.\nif(this.state.location.key!==nextState.location.key&&nextState.pageResources.page&&(nextState.pageResources.page.matchPath||nextState.pageResources.page.path)){return true;}return shallow_compare_es(this,nextProps,nextState);};_proto.render=function render(){if(false){ var message, _this$state$pageResou; }return this.props.children(this.state);};return EnsureResources;}(react.Component);/* harmony default export */ var ensure_resources = (EnsureResources);\n// EXTERNAL MODULE: ./.cache/strip-prefix.js\nvar strip_prefix = __webpack_require__(1578);\n;// CONCATENATED MODULE: ./.cache/_this_is_virtual_fs_path_/$virtual/match-paths.json\nvar match_paths_namespaceObject = JSON.parse(\'[{"path":"/en/404.html","matchPath":"/en/404.html"},{"path":"/en/about/","matchPath":"/en/about/"},{"path":"/en/contact/","matchPath":"/en/contact/"},{"path":"/en/downloads/","matchPath":"/en/downloads/"},{"path":"/en/frequently-asked-questions/","matchPath":"/en/frequently-asked-questions/"},{"path":"/en/methodology/","matchPath":"/en/methodology/"},{"path":"/en/previous-versions/","matchPath":"/en/previous-versions/"},{"path":"/en/privacy/","matchPath":"/en/privacy/"},{"path":"/en/public-engagement/","matchPath":"/en/public-engagement/"},{"path":"/en/technical-support-document/","matchPath":"/en/technical-support-document/"},{"path":"/es/404.html","matchPath":"/es/404.html"},{"path":"/es/about/","matchPath":"/es/about/"},{"path":"/es/contact/","matchPath":"/es/contact/"},{"path":"/es/downloads/","matchPath":"/es/downloads/"},{"path":"/es/frequently-asked-questions/","matchPath":"/es/frequently-asked-questions/"},{"path":"/es/methodology/","matchPath":"/es/methodology/"},{"path":"/es/previous-versions/","matchPath":"/es/previous-versions/"},{"path":"/es/privacy/","matchPath":"/es/privacy/"},{"path":"/es/public-engagement/","matchPath":"/es/public-engagement/"},{"path":"/es/technical-support-document/","matchPath":"/es/technical-support-document/"},{"path":"/en/","matchPath":"/en/"},{"path":"/es/","matchPath":"/es/"},{"path":"/en/404/","matchPath":"/en/*"},{"path":"/es/404/","matchPath":"/es/*"}]\');\n;// CONCATENATED MODULE: ./.cache/production-app.js\n// Generated during bootstrap\nvar production_app_loader=new loader/* ProdLoader */.kL(async_requires,match_paths_namespaceObject,window.pageData);(0,loader/* setLoader */.N1)(production_app_loader);production_app_loader.setApiRunner(api_runner_browser/* apiRunner */.h);window.asyncRequires=async_requires;window.___emitter=emitter/* default */.Z;window.___loader=loader/* publicLoader */.jN;init();(0,api_runner_browser/* apiRunnerAsync */.I)("onClientEntry").then(function(){// Let plugins register a service worker. The plugin just needs\n// to return true.\nif((0,api_runner_browser/* apiRunner */.h)("registerServiceWorker").filter(Boolean).length>0){__webpack_require__(154);}// In gatsby v2 if Router is used in page using matchPaths\n// paths need to contain full path.\n// For example:\n//   - page have `/app/*` matchPath\n//   - inside template user needs to use `/app/xyz` as path\n// Resetting `basepath`/`baseuri` keeps current behaviour\n// to not introduce breaking change.\n// Remove this in v3\nvar RouteHandler=function RouteHandler(props){return/*#__PURE__*/react.createElement(es.BaseContext.Provider,{value:{baseuri:"/",basepath:"/"}},/*#__PURE__*/react.createElement(page_renderer/* default */.Z,props));};var DataContext=/*#__PURE__*/react.createContext({});var GatsbyRoot=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(GatsbyRoot,_React$Component);function GatsbyRoot(){return _React$Component.apply(this,arguments)||this;}var _proto=GatsbyRoot.prototype;_proto.render=function render(){var children=this.props.children;return/*#__PURE__*/react.createElement(es.Location,null,function(_ref){var location=_ref.location;return/*#__PURE__*/react.createElement(ensure_resources,{location:location},function(_ref2){var pageResources=_ref2.pageResources,location=_ref2.location;var staticQueryResults=(0,loader/* getStaticQueryResults */.hs)();return/*#__PURE__*/react.createElement(gatsby_browser_entry.StaticQueryContext.Provider,{value:staticQueryResults},/*#__PURE__*/react.createElement(DataContext.Provider,{value:{pageResources:pageResources,location:location}},children));});});};return GatsbyRoot;}(react.Component);var LocationHandler=/*#__PURE__*/function(_React$Component2){(0,inheritsLoose/* default */.Z)(LocationHandler,_React$Component2);function LocationHandler(){return _React$Component2.apply(this,arguments)||this;}var _proto2=LocationHandler.prototype;_proto2.render=function render(){var _this=this;return/*#__PURE__*/react.createElement(DataContext.Consumer,null,function(_ref3){var pageResources=_ref3.pageResources,location=_ref3.location;return/*#__PURE__*/react.createElement(RouteUpdates,{location:location},/*#__PURE__*/react.createElement(gatsby_react_router_scroll/* ScrollContext */.$C,{location:location,shouldUpdateScroll:shouldUpdateScroll},/*#__PURE__*/react.createElement(es.Router,{basepath:"",location:location,id:"gatsby-focus-wrapper"},/*#__PURE__*/react.createElement(RouteHandler,Object.assign({path:pageResources.page.path==="/404.html"?(0,strip_prefix/* default */.Z)(location.pathname,""):encodeURI(pageResources.page.matchPath||pageResources.page.path)},_this.props,{location:location,pageResources:pageResources},pageResources.json)))));});};return LocationHandler;}(react.Component);var _window=window,pagePath=_window.pagePath,browserLoc=_window.location;// Explicitly call navigate if the canonical path (window.pagePath)\n// is different to the browser path (window.location.pathname). But\n// only if NONE of the following conditions hold:\n//\n// - The url matches a client side route (page.matchPath)\n// - it\'s a 404 page\n// - it\'s the offline plugin shell (/offline-plugin-app-shell-fallback/)\nif(pagePath&&""+pagePath!==browserLoc.pathname&&!(production_app_loader.findMatchPath((0,strip_prefix/* default */.Z)(browserLoc.pathname,""))||pagePath==="/404.html"||pagePath.match(/^\\/404\\/?$/)||pagePath.match(/^\\/offline-plugin-app-shell-fallback\\/?$/))){(0,es.navigate)(""+pagePath+browserLoc.search+browserLoc.hash,{replace:true});}loader/* publicLoader.loadPage */.jN.loadPage(browserLoc.pathname).then(function(page){if(!page||page.status===loader/* PageResourceStatus.Error */.uQ.Error){var message="page resources for "+browserLoc.pathname+" not found. Not rendering React";// if the chunk throws an error we want to capture the real error\n// This should help with https://github.com/gatsbyjs/gatsby/issues/19618\nif(page&&page.error){console.error(message);throw page.error;}throw new Error(message);}window.___webpackCompilationHash=page.page.webpackCompilationHash;var SiteRoot=(0,api_runner_browser/* apiRunner */.h)("wrapRootElement",{element:/*#__PURE__*/react.createElement(LocationHandler,null)},/*#__PURE__*/react.createElement(LocationHandler,null),function(_ref4){var result=_ref4.result;return{element:result};}).pop();var App=function App(){var onClientEntryRanRef=react.useRef(false);react.useEffect(function(){if(!onClientEntryRanRef.current){onClientEntryRanRef.current=true;if(performance.mark){performance.mark("onInitialClientRender");}(0,api_runner_browser/* apiRunner */.h)("onInitialClientRender");}},[]);return/*#__PURE__*/react.createElement(GatsbyRoot,null,SiteRoot);};var renderer=(0,api_runner_browser/* apiRunner */.h)("replaceHydrateFunction",undefined,react_dom.hydrateRoot?react_dom.hydrateRoot:react_dom.hydrate)[0];function runRender(){var rootElement=typeof window!=="undefined"?document.getElementById("___gatsby"):null;if(renderer===react_dom.hydrateRoot){renderer(rootElement,/*#__PURE__*/react.createElement(App,null));}else{renderer(/*#__PURE__*/react.createElement(App,null),rootElement);}}// https://github.com/madrobby/zepto/blob/b5ed8d607f67724788ec9ff492be297f64d47dfc/src/zepto.js#L439-L450\n// TODO remove IE 10 support\nvar doc=document;if(doc.readyState==="complete"||doc.readyState!=="loading"&&!doc.documentElement.doScroll){setTimeout(function(){runRender();},0);}else{var handler=function handler(){doc.removeEventListener("DOMContentLoaded",handler,false);window.removeEventListener("load",handler,false);runRender();};doc.addEventListener("DOMContentLoaded",handler,false);window.addEventListener("load",handler,false);}});});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9917\n')},6947:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8741);\n/* harmony import */ var _page_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(804);\nvar ProdPageRenderer=function ProdPageRenderer(_ref){var location=_ref.location;var pageResources=_loader__WEBPACK_IMPORTED_MODULE_1__/* ["default"].loadPageSync */ .ZP.loadPageSync(location.pathname);if(!pageResources){return null;}return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_page_renderer__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z,Object.assign({location:location,pageResources:pageResources},pageResources.json));};/* harmony default export */ __webpack_exports__["default"] = (ProdPageRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk0Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBTUEsR0FBTUcsQ0FBQUEsZ0JBQWdCLENBQUcsUUFBbkJBLENBQUFBLGdCQUFtQixNQUFrQixJQUFmQyxDQUFBQSxRQUFlLE1BQWZBLFFBQWUsQ0FDekMsR0FBTUMsQ0FBQUEsYUFBYSxDQUFHSixtRkFBQSxDQUFvQkcsUUFBUSxDQUFDRyxRQUE3QixDQUF0QixDQUNBLEdBQUksQ0FBQ0YsYUFBTCxDQUFvQixDQUNsQixNQUFPLEtBQVAsQ0FDRCxDQUNELG1CQUFPTCxnREFBQSxDQUFvQkUsK0RBQXBCLGdCQUNMRSxRQUFRLENBQVJBLFFBREssQ0FFTEMsYUFBYSxDQUFiQSxhQUZLLEVBR0ZBLGFBQWEsQ0FBQ0ksSUFIWixFQUFQLENBS0QsQ0FWRCxDQWtCQSwrREFBZU4sZ0JBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uLy5jYWNoZS9wdWJsaWMtcGFnZS1yZW5kZXJlci1wcm9kLmpzP2FmMzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCJcblxuaW1wb3J0IGxvYWRlciBmcm9tIFwiLi9sb2FkZXJcIlxuaW1wb3J0IEludGVybmFsUGFnZVJlbmRlcmVyIGZyb20gXCIuL3BhZ2UtcmVuZGVyZXJcIlxuXG5jb25zdCBQcm9kUGFnZVJlbmRlcmVyID0gKHsgbG9jYXRpb24gfSkgPT4ge1xuICBjb25zdCBwYWdlUmVzb3VyY2VzID0gbG9hZGVyLmxvYWRQYWdlU3luYyhsb2NhdGlvbi5wYXRobmFtZSlcbiAgaWYgKCFwYWdlUmVzb3VyY2VzKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnRlcm5hbFBhZ2VSZW5kZXJlciwge1xuICAgIGxvY2F0aW9uLFxuICAgIHBhZ2VSZXNvdXJjZXMsXG4gICAgLi4ucGFnZVJlc291cmNlcy5qc29uLFxuICB9KVxufVxuXG5Qcm9kUGFnZVJlbmRlcmVyLnByb3BUeXBlcyA9IHtcbiAgbG9jYXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGF0aG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfSkuaXNSZXF1aXJlZCxcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZFBhZ2VSZW5kZXJlclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwibG9hZGVyIiwiSW50ZXJuYWxQYWdlUmVuZGVyZXIiLCJQcm9kUGFnZVJlbmRlcmVyIiwibG9jYXRpb24iLCJwYWdlUmVzb3VyY2VzIiwibG9hZFBhZ2VTeW5jIiwicGF0aG5hbWUiLCJjcmVhdGVFbGVtZW50IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6947\n')},861:function(module,__unused_webpack_exports,__webpack_require__){eval("var preferDefault=function preferDefault(m){return m&&m.default||m;};if(false){}else if(true){module.exports=preferDefault(__webpack_require__(6947));}else{}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxLmpzIiwibWFwcGluZ3MiOiJBQUFBLEdBQU1BLENBQUFBLGFBQWEsQ0FBRyxRQUFoQkEsQ0FBQUEsYUFBZ0IsQ0FBQUMsQ0FBQyxRQUFLQSxDQUFBQSxDQUFDLEVBQUlBLENBQUMsQ0FBQ0MsT0FBUixFQUFvQkQsQ0FBeEIsRUFBdkIsQ0FFQSxHQUFJRSxLQUFKLENBQTJDLEVBQTNDLElBRU8sSUFBSUEsSUFBSixDQUFvRCxDQUN6REcsTUFBTSxDQUFDQyxPQUFQLENBQWlCUCxhQUFhLENBQUNRLG1CQUFPLENBQUMsS0FBVCxDQUE5QixDQUNELENBRk0sSUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vLmNhY2hlL3B1YmxpYy1wYWdlLXJlbmRlcmVyLmpzPzk3MGQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJlZmVyRGVmYXVsdCA9IG0gPT4gKG0gJiYgbS5kZWZhdWx0KSB8fCBtXG5cbmlmIChwcm9jZXNzLmVudi5CVUlMRF9TVEFHRSA9PT0gYGRldmVsb3BgKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJlZmVyRGVmYXVsdChyZXF1aXJlKGAuL3B1YmxpYy1wYWdlLXJlbmRlcmVyLWRldmApKVxufSBlbHNlIGlmIChwcm9jZXNzLmVudi5CVUlMRF9TVEFHRSA9PT0gYGJ1aWxkLWphdmFzY3JpcHRgKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJlZmVyRGVmYXVsdChyZXF1aXJlKGAuL3B1YmxpYy1wYWdlLXJlbmRlcmVyLXByb2RgKSlcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gKCkgPT4gbnVsbFxufVxuIl0sIm5hbWVzIjpbInByZWZlckRlZmF1bHQiLCJtIiwiZGVmYXVsdCIsInByb2Nlc3MiLCJlbnYiLCJCVUlMRF9TVEFHRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///861\n")},3639:function(__unused_webpack_module,exports){eval("exports.O=function(Component){return Component;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzOS5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsU0FBQSxDQUFtQixTQUFBRSxTQUFTLFFBQUlBLENBQUFBLFNBQUosRUFBNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uLy5jYWNoZS9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5qcz9mNzg1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucG9seWZpbGwgPSBDb21wb25lbnQgPT4gQ29tcG9uZW50XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInBvbHlmaWxsIiwiQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3639\n")},969:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "J": function() { return /* binding */ maybeGetBrowserRedirect; }\n});\n\n;// CONCATENATED MODULE: ./.cache/redirects.json\nvar redirects_namespaceObject = [];\n;// CONCATENATED MODULE: ./.cache/redirect-utils.js\n// Convert to a map for faster lookup in maybeRedirect()\nvar redirectMap=new Map();var redirectIgnoreCaseMap=new Map();redirects_namespaceObject.forEach(function(redirect){if(redirect.ignoreCase){redirectIgnoreCaseMap.set(redirect.fromPath,redirect);}else{redirectMap.set(redirect.fromPath,redirect);}});function maybeGetBrowserRedirect(pathname){var redirect=redirectMap.get(pathname);if(!redirect){redirect=redirectIgnoreCaseMap.get(pathname.toLowerCase());}return redirect;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBO0FBRUEsR0FBTUMsQ0FBQUEsV0FBVyxDQUFHLEdBQUlDLENBQUFBLEdBQUosRUFBcEIsQ0FDQSxHQUFNQyxDQUFBQSxxQkFBcUIsQ0FBRyxHQUFJRCxDQUFBQSxHQUFKLEVBQTlCLENBRUFGLGlDQUFBLENBQWtCLFNBQUFLLFFBQVEsQ0FBSSxDQUM1QixHQUFJQSxRQUFRLENBQUNDLFVBQWIsQ0FBeUIsQ0FDdkJILHFCQUFxQixDQUFDSSxHQUF0QixDQUEwQkYsUUFBUSxDQUFDRyxRQUFuQyxDQUE2Q0gsUUFBN0MsRUFDRCxDQUZELElBRU8sQ0FDTEosV0FBVyxDQUFDTSxHQUFaLENBQWdCRixRQUFRLENBQUNHLFFBQXpCLENBQW1DSCxRQUFuQyxFQUNELENBQ0YsQ0FORCxFQVFPLFFBQVNJLENBQUFBLHVCQUFULENBQWlDQyxRQUFqQyxDQUEyQyxDQUNoRCxHQUFJTCxDQUFBQSxRQUFRLENBQUdKLFdBQVcsQ0FBQ1UsR0FBWixDQUFnQkQsUUFBaEIsQ0FBZixDQUNBLEdBQUksQ0FBQ0wsUUFBTCxDQUFlLENBQ2JBLFFBQVEsQ0FBR0YscUJBQXFCLENBQUNRLEdBQXRCLENBQTBCRCxRQUFRLENBQUNFLFdBQVQsRUFBMUIsQ0FBWCxDQUNELENBQ0QsTUFBT1AsQ0FBQUEsUUFBUCxDQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi8uY2FjaGUvcmVkaXJlY3QtdXRpbHMuanM/ODliOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVkaXJlY3RzIGZyb20gXCIuL3JlZGlyZWN0cy5qc29uXCJcblxuLy8gQ29udmVydCB0byBhIG1hcCBmb3IgZmFzdGVyIGxvb2t1cCBpbiBtYXliZVJlZGlyZWN0KClcblxuY29uc3QgcmVkaXJlY3RNYXAgPSBuZXcgTWFwKClcbmNvbnN0IHJlZGlyZWN0SWdub3JlQ2FzZU1hcCA9IG5ldyBNYXAoKVxuXG5yZWRpcmVjdHMuZm9yRWFjaChyZWRpcmVjdCA9PiB7XG4gIGlmIChyZWRpcmVjdC5pZ25vcmVDYXNlKSB7XG4gICAgcmVkaXJlY3RJZ25vcmVDYXNlTWFwLnNldChyZWRpcmVjdC5mcm9tUGF0aCwgcmVkaXJlY3QpXG4gIH0gZWxzZSB7XG4gICAgcmVkaXJlY3RNYXAuc2V0KHJlZGlyZWN0LmZyb21QYXRoLCByZWRpcmVjdClcbiAgfVxufSlcblxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlR2V0QnJvd3NlclJlZGlyZWN0KHBhdGhuYW1lKSB7XG4gIGxldCByZWRpcmVjdCA9IHJlZGlyZWN0TWFwLmdldChwYXRobmFtZSlcbiAgaWYgKCFyZWRpcmVjdCkge1xuICAgIHJlZGlyZWN0ID0gcmVkaXJlY3RJZ25vcmVDYXNlTWFwLmdldChwYXRobmFtZS50b0xvd2VyQ2FzZSgpKVxuICB9XG4gIHJldHVybiByZWRpcmVjdFxufVxuIl0sIm5hbWVzIjpbInJlZGlyZWN0cyIsInJlZGlyZWN0TWFwIiwiTWFwIiwicmVkaXJlY3RJZ25vcmVDYXNlTWFwIiwiZm9yRWFjaCIsInJlZGlyZWN0IiwiaWdub3JlQ2FzZSIsInNldCIsImZyb21QYXRoIiwibWF5YmVHZXRCcm93c2VyUmVkaXJlY3QiLCJwYXRobmFtZSIsImdldCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///969\n')},154:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api_runner_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7343);\nif(window.location.protocol!=="https:"&&window.location.hostname!=="localhost"){console.error("Service workers can only be used over HTTPS, or on localhost for development");}else if("serviceWorker"in navigator){navigator.serviceWorker.register(""+"/sw.js").then(function(reg){reg.addEventListener("updatefound",function(){(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerUpdateFound",{serviceWorker:reg});// The updatefound event implies that reg.installing is set; see\n// https://w3c.github.io/ServiceWorker/#service-worker-registration-updatefound-event\nvar installingWorker=reg.installing;console.log("installingWorker",installingWorker);installingWorker.addEventListener("statechange",function(){switch(installingWorker.state){case"installed":if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and the fresh content will\n// have been added to the cache.\n// We set a flag so Gatsby Link knows to refresh the page on next navigation attempt\nwindow.___swUpdated=true;// We call the onServiceWorkerUpdateReady API so users can show update prompts.\n(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerUpdateReady",{serviceWorker:reg});// If resources failed for the current page, reload.\nif(window.___failedResources){console.log("resources failed, SW updated - reloading");window.location.reload();}}else{// At this point, everything has been precached.\n// It\'s the perfect time to display a "Content is cached for offline use." message.\nconsole.log("Content is now available offline!");// Post to service worker that install is complete.\n// Delay to allow time for the event listener to be added --\n// otherwise fetch is called too soon and resources aren\'t cached.\n(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerInstalled",{serviceWorker:reg});}break;case"redundant":console.error("The installing service worker became redundant.");(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerRedundant",{serviceWorker:reg});break;case"activated":(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerActive",{serviceWorker:reg});break;}});});}).catch(function(e){console.error("Error during service worker registration:",e);});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwibWFwcGluZ3MiOiI7O0FBRUEsR0FDRUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxRQUFoQixhQUNBRixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JFLFFBQWhCLGNBRkYsQ0FHRSxDQUNBQyxPQUFPLENBQUNDLEtBQVIsaUZBR0QsQ0FQRCxJQU9PLElBQUksaUJBQW1CQyxDQUFBQSxTQUF2QixDQUFrQyxDQUN2Q0EsU0FBUyxDQUFDQyxhQUFWLENBQ0dDLFFBREgsQ0FDZUMsRUFEZixXQUVHQyxJQUZILENBRVEsU0FBVUMsR0FBVixDQUFlLENBQ25CQSxHQUFHLENBQUNDLGdCQUFKLGVBQW9DLFVBQU0sQ0FDeENiLHVFQUFTLDhCQUErQixDQUFFUSxhQUFhLENBQUVJLEdBQWpCLENBQS9CLENBQVQsQ0FDQTtBQUNBO0FBQ0EsR0FBTUUsQ0FBQUEsZ0JBQWdCLENBQUdGLEdBQUcsQ0FBQ0csVUFBN0IsQ0FDQVYsT0FBTyxDQUFDVyxHQUFSLG9CQUFnQ0YsZ0JBQWhDLEVBQ0FBLGdCQUFnQixDQUFDRCxnQkFBakIsZUFBaUQsVUFBTSxDQUNyRCxPQUFRQyxnQkFBZ0IsQ0FBQ0csS0FBekIsRUFDRSxnQkFDRSxHQUFJVixTQUFTLENBQUNDLGFBQVYsQ0FBd0JVLFVBQTVCLENBQXdDLENBQ3RDO0FBQ0E7QUFFQTtBQUNBakIsTUFBTSxDQUFDa0IsWUFBUCxDQUFzQixJQUF0QixDQUNBO0FBQ0FuQix1RUFBUyw4QkFBK0IsQ0FBRVEsYUFBYSxDQUFFSSxHQUFqQixDQUEvQixDQUFULENBRUE7QUFDQSxHQUFJWCxNQUFNLENBQUNtQixrQkFBWCxDQUErQixDQUM3QmYsT0FBTyxDQUFDVyxHQUFSLDZDQUNBZixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JtQixNQUFoQixHQUNELENBQ0YsQ0FkRCxJQWNPLENBQ0w7QUFDQTtBQUNBaEIsT0FBTyxDQUFDVyxHQUFSLHNDQUVBO0FBQ0E7QUFDQTtBQUNBaEIsdUVBQVMsNEJBQTZCLENBQUVRLGFBQWEsQ0FBRUksR0FBakIsQ0FBN0IsQ0FBVCxDQUNELENBQ0QsTUFFRixnQkFDRVAsT0FBTyxDQUFDQyxLQUFSLG9EQUNBTix1RUFBUyw0QkFBNkIsQ0FBRVEsYUFBYSxDQUFFSSxHQUFqQixDQUE3QixDQUFULENBQ0EsTUFFRixnQkFDRVosdUVBQVMseUJBQTBCLENBQUVRLGFBQWEsQ0FBRUksR0FBakIsQ0FBMUIsQ0FBVCxDQUNBLE1BbkNKLENBcUNELENBdENELEVBdUNELENBN0NELEVBOENELENBakRILEVBa0RHVSxLQWxESCxDQWtEUyxTQUFVQyxDQUFWLENBQWEsQ0FDbEJsQixPQUFPLENBQUNDLEtBQVIsNkNBQTJEaUIsQ0FBM0QsRUFDRCxDQXBESCxFQXFERCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vLmNhY2hlL3JlZ2lzdGVyLXNlcnZpY2Utd29ya2VyLmpzPzM1MjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpUnVubmVyIH0gZnJvbSBcIi4vYXBpLXJ1bm5lci1icm93c2VyXCJcblxuaWYgKFxuICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IGBodHRwczpgICYmXG4gIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gYGxvY2FsaG9zdGBcbikge1xuICBjb25zb2xlLmVycm9yKFxuICAgIGBTZXJ2aWNlIHdvcmtlcnMgY2FuIG9ubHkgYmUgdXNlZCBvdmVyIEhUVFBTLCBvciBvbiBsb2NhbGhvc3QgZm9yIGRldmVsb3BtZW50YFxuICApXG59IGVsc2UgaWYgKGBzZXJ2aWNlV29ya2VyYCBpbiBuYXZpZ2F0b3IpIHtcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAucmVnaXN0ZXIoYCR7X19CQVNFX1BBVEhfX30vc3cuanNgKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZWcpIHtcbiAgICAgIHJlZy5hZGRFdmVudExpc3RlbmVyKGB1cGRhdGVmb3VuZGAsICgpID0+IHtcbiAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJVcGRhdGVGb3VuZGAsIHsgc2VydmljZVdvcmtlcjogcmVnIH0pXG4gICAgICAgIC8vIFRoZSB1cGRhdGVmb3VuZCBldmVudCBpbXBsaWVzIHRoYXQgcmVnLmluc3RhbGxpbmcgaXMgc2V0OyBzZWVcbiAgICAgICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvI3NlcnZpY2Utd29ya2VyLXJlZ2lzdHJhdGlvbi11cGRhdGVmb3VuZC1ldmVudFxuICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnLmluc3RhbGxpbmdcbiAgICAgICAgY29uc29sZS5sb2coYGluc3RhbGxpbmdXb3JrZXJgLCBpbnN0YWxsaW5nV29ya2VyKVxuICAgICAgICBpbnN0YWxsaW5nV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoYHN0YXRlY2hhbmdlYCwgKCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBgaW5zdGFsbGVkYDpcbiAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgb2xkIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gcHVyZ2VkIGFuZCB0aGUgZnJlc2ggY29udGVudCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBjYWNoZS5cblxuICAgICAgICAgICAgICAgIC8vIFdlIHNldCBhIGZsYWcgc28gR2F0c2J5IExpbmsga25vd3MgdG8gcmVmcmVzaCB0aGUgcGFnZSBvbiBuZXh0IG5hdmlnYXRpb24gYXR0ZW1wdFxuICAgICAgICAgICAgICAgIHdpbmRvdy5fX19zd1VwZGF0ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgLy8gV2UgY2FsbCB0aGUgb25TZXJ2aWNlV29ya2VyVXBkYXRlUmVhZHkgQVBJIHNvIHVzZXJzIGNhbiBzaG93IHVwZGF0ZSBwcm9tcHRzLlxuICAgICAgICAgICAgICAgIGFwaVJ1bm5lcihgb25TZXJ2aWNlV29ya2VyVXBkYXRlUmVhZHlgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgcmVzb3VyY2VzIGZhaWxlZCBmb3IgdGhlIGN1cnJlbnQgcGFnZSwgcmVsb2FkLlxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuX19fZmFpbGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgcmVzb3VyY2VzIGZhaWxlZCwgU1cgdXBkYXRlZCAtIHJlbG9hZGluZ2ApXG4gICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuXG4gICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYSBcIkNvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS5cIiBtZXNzYWdlLlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb250ZW50IGlzIG5vdyBhdmFpbGFibGUgb2ZmbGluZSFgKVxuXG4gICAgICAgICAgICAgICAgLy8gUG9zdCB0byBzZXJ2aWNlIHdvcmtlciB0aGF0IGluc3RhbGwgaXMgY29tcGxldGUuXG4gICAgICAgICAgICAgICAgLy8gRGVsYXkgdG8gYWxsb3cgdGltZSBmb3IgdGhlIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGFkZGVkIC0tXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZldGNoIGlzIGNhbGxlZCB0b28gc29vbiBhbmQgcmVzb3VyY2VzIGFyZW4ndCBjYWNoZWQuXG4gICAgICAgICAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJJbnN0YWxsZWRgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgYHJlZHVuZGFudGA6XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBpbnN0YWxsaW5nIHNlcnZpY2Ugd29ya2VyIGJlY2FtZSByZWR1bmRhbnQuYClcbiAgICAgICAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJSZWR1bmRhbnRgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlIGBhY3RpdmF0ZWRgOlxuICAgICAgICAgICAgICBhcGlSdW5uZXIoYG9uU2VydmljZVdvcmtlckFjdGl2ZWAsIHsgc2VydmljZVdvcmtlcjogcmVnIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjpgLCBlKVxuICAgIH0pXG59XG4iXSwibmFtZXMiOlsiYXBpUnVubmVyIiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiY29uc29sZSIsImVycm9yIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwiX19CQVNFX1BBVEhfXyIsInRoZW4iLCJyZWciLCJhZGRFdmVudExpc3RlbmVyIiwiaW5zdGFsbGluZ1dvcmtlciIsImluc3RhbGxpbmciLCJsb2ciLCJzdGF0ZSIsImNvbnRyb2xsZXIiLCJfX19zd1VwZGF0ZWQiLCJfX19mYWlsZWRSZXNvdXJjZXMiLCJyZWxvYWQiLCJjYXRjaCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///154\n')},1578:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ stripPrefix; }\n/* harmony export */ });\n/**\n * Remove a prefix from a string. Return the input string if the given prefix\n * isn\'t found.\n */function stripPrefix(str,prefix){if(prefix===void 0){prefix="";}if(!prefix){return str;}if(str===prefix){return"/";}if(str.startsWith(prefix+"/")){return str.slice(prefix.length);}return str;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3OC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUVlLFFBQVNBLENBQUFBLFdBQVQsQ0FBcUJDLEdBQXJCLENBQTBCQyxNQUExQixDQUF1QyxJQUFiQSxNQUFhLFdBQWJBLE1BQWEsS0FDcEQsR0FBSSxDQUFDQSxNQUFMLENBQWEsQ0FDWCxNQUFPRCxDQUFBQSxHQUFQLENBQ0QsQ0FFRCxHQUFJQSxHQUFHLEdBQUtDLE1BQVosQ0FBb0IsQ0FDbEIsVUFDRCxDQUVELEdBQUlELEdBQUcsQ0FBQ0UsVUFBSixDQUFrQkQsTUFBbEIsS0FBSixDQUFrQyxDQUNoQyxNQUFPRCxDQUFBQSxHQUFHLENBQUNHLEtBQUosQ0FBVUYsTUFBTSxDQUFDRyxNQUFqQixDQUFQLENBQ0QsQ0FFRCxNQUFPSixDQUFBQSxHQUFQLENBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uLy5jYWNoZS9zdHJpcC1wcmVmaXguanM/NzEyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlbW92ZSBhIHByZWZpeCBmcm9tIGEgc3RyaW5nLiBSZXR1cm4gdGhlIGlucHV0IHN0cmluZyBpZiB0aGUgZ2l2ZW4gcHJlZml4XG4gKiBpc24ndCBmb3VuZC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHJpcFByZWZpeChzdHIsIHByZWZpeCA9IGBgKSB7XG4gIGlmICghcHJlZml4KSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgaWYgKHN0ciA9PT0gcHJlZml4KSB7XG4gICAgcmV0dXJuIGAvYFxuICB9XG5cbiAgaWYgKHN0ci5zdGFydHNXaXRoKGAke3ByZWZpeH0vYCkpIHtcbiAgICByZXR1cm4gc3RyLnNsaWNlKHByZWZpeC5sZW5ndGgpXG4gIH1cblxuICByZXR1cm4gc3RyXG59XG4iXSwibmFtZXMiOlsic3RyaXBQcmVmaXgiLCJzdHIiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwic2xpY2UiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1578\n')},9037:function(n,I,g){"use strict";g.r(I)},758:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Breadcrumbs\": function() { return /* reexport */ Breadcrumbs; },\n  \"BrowserClient\": function() { return /* reexport */ BrowserClient; },\n  \"Dedupe\": function() { return /* reexport */ Dedupe; },\n  \"ErrorBoundary\": function() { return /* reexport */ ErrorBoundary; },\n  \"FunctionToString\": function() { return /* reexport */ FunctionToString; },\n  \"GlobalHandlers\": function() { return /* reexport */ GlobalHandlers; },\n  \"HttpContext\": function() { return /* reexport */ HttpContext; },\n  \"Hub\": function() { return /* reexport */ esm_hub/* Hub */.Xb; },\n  \"InboundFilters\": function() { return /* reexport */ InboundFilters; },\n  \"Integrations\": function() { return /* reexport */ tracing_esm_integrations_namespaceObject; },\n  \"LinkedErrors\": function() { return /* reexport */ LinkedErrors; },\n  \"Profiler\": function() { return /* reexport */ Profiler; },\n  \"SDK_VERSION\": function() { return /* reexport */ SDK_VERSION; },\n  \"Scope\": function() { return /* reexport */ esm_scope/* Scope */.s; },\n  \"TryCatch\": function() { return /* reexport */ TryCatch; },\n  \"addBreadcrumb\": function() { return /* reexport */ addBreadcrumb; },\n  \"addGlobalEventProcessor\": function() { return /* reexport */ esm_scope/* addGlobalEventProcessor */.c; },\n  \"captureEvent\": function() { return /* reexport */ captureEvent; },\n  \"captureException\": function() { return /* reexport */ captureException; },\n  \"captureMessage\": function() { return /* reexport */ captureMessage; },\n  \"chromeStackLineParser\": function() { return /* reexport */ chromeStackLineParser; },\n  \"close\": function() { return /* reexport */ sdk_close; },\n  \"configureScope\": function() { return /* reexport */ configureScope; },\n  \"createReduxEnhancer\": function() { return /* reexport */ createReduxEnhancer; },\n  \"createTransport\": function() { return /* reexport */ createTransport; },\n  \"defaultIntegrations\": function() { return /* reexport */ defaultIntegrations; },\n  \"defaultStackLineParsers\": function() { return /* reexport */ defaultStackLineParsers; },\n  \"defaultStackParser\": function() { return /* reexport */ defaultStackParser; },\n  \"flush\": function() { return /* reexport */ flush; },\n  \"forceLoad\": function() { return /* reexport */ forceLoad; },\n  \"geckoStackLineParser\": function() { return /* reexport */ geckoStackLineParser; },\n  \"getCurrentHub\": function() { return /* reexport */ esm_hub/* getCurrentHub */.Gd; },\n  \"getHubFromCarrier\": function() { return /* reexport */ esm_hub/* getHubFromCarrier */.vi; },\n  \"init\": function() { return /* reexport */ esm_sdk_init; },\n  \"lastEventId\": function() { return /* reexport */ lastEventId; },\n  \"makeFetchTransport\": function() { return /* reexport */ makeFetchTransport; },\n  \"makeMain\": function() { return /* reexport */ esm_hub/* makeMain */.pj; },\n  \"makeXHRTransport\": function() { return /* reexport */ makeXHRTransport; },\n  \"onLoad\": function() { return /* reexport */ onLoad; },\n  \"opera10StackLineParser\": function() { return /* reexport */ opera10StackLineParser; },\n  \"opera11StackLineParser\": function() { return /* reexport */ opera11StackLineParser; },\n  \"reactRouterV3Instrumentation\": function() { return /* reexport */ reactRouterV3Instrumentation; },\n  \"reactRouterV4Instrumentation\": function() { return /* reexport */ reactRouterV4Instrumentation; },\n  \"reactRouterV5Instrumentation\": function() { return /* reexport */ reactRouterV5Instrumentation; },\n  \"reactRouterV6Instrumentation\": function() { return /* reexport */ reactRouterV6Instrumentation; },\n  \"setContext\": function() { return /* reexport */ setContext; },\n  \"setExtra\": function() { return /* reexport */ setExtra; },\n  \"setExtras\": function() { return /* reexport */ setExtras; },\n  \"setTag\": function() { return /* reexport */ setTag; },\n  \"setTags\": function() { return /* reexport */ setTags; },\n  \"setUser\": function() { return /* reexport */ setUser; },\n  \"showReportDialog\": function() { return /* reexport */ showReportDialog; },\n  \"startTransaction\": function() { return /* reexport */ startTransaction; },\n  \"useProfiler\": function() { return /* reexport */ useProfiler; },\n  \"winjsStackLineParser\": function() { return /* reexport */ winjsStackLineParser; },\n  \"withErrorBoundary\": function() { return /* reexport */ withErrorBoundary; },\n  \"withProfiler\": function() { return /* reexport */ withProfiler; },\n  \"withScope\": function() { return /* reexport */ withScope; },\n  \"withSentryReactRouterV6Routing\": function() { return /* reexport */ withSentryReactRouterV6Routing; },\n  \"withSentryRouting\": function() { return /* reexport */ withSentryRouting; },\n  \"wrap\": function() { return /* reexport */ sdk_wrap; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@sentry/core/esm/integrations/index.js\nvar integrations_namespaceObject = {};\n__webpack_require__.r(integrations_namespaceObject);\n__webpack_require__.d(integrations_namespaceObject, {\n  \"FunctionToString\": function() { return FunctionToString; },\n  \"InboundFilters\": function() { return InboundFilters; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@sentry/browser/esm/integrations/index.js\nvar esm_integrations_namespaceObject = {};\n__webpack_require__.r(esm_integrations_namespaceObject);\n__webpack_require__.d(esm_integrations_namespaceObject, {\n  \"Breadcrumbs\": function() { return Breadcrumbs; },\n  \"Dedupe\": function() { return Dedupe; },\n  \"GlobalHandlers\": function() { return GlobalHandlers; },\n  \"HttpContext\": function() { return HttpContext; },\n  \"LinkedErrors\": function() { return LinkedErrors; },\n  \"TryCatch\": function() { return TryCatch; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@sentry/tracing/esm/integrations/index.js\nvar tracing_esm_integrations_namespaceObject = {};\n__webpack_require__.r(tracing_esm_integrations_namespaceObject);\n__webpack_require__.d(tracing_esm_integrations_namespaceObject, {\n  \"Apollo\": function() { return Apollo; },\n  \"BrowserTracing\": function() { return BrowserTracing; },\n  \"Express\": function() { return Express; },\n  \"GraphQL\": function() { return GraphQL; },\n  \"Mongo\": function() { return Mongo; },\n  \"Mysql\": function() { return Mysql; },\n  \"Postgres\": function() { return Postgres; },\n  \"Prisma\": function() { return Prisma; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(3);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(5671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(3144);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/object.js\nvar object = __webpack_require__(2362);\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/integrations/functiontostring.js\n\n\n\nvar originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\n\nvar FunctionToString = /*#__PURE__*/function () {\n  function FunctionToString() {\n    (0,classCallCheck/* default */.Z)(this, FunctionToString);\n\n    FunctionToString.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(FunctionToString, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = FunctionToString.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      originalFunctionToString = Function.prototype.toString;\n\n      Function.prototype.toString = function () {\n        var context = (0,object/* getOriginalFunction */.HK)(this) || this;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return originalFunctionToString.apply(context, args);\n      };\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'FunctionToString';\n    }\n  }]);\n\n  return FunctionToString;\n}();\n\nFunctionToString.__initStatic();\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(2982);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/logger.js\nvar logger = __webpack_require__(245);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/misc.js\nvar misc = __webpack_require__(2861);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/string.js\nvar string = __webpack_require__(7940);\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/integrations/inboundfilters.js\n\n\n\n // \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\n\nvar DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n/** Options for the InboundFilters integration */\n\n/** Inbound filters configurable by the user */\n\nvar InboundFilters = /*#__PURE__*/function () {\n  function InboundFilters() {\n    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, InboundFilters);\n\n    ;\n    this._options = _options;\n\n    InboundFilters.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(InboundFilters, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = InboundFilters.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcess = function eventProcess(event) {\n        var hub = getCurrentHub();\n\n        if (hub) {\n          var self = hub.getIntegration(InboundFilters);\n\n          if (self) {\n            var client = hub.getClient();\n            var clientOptions = client ? client.getOptions() : {};\n\n            var options = _mergeOptions(self._options, clientOptions);\n\n            return _shouldDropEvent(event, options) ? null : event;\n          }\n        }\n\n        return event;\n      };\n\n      eventProcess.id = this.name;\n      addGlobalEventProcessor(eventProcess);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'InboundFilters';\n    }\n  }]);\n\n  return InboundFilters;\n}();\n\nInboundFilters.__initStatic();\n/** JSDoc */\n\n\nfunction _mergeOptions() {\n  var internalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var clientOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    allowUrls: [].concat((0,toConsumableArray/* default */.Z)(internalOptions.allowUrls || []), (0,toConsumableArray/* default */.Z)(clientOptions.allowUrls || [])),\n    denyUrls: [].concat((0,toConsumableArray/* default */.Z)(internalOptions.denyUrls || []), (0,toConsumableArray/* default */.Z)(clientOptions.denyUrls || [])),\n    ignoreErrors: [].concat((0,toConsumableArray/* default */.Z)(internalOptions.ignoreErrors || []), (0,toConsumableArray/* default */.Z)(clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n  };\n}\n/** JSDoc */\n\n\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Event dropped due to being internal Sentry Error.\\nEvent: \".concat((0,misc/* getEventDescription */.jH)(event)));\n    return true;\n  }\n\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Event dropped due to being matched by `ignoreErrors` option.\\nEvent: \".concat((0,misc/* getEventDescription */.jH)(event)));\n    return true;\n  }\n\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Event dropped due to being matched by `denyUrls` option.\\nEvent: \".concat((0,misc/* getEventDescription */.jH)(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Event dropped due to not being matched by `allowUrls` option.\\nEvent: \".concat((0,misc/* getEventDescription */.jH)(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isIgnoredError(event, ignoreErrors) {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(function (message) {\n    return ignoreErrors.some(function (pattern) {\n      return (0,string/* isMatchingPattern */.zC)(message, pattern);\n    });\n  });\n}\n\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n\n  var url = _getEventFilterUrl(event);\n\n  return !url ? false : denyUrls.some(function (pattern) {\n    return (0,string/* isMatchingPattern */.zC)(url, pattern);\n  });\n}\n\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n\n  var url = _getEventFilterUrl(event);\n\n  return !url ? true : allowUrls.some(function (pattern) {\n    return (0,string/* isMatchingPattern */.zC)(url, pattern);\n  });\n}\n\nfunction _getPossibleEventMessages(event) {\n  if (event.message) {\n    return [event.message];\n  }\n\n  if (event.exception) {\n    try {\n      var _ref = event.exception.values && event.exception.values[0] || {},\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? '' : _ref$type,\n          _ref$value = _ref.value,\n          value = _ref$value === void 0 ? '' : _ref$value;\n\n      return [\"\".concat(value), \"\".concat(type, \": \").concat(value)];\n    } catch (oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(\"Cannot extract message for event \".concat((0,misc/* getEventDescription */.jH)(event)));\n      return [];\n    }\n  }\n\n  return [];\n}\n\nfunction _isSentryError(event) {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {// ignore\n  }\n\n  return false;\n}\n\nfunction _getLastValidUrl() {\n  var frames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  for (var i = frames.length - 1; i >= 0; i--) {\n    var frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event) {\n  try {\n    var frames;\n\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {// ignore\n    }\n\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(\"Cannot extract url for event \".concat((0,misc/* getEventDescription */.jH)(event)));\n    return null;\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/integrations/index.js\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/hub/esm/hub.js\nvar esm_hub = __webpack_require__(1875);\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/version.js\nvar SDK_VERSION = '7.7.0';\n\n// EXTERNAL MODULE: ./node_modules/@sentry/hub/esm/scope.js\nvar esm_scope = __webpack_require__(7659);\n;// CONCATENATED MODULE: ./node_modules/@sentry/hub/esm/exports.js\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n // Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n\nfunction captureException(exception, captureContext) {\n  return (0,esm_hub/* getCurrentHub */.Gd)().captureException(exception, {\n    captureContext: captureContext\n  });\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\n\n\nfunction captureMessage(message, captureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  var level = typeof captureContext === 'string' ? captureContext : undefined;\n  var context = typeof captureContext !== 'string' ? {\n    captureContext: captureContext\n  } : undefined;\n  return (0,esm_hub/* getCurrentHub */.Gd)().captureMessage(message, level, context);\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\n\n\nfunction captureEvent(event, hint) {\n  return (0,esm_hub/* getCurrentHub */.Gd)().captureEvent(event, hint);\n}\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\n\n\nfunction configureScope(callback) {\n  (0,esm_hub/* getCurrentHub */.Gd)().configureScope(callback);\n}\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\n\n\nfunction addBreadcrumb(breadcrumb) {\n  (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb(breadcrumb);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n\n\nfunction setContext(name, context) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setContext(name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\n\n\nfunction setExtras(extras) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setExtras(extras);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\n\n\nfunction setExtra(key, extra) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setExtra(key, extra);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\n\n\nfunction setTags(tags) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setTags(tags);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\n\n\nfunction setTag(key, value) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setTag(key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\n\n\nfunction setUser(user) {\n  (0,esm_hub/* getCurrentHub */.Gd)().setUser(user);\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\n\n\nfunction withScope(callback) {\n  (0,esm_hub/* getCurrentHub */.Gd)().withScope(callback);\n}\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\n\n\nfunction startTransaction(context, customSamplingContext) {\n  return (0,esm_hub/* getCurrentHub */.Gd)().startTransaction(_objectSpread({\n    metadata: {\n      source: 'custom'\n    }\n  }, context), customSamplingContext);\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(7326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(136);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(2963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(1120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nvar setPrototypeOf = __webpack_require__(9611);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js\n\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) (0,setPrototypeOf/* default */.Z)(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\n\n\n\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, (0,getPrototypeOf/* default */.Z)(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return (0,setPrototypeOf/* default */.Z)(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/error.js\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = error_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction error_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/** An error emitted by Sentry SDKs and related utilities. */\nvar SentryError = /*#__PURE__*/function (_Error) {\n  (0,inherits/* default */.Z)(SentryError, _Error);\n\n  var _super = _createSuper(SentryError);\n\n  /** Display name of this error instance. */\n  function SentryError(message) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, SentryError);\n\n    _this = _super.call(this, message);\n    _this.message = message;\n    ;\n    _this.name = (this instanceof SentryError ? this.constructor : void 0).prototype.constructor.name;\n    Object.setPrototypeOf((0,assertThisInitialized/* default */.Z)(_this), (this instanceof SentryError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return (0,createClass/* default */.Z)(SentryError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/syncpromise.js\nvar syncpromise = __webpack_require__(5370);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/promisebuffer.js\n\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\n\nfunction makePromiseBuffer(limit) {\n  var buffer = [];\n\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n\n\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n\n\n  function add(taskProducer) {\n    if (!isReady()) {\n      return (0,syncpromise/* rejectedSyncPromise */.$2)(new SentryError('Not adding Promise due to buffer limit reached.'));\n    } // start the task and add its promise to the queue\n\n\n    var task = taskProducer();\n\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n\n    void task.then(function () {\n      return remove(task);\n    }) // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, function () {\n      return remove(task).then(null, function () {// We have to add another catch here because `remove()` starts a new promise chain.\n      });\n    });\n    return task;\n  }\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n\n\n  function drain(timeout) {\n    return new syncpromise/* SyncPromise */.cW(function (resolve, reject) {\n      var counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      } // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n\n\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout); // if all promises resolve in time, cancel the timer and resolve to `true`\n\n      buffer.forEach(function (item) {\n        void (0,syncpromise/* resolvedSyncPromise */.WD)(item).then(function () {\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add: add,\n    drain: drain\n  };\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules\nvar slicedToArray = __webpack_require__(885);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/envelope.js\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\n\nfunction createEnvelope(headers) {\n  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [headers, items];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\n\n\nfunction addItemToEnvelope(envelope, newItem) {\n  var _envelope = (0,slicedToArray/* default */.Z)(envelope, 2),\n      headers = _envelope[0],\n      items = _envelope[1];\n\n  return [headers, [].concat((0,toConsumableArray/* default */.Z)(items), [newItem])];\n}\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n */\n\n\nfunction forEachEnvelopeItem(envelope, callback) {\n  var envelopeItems = envelope[1];\n  envelopeItems.forEach(function (envelopeItem) {\n    var envelopeItemType = envelopeItem[0].type;\n    callback(envelopeItem, envelopeItemType);\n  });\n}\n\nfunction encodeUTF8(input, textEncoder) {\n  var utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n/**\n * Serializes an envelope.\n */\n\n\nfunction serializeEnvelope(envelope, textEncoder) {\n  var _envelope2 = (0,slicedToArray/* default */.Z)(envelope, 2),\n      envHeaders = _envelope2[0],\n      items = _envelope2[1]; // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n\n\n  var parts = JSON.stringify(envHeaders);\n\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  var _iterator = _createForOfIteratorHelper(items),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      var _item = (0,slicedToArray/* default */.Z)(item, 2),\n          itemHeaders = _item[0],\n          payload = _item[1];\n\n      append(\"\\n\".concat(JSON.stringify(itemHeaders), \"\\n\"));\n      append(typeof payload === 'string' || payload instanceof Uint8Array ? payload : JSON.stringify(payload));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers) {\n  var totalLength = buffers.reduce(function (acc, buf) {\n    return acc + buf.length;\n  }, 0);\n  var merged = new Uint8Array(totalLength);\n  var offset = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(buffers),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var buffer = _step2.value;\n      merged.set(buffer, offset);\n      offset += buffer.length;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return merged;\n}\n/**\n * Creates attachment envelope items\n */\n\n\nfunction createAttachmentEnvelopeItem(attachment, textEncoder) {\n  var buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n  return [(0,object/* dropUndefinedKeys */.Jr)({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\n\nvar ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default'\n};\n/**\n * Maps the type of an envelope item to a data category.\n */\n\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/ratelimit.js\n\n\n\nfunction ratelimit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = ratelimit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction ratelimit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return ratelimit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ratelimit_arrayLikeToArray(o, minLen); }\n\nfunction ratelimit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ratelimit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction ratelimit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ratelimit_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ratelimit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nvar DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\n\nfunction parseRetryAfterHeader(header) {\n  var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  var headerDelay = parseInt(\"\".concat(header), 10);\n\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  var headerDate = Date.parse(\"\".concat(header));\n\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\n\n\nfunction disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n/**\n * Checks if a category is rate limited\n */\n\n\nfunction isRateLimited(limits, category) {\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return disabledUntil(limits, category) > now;\n}\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\n\n\nfunction updateRateLimits(limits, _ref) {\n  var statusCode = _ref.statusCode,\n      headers = _ref.headers;\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n\n  var updatedRateLimits = ratelimit_objectSpread({}, limits); // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n\n\n  var rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  var retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    var _iterator = ratelimit_createForOfIteratorHelper(rateLimitHeader.trim().split(',')),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var limit = _step.value;\n\n        var _limit$split = limit.split(':', 2),\n            _limit$split2 = (0,slicedToArray/* default */.Z)(_limit$split, 2),\n            retryAfter = _limit$split2[0],\n            categories = _limit$split2[1];\n\n        var headerDelay = parseInt(retryAfter, 10);\n        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n\n        if (!categories) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          var _iterator2 = ratelimit_createForOfIteratorHelper(categories.split(';')),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var category = _step2.value;\n              updatedRateLimits[category] = now + delay;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/transports/base.js\n\nvar DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\n\nfunction createTransport(options, makeRequest) {\n  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  var rateLimits = {};\n\n  var flush = function flush(timeout) {\n    return buffer.drain(timeout);\n  };\n\n  function send(envelope) {\n    var filteredEnvelopeItems = []; // Drop rate limited items from envelope\n\n    forEachEnvelopeItem(envelope, function (item, type) {\n      var envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    }); // Skip sending if envelope is empty after filtering out rate limited events\n\n    if (filteredEnvelopeItems.length === 0) {\n      return (0,syncpromise/* resolvedSyncPromise */.WD)();\n    }\n\n    var filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems); // Creates client report for each item in an envelope\n\n    var recordEnvelopeLoss = function recordEnvelopeLoss(reason) {\n      forEachEnvelopeItem(filteredEnvelope, function (_, type) {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    var requestTask = function requestTask() {\n      return makeRequest({\n        body: serializeEnvelope(filteredEnvelope, options.textEncoder)\n      }).then(function (response) {\n        // We don't want to throw on NOK responses, but we want to at least log them\n        if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Sentry responded with status code \".concat(response.statusCode, \" to sent event.\"));\n        }\n\n        rateLimits = updateRateLimits(rateLimits, response);\n      }, function (error) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Failed while sending event:', error);\n        recordEnvelopeLoss('network_error');\n      });\n    };\n\n    return buffer.add(requestTask).then(function (result) {\n      return result;\n    }, function (error) {\n      if (error instanceof SentryError) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Skipped sending event due to full buffer');\n        recordEnvelopeLoss('queue_overflow');\n        return (0,syncpromise/* resolvedSyncPromise */.WD)();\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  return {\n    send: send,\n    flush: flush\n  };\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/global.js\nvar esm_global = __webpack_require__(4105);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/instrument.js\nvar instrument = __webpack_require__(6710);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/is.js\nvar is = __webpack_require__(2684);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/browser.js\nvar browser = __webpack_require__(595);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/memo.js\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder() {\n  var hasWeakSet = typeof WeakSet === 'function';\n  var inner = hasWeakSet ? new WeakSet() : [];\n\n  function memoize(obj) {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n\n      inner.add(obj);\n      return false;\n    }\n\n    for (var i = 0; i < inner.length; i++) {\n      var value = inner[i];\n\n      if (value === obj) {\n        return true;\n      }\n    }\n\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj) {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (var i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return [memoize, unmemoize];\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/stacktrace.js\nvar stacktrace = __webpack_require__(1313);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/normalize.js\n\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n\nfunction normalize(input) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : +Infinity;\n  var maxProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +Infinity;\n\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: \"**non-serializable** (\".concat(err, \")\")\n    };\n  }\n}\n/** JSDoc */\n\n\nfunction normalizeToSize(object) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var maxSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100 * 1024;\n  var normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\n\n\nfunction visit(key, value) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +Infinity;\n  var maxProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : +Infinity;\n  var memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : memoBuilder();\n\n  var _memo = (0,slicedToArray/* default */.Z)(memo, 2),\n      memoize = _memo[0],\n      unmemoize = _memo[1]; // Get the simple cases out of the way first\n\n\n  if (value === null || ['number', 'boolean', 'string'].includes(typeof value) && !(0,is/* isNaN */.i2)(value)) {\n    return value;\n  }\n\n  var stringified = stringifyValue(key, value); // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  } // From here on, we can assert that `value` is either an object or an array.\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n\n\n  if (value['__sentry_skip_normalization__']) {\n    return value;\n  } // We're also done if we've reached the max depth\n\n\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  } // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n\n\n  if (memoize(value)) {\n    return '[Circular ~]';\n  } // If the value has a `toJSON` method, we call it to extract more information\n\n\n  var valueWithToJSON = value;\n\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      var jsonValue = valueWithToJSON.toJSON(); // We need to normalize the return value of `.toJSON()` in case it has circular references\n\n      return visit('', jsonValue, depth - 1, maxProperties, memo);\n    } catch (err) {// pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  } // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n\n\n  var normalized = Array.isArray(value) ? [] : {};\n  var numAdded = 0; // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n\n  var visitable = (0,object/* convertToPlainObject */.Sh)(value);\n\n  for (var visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    } // Recursively visit all the child nodes\n\n\n    var visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n    numAdded += 1;\n  } // Once we've visited all the branches, remove the parent from memo storage\n\n\n  unmemoize(value); // Return accumulated values\n\n  return normalized;\n}\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\n\n\nfunction stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    } // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n\n    if (typeof __webpack_require__.g !== 'undefined' && value === __webpack_require__.g) {\n      return '[Global]';\n    }\n\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    } // React's SyntheticEvent thingy\n\n\n    if ((0,is/* isSyntheticEvent */.Cy)(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    } // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n\n\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return \"[Function: \".concat((0,stacktrace/* getFunctionName */.$P)(value), \"]\");\n    }\n\n    if (typeof value === 'symbol') {\n      return \"[\".concat(String(value), \"]\");\n    } // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n\n\n    if (typeof value === 'bigint') {\n      return \"[BigInt: \".concat(String(value), \"]\");\n    } // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n\n\n    return \"[object \".concat(Object.getPrototypeOf(value).constructor.name, \"]\");\n  } catch (err) {\n    return \"**non-serializable** (\".concat(err, \")\");\n  }\n}\n/** Calculates bytes size of input string */\n\n\nfunction utf8Length(value) {\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\n\n\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/eventbuilder.js\n\n\nfunction eventbuilder_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction eventbuilder_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? eventbuilder_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : eventbuilder_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n/**\n * This function creates an exception from a JavaScript Error\n */\n\nfunction exceptionFromError(stackParser, ex) {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  var frames = parseStackFrames(stackParser, ex);\n  var exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex)\n  };\n\n  if (frames.length) {\n    exception.stacktrace = {\n      frames: frames\n    };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n/**\n * @hidden\n */\n\n\nfunction eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {\n  var event = {\n    exception: {\n      values: [{\n        type: (0,is/* isEvent */.cO)(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n        value: \"Non-Error \".concat(isUnhandledRejection ? 'promise rejection' : 'exception', \" captured with keys: \").concat((0,object/* extractExceptionKeysForMessage */.zf)(exception))\n      }]\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception)\n    }\n  };\n\n  if (syntheticException) {\n    var frames = parseStackFrames(stackParser, syntheticException);\n\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      event.exception.values[0].stacktrace = {\n        frames: frames\n      };\n    }\n  }\n\n  return event;\n}\n/**\n * @hidden\n */\n\n\nfunction eventFromError(stackParser, ex) {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n}\n/** Parses stack frames from an error */\n\n\nfunction parseStackFrames(stackParser, ex) {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  var stacktrace = ex.stacktrace || ex.stack || '';\n  var popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {// no-empty\n  }\n\n  return [];\n} // Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\n\n\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex) {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n\n\nfunction extractMessage(ex) {\n  var message = ex && ex.message;\n\n  if (!message) {\n    return 'No error message';\n  }\n\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n\n  return message;\n}\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\n\n\nfunction eventbuilder_eventFromException(stackParser, exception, hint, attachStacktrace) {\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  (0,misc/* addExceptionMechanism */.EG)(event); // defaults to { type: 'generic', handled: true }\n\n  event.level = 'error';\n\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n\n  return (0,syncpromise/* resolvedSyncPromise */.WD)(event);\n}\n/**\n * Builds and Event from a Message\n * @hidden\n */\n\n\nfunction eventbuilder_eventFromMessage(stackParser, message) {\n  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';\n  var hint = arguments.length > 3 ? arguments[3] : undefined;\n  var attachStacktrace = arguments.length > 4 ? arguments[4] : undefined;\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n\n  return (0,syncpromise/* resolvedSyncPromise */.WD)(event);\n}\n/**\n * @hidden\n */\n\n\nfunction eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n  var event;\n\n  if ((0,is/* isErrorEvent */.VW)(exception) && exception.error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    var errorEvent = exception;\n    return eventFromError(stackParser, errorEvent.error);\n  } // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n\n\n  if ((0,is/* isDOMError */.TX)(exception) || (0,is/* isDOMException */.fm)(exception)) {\n    var domException = exception;\n\n    if ('stack' in exception) {\n      event = eventFromError(stackParser, exception);\n    } else {\n      var name = domException.name || ((0,is/* isDOMError */.TX)(domException) ? 'DOMError' : 'DOMException');\n      var message = domException.message ? \"\".concat(name, \": \").concat(domException.message) : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      (0,misc/* addExceptionTypeValue */.Db)(event, message);\n    }\n\n    if ('code' in domException) {\n      event.tags = eventbuilder_objectSpread(eventbuilder_objectSpread({}, event.tags), {}, {\n        'DOMException.code': \"\".concat(domException.code)\n      });\n    }\n\n    return event;\n  }\n\n  if ((0,is/* isError */.VZ)(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n\n  if ((0,is/* isPlainObject */.PO)(exception) || (0,is/* isEvent */.cO)(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    var objectException = exception;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    (0,misc/* addExceptionMechanism */.EG)(event, {\n      synthetic: true\n    });\n    return event;\n  } // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n\n\n  event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);\n  (0,misc/* addExceptionTypeValue */.Db)(event, \"\".concat(exception), undefined);\n  (0,misc/* addExceptionMechanism */.EG)(event, {\n    synthetic: true\n  });\n  return event;\n}\n/**\n * @hidden\n */\n\n\nfunction eventFromString(stackParser, input, syntheticException, attachStacktrace) {\n  var event = {\n    message: input\n  };\n\n  if (attachStacktrace && syntheticException) {\n    var frames = parseStackFrames(stackParser, syntheticException);\n\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: input,\n          stacktrace: {\n            frames: frames\n          }\n        }]\n      };\n    }\n  }\n\n  return event;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/helpers.js\n\n\nfunction helpers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction helpers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? helpers_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : helpers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar ignoreOnError = 0;\n/**\n * @hidden\n */\n\nfunction shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n/**\n * @hidden\n */\n\n\nfunction ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(function () {\n    ignoreOnError -= 1;\n  });\n}\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\n\n\nfunction wrap(fn) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var before = arguments.length > 2 ? arguments[2] : undefined;\n\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    var wrapper = fn.__sentry_wrapped__;\n\n    if (wrapper) {\n      return wrapper;\n    } // We don't wanna wrap it twice\n\n\n    if ((0,object/* getOriginalFunction */.HK)(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  } // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n\n\n  var sentryWrapped = function sentryWrapped() {\n    var args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      var wrappedArguments = args.map(function (arg) {\n        return wrap(arg, options);\n      }); // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n      withScope(function (scope) {\n        scope.addEventProcessor(function (event) {\n          if (options.mechanism) {\n            (0,misc/* addExceptionTypeValue */.Db)(event, undefined, undefined);\n            (0,misc/* addExceptionMechanism */.EG)(event, options.mechanism);\n          }\n\n          event.extra = helpers_objectSpread(helpers_objectSpread({}, event.extra), {}, {\n            arguments: args\n          });\n          return event;\n        });\n        captureException(ex);\n      });\n      throw ex;\n    }\n  }; // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n\n\n  try {\n    for (var property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n\n\n  (0,object/* markFunctionWrapped */.$Q)(sentryWrapped, fn);\n  (0,object/* addNonEnumerableProperty */.xp)(fn, '__sentry_wrapped__', sentryWrapped); // Restore original function name (not all browsers allow that)\n\n  try {\n    var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get: function get() {\n          return fn.name;\n        }\n      });\n    }\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n/**\n * All properties the report dialog supports\n */\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/globalhandlers.js\n\n\n\n\n\nfunction globalhandlers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction globalhandlers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? globalhandlers_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : globalhandlers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n/** Global handlers */\n\nvar GlobalHandlers = /*#__PURE__*/function () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    (0,classCallCheck/* default */.Z)(this, GlobalHandlers);\n\n    ;\n\n    GlobalHandlers.prototype.__init.call(this);\n\n    GlobalHandlers.prototype.__init2.call(this);\n\n    this._options = globalhandlers_objectSpread({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(GlobalHandlers, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = GlobalHandlers.id;\n    }\n    /** JSDoc */\n\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._installFunc = {\n        onerror: _installGlobalOnErrorHandler,\n        onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n      };\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      Error.stackTraceLimit = 50;\n      var options = this._options; // We can disable guard-for-in as we construct the options object above + do checks against\n      // `this._installFunc` for the property.\n\n      for (var key in options) {\n        var installFunc = this._installFunc[key];\n\n        if (installFunc && options[key]) {\n          globalHandlerLog(key);\n          installFunc();\n          this._installFunc[key] = undefined;\n        }\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'GlobalHandlers';\n    }\n  }]);\n\n  return GlobalHandlers;\n}();\n\nGlobalHandlers.__initStatic();\n/** JSDoc */\n\n\nfunction _installGlobalOnErrorHandler() {\n  (0,instrument/* addInstrumentationHandler */.o)('error', function (data) {\n    var _getHubAndOptions = getHubAndOptions(),\n        _getHubAndOptions2 = (0,slicedToArray/* default */.Z)(_getHubAndOptions, 3),\n        hub = _getHubAndOptions2[0],\n        stackParser = _getHubAndOptions2[1],\n        attachStacktrace = _getHubAndOptions2[2];\n\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n\n    var msg = data.msg,\n        url = data.url,\n        line = data.line,\n        column = data.column,\n        error = data.error;\n\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n\n    var event = error === undefined && (0,is/* isString */.HD)(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n/** JSDoc */\n\n\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  (0,instrument/* addInstrumentationHandler */.o)('unhandledrejection', function (e) {\n    var _getHubAndOptions3 = getHubAndOptions(),\n        _getHubAndOptions4 = (0,slicedToArray/* default */.Z)(_getHubAndOptions3, 3),\n        hub = _getHubAndOptions4[0],\n        stackParser = _getHubAndOptions4[1],\n        attachStacktrace = _getHubAndOptions4[2];\n\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n\n    var error = e; // dig the object of the rejection out of known event types\n\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {// no-empty\n    }\n\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n\n    var event = (0,is/* isPrimitive */.pt)(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\n\n\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \".concat(String(reason))\n      }]\n    }\n  };\n}\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n\n\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n  var message = (0,is/* isErrorEvent */.VW)(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n/** JSDoc */\n\n\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {}; // event.exception.values\n\n  var ev = e.values = e.values || []; // event.exception.values[0]\n\n  var ev0 = ev[0] = ev[0] || {}; // event.exception.values[0].stacktrace\n\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {}; // event.exception.values[0].stacktrace.frames\n\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = (0,is/* isString */.HD)(url) && url.length > 0 ? url : (0,browser/* getLocationHref */.l)(); // event.exception.values[0].stacktrace.frames\n\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type) {\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"Global Handler attached: \".concat(type));\n}\n\nfunction addMechanismAndCapture(hub, error, event, type) {\n  (0,misc/* addExceptionMechanism */.EG)(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\n\nfunction getHubAndOptions() {\n  var hub = (0,esm_hub/* getCurrentHub */.Gd)();\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {\n    stackParser: function stackParser() {\n      return [];\n    },\n    attachStacktrace: false\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/trycatch.js\n\n\n\n\nfunction trycatch_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction trycatch_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? trycatch_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : trycatch_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar DEFAULT_EVENT_TARGET = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\n\nvar TryCatch = /*#__PURE__*/function () {\n  /** JSDoc */\n\n  /**\n   * @inheritDoc\n   */\n  function TryCatch(options) {\n    (0,classCallCheck/* default */.Z)(this, TryCatch);\n\n    ;\n\n    TryCatch.prototype.__init.call(this);\n\n    this._options = trycatch_objectSpread({\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true\n    }, options);\n  }\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n\n\n  (0,createClass/* default */.Z)(TryCatch, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = TryCatch.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      var global = (0,esm_global/* getGlobalObject */.R)();\n\n      if (this._options.setTimeout) {\n        (0,object/* fill */.hl)(global, 'setTimeout', _wrapTimeFunction);\n      }\n\n      if (this._options.setInterval) {\n        (0,object/* fill */.hl)(global, 'setInterval', _wrapTimeFunction);\n      }\n\n      if (this._options.requestAnimationFrame) {\n        (0,object/* fill */.hl)(global, 'requestAnimationFrame', _wrapRAF);\n      }\n\n      if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n        (0,object/* fill */.hl)(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n\n      var eventTargetOption = this._options.eventTarget;\n\n      if (eventTargetOption) {\n        var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(_wrapEventTarget);\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'TryCatch';\n    }\n  }]);\n\n  return TryCatch;\n}();\n\nTryCatch.__initStatic();\n/** JSDoc */\n\n\nfunction _wrapTimeFunction(original) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: {\n          function: (0,stacktrace/* getFunctionName */.$P)(original)\n        },\n        handled: true,\n        type: 'instrument'\n      }\n    });\n    return original.apply(this, args);\n  };\n}\n/** JSDoc */\n\n\nfunction _wrapRAF(original) {\n  return function (callback) {\n    return original.apply(this, [wrap(callback, {\n      mechanism: {\n        data: {\n          function: 'requestAnimationFrame',\n          handler: (0,stacktrace/* getFunctionName */.$P)(original)\n        },\n        handled: true,\n        type: 'instrument'\n      }\n    })]);\n  };\n}\n/** JSDoc */\n\n\nfunction _wrapXHR(originalSend) {\n  return function () {\n    var xhr = this;\n    var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n    xmlHttpRequestProps.forEach(function (prop) {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        (0,object/* fill */.hl)(xhr, prop, function (original) {\n          var wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: (0,stacktrace/* getFunctionName */.$P)(original)\n              },\n              handled: true,\n              type: 'instrument'\n            }\n          }; // If Instrument integration has been called before TryCatch, get the name of original function\n\n          var originalFunction = (0,object/* getOriginalFunction */.HK)(original);\n\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = (0,stacktrace/* getFunctionName */.$P)(originalFunction);\n          } // Otherwise wrap directly\n\n\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return originalSend.apply(this, args);\n  };\n}\n/** JSDoc */\n\n\nfunction _wrapEventTarget(target) {\n  var global = (0,esm_global/* getGlobalObject */.R)();\n  var proto = global[target] && global[target].prototype;\n\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  (0,object/* fill */.hl)(proto, 'addEventListener', function (original) {\n    return function (eventName, fn, options) {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: (0,stacktrace/* getFunctionName */.$P)(fn),\n                target: target\n              },\n              handled: true,\n              type: 'instrument'\n            }\n          });\n        }\n      } catch (err) {// can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [eventName, wrap(fn, {\n        mechanism: {\n          data: {\n            function: 'addEventListener',\n            handler: (0,stacktrace/* getFunctionName */.$P)(fn),\n            target: target\n          },\n          handled: true,\n          type: 'instrument'\n        }\n      }), options]);\n    };\n  });\n  (0,object/* fill */.hl)(proto, 'removeEventListener', function (originalRemoveEventListener) {\n    return function (eventName, fn, options) {\n      /**\n       * There are 2 possible scenarios here:\n       *\n       * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n       * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n       * as a pass-through, and call original `removeEventListener` with it.\n       *\n       * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n       * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n       * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n       * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n       * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n       *\n       * When someone adds a handler prior to initialization, and then do it again, but after,\n       * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n       * to get rid of the initial handler and it'd stick there forever.\n       */\n      var wrappedEventHandler = fn;\n\n      try {\n        var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n\n        if (originalEventHandler) {\n          originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n        }\n      } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n      }\n\n      return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n    };\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/severity.js\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\nvar validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\n\nfunction severityFromString(level) {\n  return severityLevelFromString(level);\n}\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\n\n\nfunction severityLevelFromString(level) {\n  return level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log';\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\n\n\n\n\nfunction breadcrumbs_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction breadcrumbs_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? breadcrumbs_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : breadcrumbs_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n/** JSDoc */\n\nvar BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\n\nvar Breadcrumbs = /*#__PURE__*/function () {\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    (0,classCallCheck/* default */.Z)(this, Breadcrumbs);\n\n    ;\n\n    Breadcrumbs.prototype.__init.call(this);\n\n    this.options = breadcrumbs_objectSpread({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n\n\n  (0,createClass/* default */.Z)(Breadcrumbs, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Breadcrumbs.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (this.options.console) {\n        (0,instrument/* addInstrumentationHandler */.o)('console', _consoleBreadcrumb);\n      }\n\n      if (this.options.dom) {\n        (0,instrument/* addInstrumentationHandler */.o)('dom', _domBreadcrumb(this.options.dom));\n      }\n\n      if (this.options.xhr) {\n        (0,instrument/* addInstrumentationHandler */.o)('xhr', _xhrBreadcrumb);\n      }\n\n      if (this.options.fetch) {\n        (0,instrument/* addInstrumentationHandler */.o)('fetch', _fetchBreadcrumb);\n      }\n\n      if (this.options.history) {\n        (0,instrument/* addInstrumentationHandler */.o)('history', _historyBreadcrumb);\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = BREADCRUMB_INTEGRATION_ID;\n    }\n  }]);\n\n  return Breadcrumbs;\n}();\n\nBreadcrumbs.__initStatic();\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n\n\nfunction _domBreadcrumb(dom) {\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    } // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n\n    try {\n      target = handlerData.event.target ? (0,browser/* htmlTreeAsString */.R)(handlerData.event.target, keyAttrs) : (0,browser/* htmlTreeAsString */.R)(handlerData.event, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n      category: \"ui.\".concat(handlerData.name),\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n\n  return _innerDomBreadcrumb;\n}\n/**\n * Creates breadcrumbs from console API calls\n */\n\n\nfunction _consoleBreadcrumb(handlerData) {\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: (0,string/* safeJoin */.nK)(handlerData.args, ' ')\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \".concat((0,string/* safeJoin */.nK)(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */\n\n\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    var _ref = handlerData.xhr.__sentry_xhr__ || {},\n        method = _ref.method,\n        url = _ref.url,\n        status_code = _ref.status_code,\n        body = _ref.body;\n\n    (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */\n\n\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: 'error',\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n      category: 'fetch',\n      data: breadcrumbs_objectSpread(breadcrumbs_objectSpread({}, handlerData.fetchData), {}, {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n/**\n * Creates breadcrumbs from history API calls\n */\n\n\nfunction _historyBreadcrumb(handlerData) {\n  var global = (0,esm_global/* getGlobalObject */.R)();\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = (0,misc/* parseUrl */.en)(global.location.href);\n  var parsedFrom = (0,misc/* parseUrl */.en)(from);\n  var parsedTo = (0,misc/* parseUrl */.en)(to); // Initial pushState doesn't provide `from` information\n\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  } // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n\n\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/linkederrors.js\n\n\n\n\n\n\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, LinkedErrors);\n\n    ;\n\n    LinkedErrors.prototype.__init.call(this);\n\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(LinkedErrors, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = LinkedErrors.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      var client = (0,esm_hub/* getCurrentHub */.Gd)().getClient();\n\n      if (!client) {\n        return;\n      }\n\n      (0,esm_scope/* addGlobalEventProcessor */.c)(function (event, hint) {\n        var self = (0,esm_hub/* getCurrentHub */.Gd)().getIntegration(LinkedErrors);\n        return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'LinkedErrors';\n    }\n  }]);\n\n  return LinkedErrors;\n}();\n\nLinkedErrors.__initStatic();\n/**\n * @inheritDoc\n */\n\n\nfunction _handler(parser, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !(0,is/* isInstanceOf */.V9)(hint.originalException, Error)) {\n    return event;\n  }\n\n  var linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);\n\n  event.exception.values = [].concat((0,toConsumableArray/* default */.Z)(linkedErrors), (0,toConsumableArray/* default */.Z)(event.exception.values));\n  return event;\n}\n/**\n * JSDOC\n */\n\n\nfunction _walkErrorTree(parser, limit, error, key) {\n  var stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  if (!(0,is/* isInstanceOf */.V9)(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n\n  var exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception].concat((0,toConsumableArray/* default */.Z)(stack)));\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/httpcontext.js\n\n\n\n\nfunction httpcontext_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction httpcontext_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? httpcontext_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : httpcontext_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar global = (0,esm_global/* getGlobalObject */.R)();\n/** HttpContext integration collects information about HTTP request headers */\n\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    (0,classCallCheck/* default */.Z)(this, HttpContext);\n\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(HttpContext, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = HttpContext.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      (0,esm_scope/* addGlobalEventProcessor */.c)(function (event) {\n        if ((0,esm_hub/* getCurrentHub */.Gd)().getIntegration(HttpContext)) {\n          // if none of the information we want exists, don't bother\n          if (!global.navigator && !global.location && !global.document) {\n            return event;\n          } // grab as much info as exists and add it to the event\n\n\n          var url = event.request && event.request.url || global.location && global.location.href;\n\n          var _ref = global.document || {},\n              referrer = _ref.referrer;\n\n          var _ref2 = global.navigator || {},\n              userAgent = _ref2.userAgent;\n\n          var headers = httpcontext_objectSpread(httpcontext_objectSpread(httpcontext_objectSpread({}, event.request && event.request.headers), referrer && {\n            Referer: referrer\n          }), userAgent && {\n            'User-Agent': userAgent\n          });\n\n          var request = httpcontext_objectSpread(httpcontext_objectSpread({}, url && {\n            url: url\n          }), {}, {\n            headers: headers\n          });\n\n          return httpcontext_objectSpread(httpcontext_objectSpread({}, event), {}, {\n            request: request\n          });\n        }\n\n        return event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'HttpContext';\n    }\n  }]);\n\n  return HttpContext;\n}();\n\nHttpContext.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/dedupe.js\n\n\n\n/** Deduplication filter */\n\nvar Dedupe = /*#__PURE__*/function () {\n  function Dedupe() {\n    (0,classCallCheck/* default */.Z)(this, Dedupe);\n\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Dedupe, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Dedupe.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcessor = function eventProcessor(currentEvent) {\n        var self = getCurrentHub().getIntegration(Dedupe);\n\n        if (self) {\n          // Juuust in case something goes wrong\n          try {\n            if (dedupe_shouldDropEvent(currentEvent, self._previousEvent)) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Event dropped due to being a duplicate of previously captured event.');\n              return null;\n            }\n          } catch (_oO) {\n            return self._previousEvent = currentEvent;\n          }\n\n          return self._previousEvent = currentEvent;\n        }\n\n        return currentEvent;\n      };\n\n      eventProcessor.id = this.name;\n      addGlobalEventProcessor(eventProcessor);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Dedupe';\n    }\n  }]);\n\n  return Dedupe;\n}();\n\nDedupe.__initStatic();\n/** JSDoc */\n\n\nfunction dedupe_shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n/** JSDoc */\n\n\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message; // If neither event has a message property, they were both exceptions, so bail out\n\n  if (!currentMessage && !previousMessage) {\n    return false;\n  } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n\n  var currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n\n  var previousFrames = _getFramesFromEvent(previousEvent); // If neither event has a stacktrace, they are assumed to be the same\n\n\n  if (!currentFrames && !previousFrames) {\n    return true;\n  } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n\n  currentFrames = currentFrames;\n  previousFrames = previousFrames; // If number of frames differ, they are not the same\n\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  } // Otherwise, compare the two\n\n\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint; // If neither event has a fingerprint, they are assumed to be the same\n\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  } // If only one event has a fingerprint, but not the other one, they are not the same\n\n\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint; // Otherwise, compare the two\n\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n/** JSDoc */\n\n\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n/** JSDoc */\n\n\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/integrations/index.js\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js + 1 modules\nvar get = __webpack_require__(8052);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/dsn.js\n\n\n/** Regular expression used to parse a Dsn. */\n\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\n\n\nfunction dsnToString(dsn) {\n  var withPassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var host = dsn.host,\n      path = dsn.path,\n      pass = dsn.pass,\n      port = dsn.port,\n      projectId = dsn.projectId,\n      protocol = dsn.protocol,\n      publicKey = dsn.publicKey;\n  return \"\".concat(protocol, \"://\").concat(publicKey).concat(withPassword && pass ? \":\".concat(pass) : '') + \"@\".concat(host).concat(port ? \":\".concat(port) : '', \"/\").concat(path ? \"\".concat(path, \"/\") : path).concat(projectId);\n}\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\n\n\nfunction dsnFromString(str) {\n  var match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(\"Invalid Sentry Dsn: \".concat(str));\n  }\n\n  var _match$slice = match.slice(1),\n      _match$slice2 = (0,slicedToArray/* default */.Z)(_match$slice, 6),\n      protocol = _match$slice2[0],\n      publicKey = _match$slice2[1],\n      _match$slice2$ = _match$slice2[2],\n      pass = _match$slice2$ === void 0 ? '' : _match$slice2$,\n      host = _match$slice2[3],\n      _match$slice2$2 = _match$slice2[4],\n      port = _match$slice2$2 === void 0 ? '' : _match$slice2$2,\n      lastPath = _match$slice2[5];\n\n  var path = '';\n  var projectId = lastPath;\n  var split = projectId.split('/');\n\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n\n  if (projectId) {\n    var projectMatch = projectId.match(/^\\d+/);\n\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({\n    host: host,\n    pass: pass,\n    path: path,\n    projectId: projectId,\n    port: port,\n    protocol: protocol,\n    publicKey: publicKey\n  });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!(typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n    return;\n  }\n\n  var port = dsn.port,\n      projectId = dsn.projectId,\n      protocol = dsn.protocol;\n  var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(function (component) {\n    if (!dsn[component]) {\n      throw new SentryError(\"Invalid Sentry Dsn: \".concat(component, \" missing\"));\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid projectId \".concat(projectId));\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid protocol \".concat(protocol));\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid port \".concat(port));\n  }\n\n  return true;\n}\n/** The Sentry Dsn, identifying a Sentry instance and project. */\n\n\nfunction makeDsn(from) {\n  var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/api.js\n\n\nfunction api_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction api_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? api_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : api_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\nvar SENTRY_API_VERSION = '7';\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\n\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? \"\".concat(dsn.protocol, \":\") : '';\n  var port = dsn.port ? \":\".concat(dsn.port) : '';\n  return \"\".concat(protocol, \"//\").concat(dsn.host).concat(port).concat(dsn.path ? \"/\".concat(dsn.path) : '', \"/api/\");\n}\n/** Returns the ingest API endpoint for target. */\n\n\nfunction _getIngestEndpoint(dsn) {\n  return \"\".concat(getBaseApiEndpoint(dsn)).concat(dsn.projectId, \"/envelope/\");\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\nfunction _encodedAuth(dsn, sdkInfo) {\n  return (0,object/* urlEncode */._j)(api_objectSpread({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  }, sdkInfo && {\n    sentry_client: \"\".concat(sdkInfo.name, \"/\").concat(sdkInfo.version)\n  }));\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\n\n\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn) {\n  var tunnelOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n  var tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  var sdkInfo = typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n  return tunnel ? tunnel : \"\".concat(_getIngestEndpoint(dsn), \"?\").concat(_encodedAuth(dsn, sdkInfo));\n}\n/** Returns the url to the report dialog endpoint. */\n\n\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = makeDsn(dsnLike);\n  var endpoint = \"\".concat(getBaseApiEndpoint(dsn), \"embed/error-page/\");\n  var encodedOptions = \"dsn=\".concat(dsnToString(dsn));\n\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      var user = dialogOptions.user;\n\n      if (!user) {\n        continue;\n      }\n\n      if (user.name) {\n        encodedOptions += \"&name=\".concat(encodeURIComponent(user.name));\n      }\n\n      if (user.email) {\n        encodedOptions += \"&email=\".concat(encodeURIComponent(user.email));\n      }\n    } else {\n      encodedOptions += \"&\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(dialogOptions[key]));\n    }\n  }\n\n  return \"\".concat(endpoint, \"?\").concat(encodedOptions);\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/hub/esm/session.js\nvar esm_session = __webpack_require__(6073);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/time.js\nvar time = __webpack_require__(5153);\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/baggage.js\nvar esm_baggage = __webpack_require__(9800);\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/envelope.js\n\n\n\nfunction envelope_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction envelope_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? envelope_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : envelope_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n/** Extract sdk info from from the API metadata */\n\nfunction getSdkMetadataForEnvelopeHeader(metadata) {\n  if (!metadata || !metadata.sdk) {\n    return;\n  }\n\n  var _metadata$sdk = metadata.sdk,\n      name = _metadata$sdk.name,\n      version = _metadata$sdk.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\n\n\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [].concat((0,toConsumableArray/* default */.Z)(event.sdk.integrations || []), (0,toConsumableArray/* default */.Z)(sdkInfo.integrations || []));\n  event.sdk.packages = [].concat((0,toConsumableArray/* default */.Z)(event.sdk.packages || []), (0,toConsumableArray/* default */.Z)(sdkInfo.packages || []));\n  return event;\n}\n/** Creates an envelope from a Session */\n\n\nfunction createSessionEnvelope(session, dsn, metadata, tunnel) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  var envelopeHeaders = envelope_objectSpread(envelope_objectSpread({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!tunnel && {\n    dsn: dsnToString(dsn)\n  });\n\n  var envelopeItem = 'aggregates' in session ? [{\n    type: 'sessions'\n  }, session] : [{\n    type: 'session'\n  }, session];\n  return createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n/**\n * Create an Envelope from an event.\n */\n\n\nfunction createEventEnvelope(event, dsn, metadata, tunnel) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  var eventType = event.type || 'event';\n\n  var _ref = event.sdkProcessingMetadata || {},\n      transactionSampling = _ref.transactionSampling;\n\n  var _ref2 = transactionSampling || {},\n      samplingMethod = _ref2.method,\n      sampleRate = _ref2.rate;\n\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  var envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn); // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n\n  delete event.sdkProcessingMetadata;\n  var eventItem = [{\n    type: eventType,\n    sample_rates: [{\n      id: samplingMethod,\n      rate: sampleRate\n    }]\n  }, event];\n  return createEnvelope(envelopeHeaders, [eventItem]);\n}\n\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n  var baggage = event.sdkProcessingMetadata && event.sdkProcessingMetadata.baggage;\n  var dynamicSamplingContext = baggage && (0,esm_baggage/* getSentryBaggageItems */.Hk)(baggage);\n  return envelope_objectSpread(envelope_objectSpread(envelope_objectSpread({\n    event_id: event.event_id,\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!tunnel && {\n    dsn: dsnToString(dsn)\n  }), event.type === 'transaction' && dynamicSamplingContext && {\n    trace: (0,object/* dropUndefinedKeys */.Jr)(envelope_objectSpread({}, dynamicSamplingContext))\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/integration.js\n\n\n\nvar installedIntegrations = [];\n/** Map of integrations assigned to a client */\n\n/**\n * @private\n */\n\nfunction filterDuplicates(integrations) {\n  return integrations.reduce(function (acc, integrations) {\n    if (acc.every(function (accIntegration) {\n      return integrations.name !== accIntegration.name;\n    })) {\n      acc.push(integrations);\n    }\n\n    return acc;\n  }, []);\n}\n/** Gets integration to install */\n\n\nfunction getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && (0,toConsumableArray/* default */.Z)(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n\n  var integrations = (0,toConsumableArray/* default */.Z)(filterDuplicates(defaultIntegrations));\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [].concat((0,toConsumableArray/* default */.Z)(integrations.filter(function (integrations) {\n      return userIntegrations.every(function (userIntegration) {\n        return userIntegration.name !== integrations.name;\n      });\n    })), (0,toConsumableArray/* default */.Z)(filterDuplicates(userIntegrations)));\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } // Make sure that if present, `Debug` integration will always run last\n\n\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    var _integrations;\n\n    (_integrations = integrations).push.apply(_integrations, (0,toConsumableArray/* default */.Z)(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n\n  return integrations;\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\n\n\nfunction integration_setupIntegrations(integrations) {\n  var integrationIndex = {};\n  integrations.forEach(function (integration) {\n    integrationIndex[integration.name] = integration;\n\n    if (installedIntegrations.indexOf(integration.name) === -1) {\n      integration.setupOnce(esm_scope/* addGlobalEventProcessor */.c, esm_hub/* getCurrentHub */.Gd);\n      installedIntegrations.push(integration.name);\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"Integration installed: \".concat(integration.name));\n    }\n  });\n  return integrationIndex;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/baseclient.js\n\n\n\n\n\n\nfunction baseclient_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = baseclient_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction baseclient_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return baseclient_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return baseclient_arrayLikeToArray(o, minLen); }\n\nfunction baseclient_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction baseclient_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction baseclient_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? baseclient_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : baseclient_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\nvar ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\n\nvar BaseClient = /*#__PURE__*/function () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  function BaseClient(options) {\n    (0,classCallCheck/* default */.Z)(this, BaseClient);\n\n    ;\n\n    BaseClient.prototype.__init.call(this);\n\n    BaseClient.prototype.__init2.call(this);\n\n    BaseClient.prototype.__init3.call(this);\n\n    BaseClient.prototype.__init4.call(this);\n\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      var url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport(baseclient_objectSpread(baseclient_objectSpread({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this)\n      }, options.transportOptions), {}, {\n        url: url\n      }));\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('No DSN provided, client will not do anything.');\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(BaseClient, [{\n    key: \"__init\",\n    value:\n    /** Options passed to the SDK. */\n\n    /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n    /** Array of set up integrations. */\n    function __init() {\n      this._integrations = {};\n    }\n    /** Indicates whether this client's integrations have been set up. */\n\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._integrationsInitialized = false;\n    }\n    /** Number of calls being processed */\n\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._numProcessing = 0;\n    }\n    /** Holds flushable  */\n\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this._outcomes = {};\n    }\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint, scope) {\n      var _this = this;\n\n      // ensure we haven't captured this very object before\n      if ((0,misc/* checkOrSetAlreadyCaught */.YO)(exception)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n\n      var eventId = hint && hint.event_id;\n\n      this._process(this.eventFromException(exception, hint).then(function (event) {\n        return _this._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message, level, hint, scope) {\n      var _this2 = this;\n\n      var eventId = hint && hint.event_id;\n      var promisedEvent = (0,is/* isPrimitive */.pt)(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);\n\n      this._process(promisedEvent.then(function (event) {\n        return _this2._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint, scope) {\n      // ensure we haven't captured this very object before\n      if (hint && hint.originalException && (0,misc/* checkOrSetAlreadyCaught */.YO)(hint.originalException)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n\n      var eventId = hint && hint.event_id;\n\n      this._process(this._captureEvent(event, hint, scope).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureSession\",\n    value: function captureSession(session) {\n      if (!this._isEnabled()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('SDK not enabled, will not capture session.');\n        return;\n      }\n\n      if (!(typeof session.release === 'string')) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Discarded session because of missing or non-string release');\n      } else {\n        this.sendSession(session); // After sending, we set init false to indicate it's not the first occurrence\n\n        (0,esm_session/* updateSession */.CT)(session, {\n          init: false\n        });\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getDsn\",\n    value: function getDsn() {\n      return this._dsn;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this._options;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getTransport\",\n    value: function getTransport() {\n      return this._transport;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(timeout) {\n      var transport = this._transport;\n\n      if (transport) {\n        return this._isClientDoneProcessing(timeout).then(function (clientFinished) {\n          return transport.flush(timeout).then(function (transportFlushed) {\n            return clientFinished && transportFlushed;\n          });\n        });\n      } else {\n        return (0,syncpromise/* resolvedSyncPromise */.WD)(true);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(timeout) {\n      var _this3 = this;\n\n      return this.flush(timeout).then(function (result) {\n        _this3.getOptions().enabled = false;\n        return result;\n      });\n    }\n    /**\n     * Sets up the integrations\n     */\n\n  }, {\n    key: \"setupIntegrations\",\n    value: function setupIntegrations() {\n      if (this._isEnabled() && !this._integrationsInitialized) {\n        this._integrations = integration_setupIntegrations(this._options.integrations);\n        this._integrationsInitialized = true;\n      }\n    }\n    /**\n     * Gets an installed integration by its `id`.\n     *\n     * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n     */\n\n  }, {\n    key: \"getIntegrationById\",\n    value: function getIntegrationById(integrationId) {\n      return this._integrations[integrationId];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      try {\n        return this._integrations[integration.id] || null;\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Client\"));\n        return null;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this._dsn) {\n        var env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n        var _iterator = baseclient_createForOfIteratorHelper(hint.attachments || []),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var attachment = _step.value;\n            env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._sendEnvelope(env);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"sendSession\",\n    value: function sendSession(session) {\n      if (this._dsn) {\n        var env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n        this._sendEnvelope(env);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"recordDroppedEvent\",\n    value: function recordDroppedEvent(reason, category) {\n      if (this._options.sendClientReports) {\n        // We want to track each category (error, transaction, session) separately\n        // but still keep the distinction between different type of outcomes.\n        // We could use nested maps, but it's much easier to read and type this way.\n        // A correct type for map-based implementation if we want to go that route\n        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n        // With typescript 4.1 we could even use template literal types\n        var key = \"\".concat(reason, \":\").concat(category);\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"Adding outcome: \\\"\".concat(key, \"\\\"\")); // The following works because undefined + 1 === NaN and NaN is falsy\n\n        this._outcomes[key] = this._outcomes[key] + 1 || 1;\n      }\n    }\n    /** Updates existing session based on the provided event */\n\n  }, {\n    key: \"_updateSessionFromEvent\",\n    value: function _updateSessionFromEvent(session, event) {\n      var crashed = false;\n      var errored = false;\n      var exceptions = event.exception && event.exception.values;\n\n      if (exceptions) {\n        errored = true;\n\n        var _iterator2 = baseclient_createForOfIteratorHelper(exceptions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var ex = _step2.value;\n            var mechanism = ex.mechanism;\n\n            if (mechanism && mechanism.handled === false) {\n              crashed = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // A session is updated and that session update is sent in only one of the two following scenarios:\n      // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n      // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n\n\n      var sessionNonTerminal = session.status === 'ok';\n      var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n\n      if (shouldUpdateAndSend) {\n        (0,esm_session/* updateSession */.CT)(session, baseclient_objectSpread(baseclient_objectSpread({}, crashed && {\n          status: 'crashed'\n        }), {}, {\n          errors: session.errors || Number(errored || crashed)\n        }));\n        this.captureSession(session);\n      }\n    }\n    /**\n     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n     * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n     *\n     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n     * `true`.\n     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n     * `false` otherwise\n     */\n\n  }, {\n    key: \"_isClientDoneProcessing\",\n    value: function _isClientDoneProcessing(timeout) {\n      var _this4 = this;\n\n      return new syncpromise/* SyncPromise */.cW(function (resolve) {\n        var ticked = 0;\n        var tick = 1;\n        var interval = setInterval(function () {\n          if (_this4._numProcessing == 0) {\n            clearInterval(interval);\n            resolve(true);\n          } else {\n            ticked += tick;\n\n            if (timeout && ticked >= timeout) {\n              clearInterval(interval);\n              resolve(false);\n            }\n          }\n        }, tick);\n      });\n    }\n    /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n  }, {\n    key: \"_isEnabled\",\n    value: function _isEnabled() {\n      return this.getOptions().enabled !== false && this._dsn !== undefined;\n    }\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      var _this5 = this;\n\n      var _this$getOptions = this.getOptions(),\n          _this$getOptions$norm = _this$getOptions.normalizeDepth,\n          normalizeDepth = _this$getOptions$norm === void 0 ? 3 : _this$getOptions$norm,\n          _this$getOptions$norm2 = _this$getOptions.normalizeMaxBreadth,\n          normalizeMaxBreadth = _this$getOptions$norm2 === void 0 ? 1000 : _this$getOptions$norm2;\n\n      var prepared = baseclient_objectSpread(baseclient_objectSpread({}, event), {}, {\n        event_id: event.event_id || hint.event_id || (0,misc/* uuid4 */.DM)(),\n        timestamp: event.timestamp || (0,time/* dateTimestampInSeconds */.yW)()\n      });\n\n      this._applyClientOptions(prepared);\n\n      this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.\n      // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n\n\n      var finalScope = scope;\n\n      if (hint.captureContext) {\n        finalScope = esm_scope/* Scope.clone */.s.clone(finalScope).update(hint.captureContext);\n      } // We prepare the result here with a resolved Event.\n\n\n      var result = (0,syncpromise/* resolvedSyncPromise */.WD)(prepared); // This should be the last thing called, since we want that\n      // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n      if (finalScope) {\n        // Collect attachments from the hint and scope\n        var attachments = [].concat((0,toConsumableArray/* default */.Z)(hint.attachments || []), (0,toConsumableArray/* default */.Z)(finalScope.getAttachments()));\n\n        if (attachments.length) {\n          hint.attachments = attachments;\n        } // In case we have a hub we reassign it.\n\n\n        result = finalScope.applyToEvent(prepared, hint);\n      }\n\n      return result.then(function (evt) {\n        if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n          return _this5._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n        }\n\n        return evt;\n      });\n    }\n    /**\n     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n     * Normalized keys:\n     * - `breadcrumbs.data`\n     * - `user`\n     * - `contexts`\n     * - `extra`\n     * @param event Event\n     * @returns Normalized event\n     */\n\n  }, {\n    key: \"_normalizeEvent\",\n    value: function _normalizeEvent(event, depth, maxBreadth) {\n      if (!event) {\n        return null;\n      }\n\n      var normalized = baseclient_objectSpread(baseclient_objectSpread(baseclient_objectSpread(baseclient_objectSpread(baseclient_objectSpread({}, event), event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(function (b) {\n          return baseclient_objectSpread(baseclient_objectSpread({}, b), b.data && {\n            data: normalize(b.data, depth, maxBreadth)\n          });\n        })\n      }), event.user && {\n        user: normalize(event.user, depth, maxBreadth)\n      }), event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth)\n      }), event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth)\n      }); // event.contexts.trace stores information about a Transaction. Similarly,\n      // event.spans[] stores information about child Spans. Given that a\n      // Transaction is conceptually a Span, normalization should apply to both\n      // Transactions and Spans consistently.\n      // For now the decision is to skip normalization of Transactions and Spans,\n      // so this block overwrites the normalized event to add back the original\n      // Transaction information prior to normalization.\n\n\n      if (event.contexts && event.contexts.trace && normalized.contexts) {\n        normalized.contexts.trace = event.contexts.trace; // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n\n        if (event.contexts.trace.data) {\n          normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n        }\n      } // event.spans[].data may contain circular/dangerous data so we need to normalize it\n\n\n      if (event.spans) {\n        normalized.spans = event.spans.map(function (span) {\n          // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n          if (span.data) {\n            span.data = normalize(span.data, depth, maxBreadth);\n          }\n\n          return span;\n        });\n      }\n\n      return normalized;\n    }\n    /**\n     *  Enhances event using the client configuration.\n     *  It takes care of all \"static\" values like environment, release and `dist`,\n     *  as well as truncating overly long values.\n     * @param event event instance to be enhanced\n     */\n\n  }, {\n    key: \"_applyClientOptions\",\n    value: function _applyClientOptions(event) {\n      var options = this.getOptions();\n      var environment = options.environment,\n          release = options.release,\n          dist = options.dist,\n          _options$maxValueLeng = options.maxValueLength,\n          maxValueLength = _options$maxValueLeng === void 0 ? 250 : _options$maxValueLeng;\n\n      if (!('environment' in event)) {\n        event.environment = 'environment' in options ? environment : 'production';\n      }\n\n      if (event.release === undefined && release !== undefined) {\n        event.release = release;\n      }\n\n      if (event.dist === undefined && dist !== undefined) {\n        event.dist = dist;\n      }\n\n      if (event.message) {\n        event.message = (0,string/* truncate */.$G)(event.message, maxValueLength);\n      }\n\n      var exception = event.exception && event.exception.values && event.exception.values[0];\n\n      if (exception && exception.value) {\n        exception.value = (0,string/* truncate */.$G)(exception.value, maxValueLength);\n      }\n\n      var request = event.request;\n\n      if (request && request.url) {\n        request.url = (0,string/* truncate */.$G)(request.url, maxValueLength);\n      }\n    }\n    /**\n     * This function adds all used integrations to the SDK info in the event.\n     * @param event The event that will be filled with all integrations.\n     */\n\n  }, {\n    key: \"_applyIntegrationsMetadata\",\n    value: function _applyIntegrationsMetadata(event) {\n      var integrationsArray = Object.keys(this._integrations);\n\n      if (integrationsArray.length > 0) {\n        event.sdk = event.sdk || {};\n        event.sdk.integrations = [].concat((0,toConsumableArray/* default */.Z)(event.sdk.integrations || []), (0,toConsumableArray/* default */.Z)(integrationsArray));\n      }\n    }\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n\n  }, {\n    key: \"_captureEvent\",\n    value: function _captureEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scope = arguments.length > 2 ? arguments[2] : undefined;\n      return this._processEvent(event, hint, scope).then(function (finalEvent) {\n        return finalEvent.event_id;\n      }, function (reason) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(reason);\n        return undefined;\n      });\n    }\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n\n  }, {\n    key: \"_processEvent\",\n    value: function _processEvent(event, hint, scope) {\n      var _this6 = this;\n\n      var _this$getOptions2 = this.getOptions(),\n          beforeSend = _this$getOptions2.beforeSend,\n          sampleRate = _this$getOptions2.sampleRate;\n\n      if (!this._isEnabled()) {\n        return (0,syncpromise/* rejectedSyncPromise */.$2)(new SentryError('SDK not enabled, will not capture event.'));\n      }\n\n      var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent\n      // 0.0 === 0% events are sent\n      // Sampling for transaction happens somewhere else\n\n      if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n        this.recordDroppedEvent('sample_rate', 'error');\n        return (0,syncpromise/* rejectedSyncPromise */.$2)(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \".concat(sampleRate, \")\")));\n      }\n\n      return this._prepareEvent(event, hint, scope).then(function (prepared) {\n        if (prepared === null) {\n          _this6.recordDroppedEvent('event_processor', event.type || 'error');\n\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        var isInternalException = hint.data && hint.data.__sentry__ === true;\n\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        var beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      }).then(function (processedEvent) {\n        if (processedEvent === null) {\n          _this6.recordDroppedEvent('before_send', event.type || 'error');\n\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        var session = scope && scope.getSession();\n\n        if (!isTransaction && session) {\n          _this6._updateSessionFromEvent(session, processedEvent);\n        }\n\n        _this6.sendEvent(processedEvent, hint);\n\n        return processedEvent;\n      }).then(null, function (reason) {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        _this6.captureException(reason, {\n          data: {\n            __sentry__: true\n          },\n          originalException: reason\n        });\n\n        throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \".concat(reason));\n      });\n    }\n    /**\n     * Occupies the client with processing and event\n     */\n\n  }, {\n    key: \"_process\",\n    value: function _process(promise) {\n      var _this7 = this;\n\n      this._numProcessing += 1;\n      void promise.then(function (value) {\n        _this7._numProcessing -= 1;\n        return value;\n      }, function (reason) {\n        _this7._numProcessing -= 1;\n        return reason;\n      });\n    }\n    /**\n     * @inheritdoc\n     */\n\n  }, {\n    key: \"_sendEnvelope\",\n    value: function _sendEnvelope(envelope) {\n      if (this._transport && this._dsn) {\n        this._transport.send(envelope).then(null, function (reason) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Error while sending event:', reason);\n        });\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Transport disabled');\n      }\n    }\n    /**\n     * Clears outcomes on this client and returns them.\n     */\n\n  }, {\n    key: \"_clearOutcomes\",\n    value: function _clearOutcomes() {\n      var outcomes = this._outcomes;\n      this._outcomes = {};\n      return Object.keys(outcomes).map(function (key) {\n        var _key$split = key.split(':'),\n            _key$split2 = (0,slicedToArray/* default */.Z)(_key$split, 2),\n            reason = _key$split2[0],\n            category = _key$split2[1];\n\n        return {\n          reason: reason,\n          category: category,\n          quantity: outcomes[key]\n        };\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }]);\n\n  return BaseClient;\n}();\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\n\n\nfunction _ensureBeforeSendRv(rv) {\n  var nullErr = '`beforeSend` method has to return `null` or a valid event.';\n\n  if ((0,is/* isThenable */.J8)(rv)) {\n    return rv.then(function (event) {\n      if (!((0,is/* isPlainObject */.PO)(event) || event === null)) {\n        throw new SentryError(nullErr);\n      }\n\n      return event;\n    }, function (e) {\n      throw new SentryError(\"beforeSend rejected with \".concat(e));\n    });\n  } else if (!((0,is/* isPlainObject */.PO)(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n\n  return rv;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/clientreport.js\n\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\n\nfunction createClientReportEnvelope(discarded_events, dsn, timestamp) {\n  var clientReportItem = [{\n    type: 'client_report'\n  }, {\n    timestamp: timestamp || (0,time/* dateTimestampInSeconds */.yW)(),\n    discarded_events: discarded_events\n  }];\n  return createEnvelope(dsn ? {\n    dsn: dsn\n  } : {}, [clientReportItem]);\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/supports.js\nvar supports = __webpack_require__(4712);\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/transports/utils.js\n\nvar utils_global = (0,esm_global/* getGlobalObject */.R)();\nvar cachedFetchImpl;\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * var f = window.fetch;\n * window.fetch = function () {\n *   var p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\n\nfunction getNativeFetchImplementation() {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  } // Fast path to avoid DOM I/O\n\n\n  if ((0,supports/* isNativeFetch */.Du)(utils_global.fetch)) {\n    return cachedFetchImpl = utils_global.fetch.bind(utils_global);\n  }\n\n  var document = utils_global.document;\n  var fetchImpl = utils_global.fetch;\n\n  if (document && typeof document.createElement === 'function') {\n    try {\n      var sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      var contentWindow = sandbox.contentWindow;\n\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return cachedFetchImpl = fetchImpl.bind(utils_global);\n}\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\n\n\nfunction sendReport(url, body) {\n  var isRealNavigator = Object.prototype.toString.call(utils_global && utils_global.navigator) === '[object Navigator]';\n  var hasSendBeacon = isRealNavigator && typeof utils_global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    var sendBeacon = utils_global.navigator.sendBeacon.bind(utils_global.navigator);\n    sendBeacon(url, body);\n  } else if ((0,supports/* supportsFetch */.Ak)()) {\n    var fetch = getNativeFetchImplementation();\n    fetch(url, {\n      body: body,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true\n    }).then(null, function (error) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(error);\n    });\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/client.js\n\n\n\n\n\n\n\nfunction client_createSuper(Derived) { var hasNativeReflectConstruct = client_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction client_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar globalObject = (0,esm_global/* getGlobalObject */.R)();\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar BrowserClient = /*#__PURE__*/function (_BaseClient) {\n  (0,inherits/* default */.Z)(BrowserClient, _BaseClient);\n\n  var _super = client_createSuper(BrowserClient);\n\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, BrowserClient);\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    };\n    _this = _super.call(this, options);\n\n    if (options.sendClientReports && globalObject.document) {\n      globalObject.document.addEventListener('visibilitychange', function () {\n        if (globalObject.document.visibilityState === 'hidden') {\n          _this._flushOutcomes();\n        }\n      });\n    }\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(BrowserClient, [{\n    key: \"eventFromException\",\n    value: function eventFromException(exception, hint) {\n      return eventbuilder_eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"eventFromMessage\",\n    value: function eventFromMessage(message) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n      var hint = arguments.length > 2 ? arguments[2] : undefined;\n      return eventbuilder_eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event, hint) {\n      // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n      // activated its `sentry` option.\n      // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n      // bundles, if it is not used by the SDK.\n      // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n      // way for now.\n      var breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID);\n\n      if (breadcrumbIntegration && // We check for definedness of `options`, even though it is not strictly necessary, because that access to\n      // `.sentry` below does not throw, in case users provided their own integration with id \"Breadcrumbs\" that does\n      // not have an`options` field\n      breadcrumbIntegration.options && breadcrumbIntegration.options.sentry) {\n        (0,esm_hub/* getCurrentHub */.Gd)().addBreadcrumb({\n          category: \"sentry.\".concat(event.type === 'transaction' ? 'transaction' : 'event'),\n          event_id: event.event_id,\n          level: event.level,\n          message: (0,misc/* getEventDescription */.jH)(event)\n        }, {\n          event: event\n        });\n      }\n\n      (0,get/* default */.Z)((0,getPrototypeOf/* default */.Z)(BrowserClient.prototype), \"sendEvent\", this).call(this, event, hint);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      event.platform = event.platform || 'javascript';\n      return (0,get/* default */.Z)((0,getPrototypeOf/* default */.Z)(BrowserClient.prototype), \"_prepareEvent\", this).call(this, event, hint, scope);\n    }\n    /**\n     * Sends client reports as an envelope.\n     */\n\n  }, {\n    key: \"_flushOutcomes\",\n    value: function _flushOutcomes() {\n      var outcomes = this._clearOutcomes();\n\n      if (outcomes.length === 0) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('No outcomes to send');\n        return;\n      }\n\n      if (!this._dsn) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('No dsn provided, will not send outcomes');\n        return;\n      }\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('Sending outcomes:', outcomes);\n      var url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n      var envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n      try {\n        sendReport(url, serializeEnvelope(envelope));\n      } catch (e) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(e);\n      }\n    }\n  }]);\n\n  return BrowserClient;\n}(BaseClient);\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/transports/fetch.js\n\n\nfunction fetch_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction fetch_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? fetch_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : fetch_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\n\nfunction makeFetchTransport(options) {\n  var nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getNativeFetchImplementation();\n\n  function makeRequest(request) {\n    var requestOptions = fetch_objectSpread({\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers\n    }, options.fetchOptions);\n\n    return nativeFetch(options.url, requestOptions).then(function (response) {\n      return {\n        statusCode: response.status,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        }\n      };\n    });\n  }\n\n  return createTransport(options, makeRequest);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/transports/xhr.js\n\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\n\nvar XHR_READYSTATE_DONE = 4;\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\n\nfunction makeXHRTransport(options) {\n  function makeRequest(request) {\n    return new syncpromise/* SyncPromise */.cW(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.onerror = reject;\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          resolve({\n            statusCode: xhr.status,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After')\n            }\n          });\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (var header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport(options, makeRequest);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/stack-parsers.js\n\n // global reference to slice\n\nvar UNKNOWN_FUNCTION = '?';\nvar OPERA10_PRIORITY = 10;\nvar OPERA11_PRIORITY = 20;\nvar CHROME_PRIORITY = 30;\nvar WINJS_PRIORITY = 40;\nvar GECKO_PRIORITY = 50;\n\nfunction createFrame(filename, func, lineno, colno) {\n  var frame = {\n    filename: filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n} // Chromium based browsers: Chrome, Brave, new Opera, new Edge\n\n\nvar chromeRegex = /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nvar chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nvar chrome = function chrome(line) {\n  var parts = chromeRegex.exec(line);\n\n  if (parts) {\n    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      var subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n\n        parts[3] = subMatch[2]; // line\n\n        parts[4] = subMatch[3]; // column\n      }\n    } // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n\n\n    var _extractSafariExtensi = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]),\n        _extractSafariExtensi2 = (0,slicedToArray/* default */.Z)(_extractSafariExtensi, 2),\n        func = _extractSafariExtensi2[0],\n        filename = _extractSafariExtensi2[1];\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nvar chromeStackLineParser = [CHROME_PRIORITY, chrome]; // gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\n\nvar geckoREgex = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nvar gecko = function gecko(line) {\n  var parts = geckoREgex.exec(line);\n\n  if (parts) {\n    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n\n    if (isEval) {\n      var subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    var filename = parts[3];\n    var func = parts[1] || UNKNOWN_FUNCTION;\n\n    var _extractSafariExtensi3 = extractSafariExtensionDetails(func, filename);\n\n    var _extractSafariExtensi4 = (0,slicedToArray/* default */.Z)(_extractSafariExtensi3, 2);\n\n    func = _extractSafariExtensi4[0];\n    filename = _extractSafariExtensi4[1];\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nvar geckoStackLineParser = [GECKO_PRIORITY, gecko];\nvar winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nvar winjs = function winjs(line) {\n  var parts = winjsRegex.exec(line);\n  return parts ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined) : undefined;\n};\n\nvar winjsStackLineParser = [WINJS_PRIORITY, winjs];\nvar opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nvar opera10 = function opera10(line) {\n  var parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nvar opera10StackLineParser = [OPERA10_PRIORITY, opera10];\nvar opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nvar opera11 = function opera11(line) {\n  var parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nvar opera11StackLineParser = [OPERA11_PRIORITY, opera11];\nvar defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\nvar defaultStackParser = stacktrace/* createStackParser.apply */.pE.apply(void 0, defaultStackLineParsers);\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\n\nvar extractSafariExtensionDetails = function extractSafariExtensionDetails(func, filename) {\n  var isSafariExtension = func.indexOf('safari-extension') !== -1;\n  var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n  return isSafariExtension || isSafariWebExtension ? [func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION, isSafariExtension ? \"safari-extension:\".concat(filename) : \"safari-web-extension:\".concat(filename)] : [func, filename];\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/core/esm/sdk.js\n\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\n\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      logger/* logger.enable */.kg.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n\n  var hub = (0,esm_hub/* getCurrentHub */.Gd)();\n  var scope = hub.getScope();\n\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/sdk.js\n\n\nfunction sdk_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction sdk_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? sdk_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : sdk_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultIntegrations = [new InboundFilters(), new FunctionToString(), new TryCatch(), new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new Dedupe(), new HttpContext()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\n\nfunction init() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.release === undefined) {\n    var window = (0,esm_global/* getGlobalObject */.R)(); // This supports the variable that sentry-webpack-plugin injects\n\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  var clientOptions = sdk_objectSpread(sdk_objectSpread({}, options), {}, {\n    stackParser: (0,stacktrace/* stackParserFromStackParserOptions */.Sq)(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || ((0,supports/* supportsFetch */.Ak)() ? makeFetchTransport : makeXHRTransport)\n  });\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\n\n\nfunction showReportDialog() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var hub = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,esm_hub/* getCurrentHub */.Gd)();\n  // doesn't work without a document (React Native)\n  var global = (0,esm_global/* getGlobalObject */.R)();\n\n  if (!global.document) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  var _hub$getStackTop = hub.getStackTop(),\n      client = _hub$getStackTop.client,\n      scope = _hub$getStackTop.scope;\n\n  var dsn = options.dsn || client && client.getDsn();\n\n  if (!dsn) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = sdk_objectSpread(sdk_objectSpread({}, scope.getUser()), options.user);\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  var script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  var injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\n\nfunction lastEventId() {\n  return (0,esm_hub/* getCurrentHub */.Gd)().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\n\nfunction forceLoad() {// Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\n\nfunction onLoad(callback) {\n  callback();\n}\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\n\n\nfunction flush(timeout) {\n  var client = (0,esm_hub/* getCurrentHub */.Gd)().getClient();\n\n  if (client) {\n    return client.flush(timeout);\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Cannot flush events. No client defined.');\n  return (0,syncpromise/* resolvedSyncPromise */.WD)(false);\n}\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\n\n\nfunction sdk_close(timeout) {\n  var client = (0,esm_hub/* getCurrentHub */.Gd)().getClient();\n\n  if (client) {\n    return client.close(timeout);\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Cannot flush events and disable SDK. No client defined.');\n  return (0,syncpromise/* resolvedSyncPromise */.WD)(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n\n\nfunction sdk_wrap(fn) {\n  return wrap(fn)();\n}\n\nfunction startSessionOnHub(hub) {\n  hub.startSession({\n    ignoreDuration: true\n  });\n  hub.captureSession();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\n\n\nfunction startSessionTracking() {\n  var window = (0,esm_global/* getGlobalObject */.R)();\n  var document = window.document;\n\n  if (typeof document === 'undefined') {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  var hub = (0,esm_hub/* getCurrentHub */.Gd)(); // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n\n  if (!hub.captureSession) {\n    return;\n  } // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n\n\n  startSessionOnHub(hub); // We want to create a session for every navigation as well\n\n  (0,instrument/* addInstrumentationHandler */.o)('history', function (_ref) {\n    var from = _ref.from,\n        to = _ref.to;\n\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub((0,esm_hub/* getCurrentHub */.Gd)());\n    }\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/browser/esm/index.js\n\n\nfunction esm_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction esm_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? esm_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : esm_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar windowIntegrations = {}; // This block is needed to add compatibility with the integrations packages when used with a CDN\n\nvar _window = (0,esm_global/* getGlobalObject */.R)();\n\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nvar INTEGRATIONS = esm_objectSpread(esm_objectSpread(esm_objectSpread({}, windowIntegrations), integrations_namespaceObject), esm_integrations_namespaceObject);\n\n\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(5706);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/constants.js\nvar REACT_RENDER_OP = 'ui.react.render';\nvar REACT_UPDATE_OP = 'ui.react.update';\nvar REACT_MOUNT_OP = 'ui.react.mount';\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/profiler.js\n\n\n\n\n\n\n\n\n\nfunction profiler_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction profiler_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? profiler_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : profiler_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction profiler_createSuper(Derived) { var hasNativeReflectConstruct = profiler_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction profiler_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx\";\nvar UNKNOWN_COMPONENT = 'unknown';\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\n\nvar Profiler = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(Profiler, _React$Component);\n\n  var _super = profiler_createSuper(Profiler);\n\n  function Profiler(props) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Profiler);\n\n    _this = _super.call(this, props);\n\n    Profiler.prototype.__init.call((0,assertThisInitialized/* default */.Z)(_this));\n\n    ;\n    var _this$props = _this.props,\n        name = _this$props.name,\n        _this$props$disabled = _this$props.disabled,\n        disabled = _this$props$disabled === void 0 ? false : _this$props$disabled;\n\n    if (disabled) {\n      return (0,possibleConstructorReturn/* default */.Z)(_this);\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      _this._mountSpan = activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n\n    return _this;\n  } // If a component mounted, we can finish the mount activity.\n\n\n  (0,createClass/* default */.Z)(Profiler, [{\n    key: \"__init\",\n    value:\n    /**\n     * The span of the mount activity\n     * Made protected for the React Native SDK to access\n     */\n    function __init() {\n      this._mountSpan = undefined;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._mountSpan) {\n        this._mountSpan.finish();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var _this2 = this;\n\n      var updateProps = _ref.updateProps,\n          _ref$includeUpdates = _ref.includeUpdates,\n          includeUpdates = _ref$includeUpdates === void 0 ? true : _ref$includeUpdates;\n\n      // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n      // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n      // We are just trying to give baseline clues for further investigation.\n      if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n        // See what props haved changed between the previous props, and the current props. This is\n        // set as data on the span. We just store the prop keys as the values could be potenially very large.\n        var changedProps = Object.keys(updateProps).filter(function (k) {\n          return updateProps[k] !== _this2.props.updateProps[k];\n        });\n\n        if (changedProps.length > 0) {\n          // The update span is a point in time span with 0 duration, just signifying that the component\n          // has been updated.\n          var now = (0,time/* timestampWithMs */._I)();\n\n          this._mountSpan.startChild({\n            data: {\n              changedProps: changedProps\n            },\n            description: \"<\".concat(this.props.name, \">\"),\n            endTimestamp: now,\n            op: REACT_UPDATE_OP,\n            startTimestamp: now\n          });\n        }\n      }\n    } // If a component is unmounted, we can say it is no longer on the screen.\n    // This means we can finish the span representing the component render.\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          _this$props2$includeR = _this$props2.includeRender,\n          includeRender = _this$props2$includeR === void 0 ? true : _this$props2$includeR;\n\n      if (this._mountSpan && includeRender) {\n        // If we were able to obtain the spanId of the mount activity, we should set the\n        // next activity as a child to the component mount activity.\n        this._mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: (0,time/* timestampWithMs */._I)(),\n          op: REACT_RENDER_OP,\n          startTimestamp: this._mountSpan.endTimestamp\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.defaultProps = {\n        disabled: false,\n        includeRender: true,\n        includeUpdates: true\n      };\n    }\n  }]);\n\n  return Profiler;\n}(react.Component);\n\nProfiler.__initStatic();\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\n\n\nfunction withProfiler(WrappedComponent, // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var _this3 = this;\n\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function Wrapped(props) {\n    return react.createElement(Profiler, profiler_objectSpread(profiler_objectSpread({}, options), {}, {\n      name: componentDisplayName,\n      updateProps: props,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      }\n    }), react.createElement(WrappedComponent, profiler_objectSpread(profiler_objectSpread({}, props), {}, {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      }\n    })));\n  };\n\n  Wrapped.displayName = \"profiler(\".concat(componentDisplayName, \")\"); // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoist_non_react_statics_cjs_default()(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\n\n\nfunction useProfiler(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disabled: false,\n    hasRenderSpan: true\n  };\n\n  var _React$useState = react.useState(function () {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n\n    return undefined;\n  }),\n      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 1),\n      mountSpan = _React$useState2[0];\n\n  react.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: (0,time/* timestampWithMs */._I)(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    }; // We only want this to run once.\n  }, []);\n}\n/** Grabs active transaction off scope */\n\n\nfunction getActiveTransaction() {\n  var hub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,esm_hub/* getCurrentHub */.Gd)();\n\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/errorboundary.js\n\n\n\n\n\n\n\n\nfunction errorboundary_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction errorboundary_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? errorboundary_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : errorboundary_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction errorboundary_createSuper(Derived) { var hasNativeReflectConstruct = errorboundary_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction errorboundary_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar errorboundary_jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/errorboundary.tsx\";\n\nfunction isAtLeastReact17(version) {\n  var major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\n\nvar errorboundary_UNKNOWN_COMPONENT = 'unknown';\nvar INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(ErrorBoundary, _React$Component);\n\n  var _super = errorboundary_createSuper(ErrorBoundary);\n\n  function ErrorBoundary() {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, ErrorBoundary);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    ErrorBoundary.prototype.__init.call((0,assertThisInitialized/* default */.Z)(_this));\n\n    ErrorBoundary.prototype.__init2.call((0,assertThisInitialized/* default */.Z)(_this));\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(ErrorBoundary, [{\n    key: \"__init\",\n    value: function __init() {\n      this.state = INITIAL_STATE;\n    }\n  }, {\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, _ref) {\n      var _this2 = this;\n\n      var componentStack = _ref.componentStack;\n      var _this$props = this.props,\n          beforeCapture = _this$props.beforeCapture,\n          onError = _this$props.onError,\n          showDialog = _this$props.showDialog,\n          dialogOptions = _this$props.dialogOptions;\n      withScope(function (scope) {\n        // If on React version >= 17, create stack trace from componentStack param and links\n        // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n        // Linking errors requires the `LinkedErrors` integration be enabled.\n        if (isAtLeastReact17(react.version)) {\n          var errorBoundaryError = new Error(error.message);\n          errorBoundaryError.name = \"React ErrorBoundary \".concat(errorBoundaryError.name);\n          errorBoundaryError.stack = componentStack; // Using the `LinkedErrors` integration to link the errors together.\n\n          error.cause = errorBoundaryError;\n        }\n\n        if (beforeCapture) {\n          beforeCapture(scope, error, componentStack);\n        }\n\n        var eventId = captureException(error, {\n          contexts: {\n            react: {\n              componentStack: componentStack\n            }\n          }\n        });\n\n        if (onError) {\n          onError(error, componentStack, eventId);\n        }\n\n        if (showDialog) {\n          showReportDialog(errorboundary_objectSpread(errorboundary_objectSpread({}, dialogOptions), {}, {\n            eventId: eventId\n          }));\n        } // componentDidCatch is used over getDerivedStateFromError\n        // so that componentStack is accessible through state.\n\n\n        _this2.setState({\n          error: error,\n          componentStack: componentStack,\n          eventId: eventId\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onMount = this.props.onMount;\n\n      if (onMount) {\n        onMount();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$state = this.state,\n          error = _this$state.error,\n          componentStack = _this$state.componentStack,\n          eventId = _this$state.eventId;\n      var onUnmount = this.props.onUnmount;\n\n      if (onUnmount) {\n        onUnmount(error, componentStack, eventId);\n      }\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      var _this3 = this;\n\n      this.resetErrorBoundary = function () {\n        var onReset = _this3.props.onReset;\n        var _this3$state = _this3.state,\n            error = _this3$state.error,\n            componentStack = _this3$state.componentStack,\n            eventId = _this3$state.eventId;\n\n        if (onReset) {\n          onReset(error, componentStack, eventId);\n        }\n\n        _this3.setState(INITIAL_STATE);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          fallback = _this$props2.fallback,\n          children = _this$props2.children;\n      var _this$state2 = this.state,\n          error = _this$state2.error,\n          componentStack = _this$state2.componentStack,\n          eventId = _this$state2.eventId;\n\n      if (error) {\n        var element = undefined;\n\n        if (typeof fallback === 'function') {\n          element = fallback({\n            error: error,\n            componentStack: componentStack,\n            resetError: this.resetErrorBoundary,\n            eventId: eventId\n          });\n        } else {\n          element = fallback;\n        }\n\n        if (react.isValidElement(element)) {\n          return element;\n        }\n\n        if (fallback) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('fallback did not produce a valid ReactElement');\n        } // Fail gracefully if no fallback provided or is not valid\n\n\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children();\n      }\n\n      return children;\n    }\n  }]);\n\n  return ErrorBoundary;\n}(react.Component);\n\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  var _this4 = this;\n\n  var componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || errorboundary_UNKNOWN_COMPONENT;\n\n  var Wrapped = function Wrapped(props) {\n    return react.createElement(ErrorBoundary, errorboundary_objectSpread(errorboundary_objectSpread({}, errorBoundaryOptions), {}, {\n      __self: _this4,\n      __source: {\n        fileName: errorboundary_jsxFileName,\n        lineNumber: 168\n      }\n    }), react.createElement(WrappedComponent, errorboundary_objectSpread(errorboundary_objectSpread({}, props), {}, {\n      __self: _this4,\n      __source: {\n        fileName: errorboundary_jsxFileName,\n        lineNumber: 169\n      }\n    })));\n  };\n\n  Wrapped.displayName = \"errorBoundary(\".concat(componentDisplayName, \")\"); // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoist_non_react_statics_cjs_default()(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/redux.js\n\n\nfunction redux_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction redux_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? redux_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : redux_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar STATE_CONTEXT_KEY = 'redux.state';\nvar defaultOptions = {\n  actionTransformer: function actionTransformer(action) {\n    return action;\n  },\n  stateTransformer: function stateTransformer(state) {\n    return state || null;\n  }\n};\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\n\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = redux_objectSpread(redux_objectSpread({}, defaultOptions), enhancerOptions);\n\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function sentryReducer(state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n          /* Set latest state to scope */\n\n\n          var transformedState = options.stateTransformer(newState);\n\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext(STATE_CONTEXT_KEY, transformedState);\n          } else {\n            scope.setContext(STATE_CONTEXT_KEY, null);\n          }\n          /* Allow user to configure scope with latest state */\n\n\n          var configureScopeWithState = options.configureScopeWithState;\n\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n  };\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/reactrouterv3.js\n // Many of the types below had to be mocked out to prevent typescript issues\n// these types are required for correct functionality.\n\nvar reactrouterv3_global = (0,esm_global/* getGlobalObject */.R)();\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\n\nfunction reactRouterV3Instrumentation(history, routes, match) {\n  return function (startTransaction) {\n    var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var activeTransaction;\n    var prevName; // Have to use global.location because history.location might not be defined.\n\n    if (startTransactionOnPageLoad && reactrouterv3_global && reactrouterv3_global.location) {\n      normalizeTransactionName(routes, reactrouterv3_global.location, match, function (localName) {\n        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'url';\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3'\n          },\n          metadata: {\n            source: source\n          }\n        });\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location) {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          var tags = {\n            'routing.instrumentation': 'react-router-v3'\n          };\n\n          if (prevName) {\n            tags.from = prevName;\n          }\n\n          normalizeTransactionName(routes, location, match, function (localName) {\n            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'url';\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags: tags,\n              metadata: {\n                source: source\n              }\n            });\n          });\n        }\n      });\n    }\n  };\n}\n/**\n * Normalize transaction names using `Router.match`\n */\n\n\nfunction normalizeTransactionName(appRoutes, location, match, callback) {\n  var name = location.pathname;\n  match({\n    location: location,\n    routes: appRoutes\n  }, function (error, _redirectLocation, renderProps) {\n    if (error || !renderProps) {\n      return callback(name);\n    }\n\n    var routePath = getRouteStringFromRoutes(renderProps.routes || []);\n\n    if (routePath.length === 0 || routePath === '/*') {\n      return callback(name);\n    }\n\n    name = routePath;\n    return callback(name, 'route');\n  });\n}\n/**\n * Generate route name from array of routes\n */\n\n\nfunction getRouteStringFromRoutes(routes) {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n\n  var routesWithPaths = routes.filter(function (route) {\n    return !!route.path;\n  });\n  var index = -1;\n\n  for (var x = routesWithPaths.length - 1; x >= 0; x--) {\n    var route = routesWithPaths[x];\n\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n\n  return routesWithPaths.slice(index).filter(function (_ref) {\n    var path = _ref.path;\n    return !!path;\n  }).map(function (_ref2) {\n    var path = _ref2.path;\n    return path;\n  }).join('');\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/reactrouter.js\n\n\n\nfunction reactrouter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction reactrouter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? reactrouter_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : reactrouter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\nvar reactrouter_jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouter.tsx\"; // We need to disable eslint no-explict-any because any is required for the\n// react-router typings.\n\nvar reactrouter_global = (0,esm_global/* getGlobalObject */.R)();\nvar activeTransaction;\n\nfunction reactRouterV4Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);\n}\n\nfunction reactRouterV5Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);\n}\n\nfunction createReactRouterInstrumentation(history, name) {\n  var allRoutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var matchPath = arguments.length > 3 ? arguments[3] : undefined;\n\n  function getInitPathName() {\n    if (history && history.location) {\n      return history.location.pathname;\n    }\n\n    if (reactrouter_global && reactrouter_global.location) {\n      return reactrouter_global.location.pathname;\n    }\n\n    return undefined;\n  }\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n\n\n  function normalizeTransactionName(pathname) {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n\n    var branches = matchRoutes(allRoutes, pathname, matchPath);\n\n    for (var x = 0; x < branches.length; x++) {\n      if (branches[x].match.isExact) {\n        return [branches[x].match.path, 'route'];\n      }\n    }\n\n    return [pathname, 'url'];\n  }\n\n  var tags = {\n    'routing.instrumentation': name\n  };\n  return function (customStartTransaction) {\n    var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var initPathName = getInitPathName();\n\n    if (startTransactionOnPageLoad && initPathName) {\n      var _normalizeTransaction = normalizeTransactionName(initPathName),\n          _normalizeTransaction2 = (0,slicedToArray/* default */.Z)(_normalizeTransaction, 2),\n          _name = _normalizeTransaction2[0],\n          source = _normalizeTransaction2[1];\n\n      activeTransaction = customStartTransaction({\n        name: _name,\n        op: 'pageload',\n        tags: tags,\n        metadata: {\n          source: source\n        }\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location, action) {\n        if (action && (action === 'PUSH' || action === 'POP')) {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          var _normalizeTransaction3 = normalizeTransactionName(location.pathname),\n              _normalizeTransaction4 = (0,slicedToArray/* default */.Z)(_normalizeTransaction3, 2),\n              _name2 = _normalizeTransaction4[0],\n              _source = _normalizeTransaction4[1];\n\n          activeTransaction = customStartTransaction({\n            name: _name2,\n            op: 'navigation',\n            tags: tags,\n            metadata: {\n              source: _source\n            }\n          });\n        }\n      });\n    }\n  };\n}\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\n\n\nfunction matchRoutes(routes, pathname, matchPath) {\n  var branch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  routes.some(function (route) {\n    var match = route.path ? matchPath(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n\n    return !!match;\n  });\n  return branch;\n}\n\nfunction computeRootMatch(pathname) {\n  return {\n    path: '/',\n    url: '/',\n    params: {},\n    isExact: pathname === '/'\n  };\n}\n\nfunction withSentryRouting(Route) {\n  var _this = this;\n\n  var componentDisplayName = Route.displayName || Route.name;\n\n  var WrappedRoute = function WrappedRoute(props) {\n    if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {\n      activeTransaction.setName(props.computedMatch.path);\n      activeTransaction.setMetadata({\n        source: 'route'\n      });\n    } // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n\n\n    return react.createElement(Route, reactrouter_objectSpread(reactrouter_objectSpread({}, props), {}, {\n      __self: _this,\n      __source: {\n        fileName: reactrouter_jsxFileName,\n        lineNumber: 177\n      }\n    }));\n  };\n\n  WrappedRoute.displayName = \"sentryRoute(\".concat(componentDisplayName, \")\");\n  hoist_non_react_statics_cjs_default()(WrappedRoute, Route); // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n\n  return WrappedRoute;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/reactrouterv6.js\n\n\n\nfunction reactrouterv6_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction reactrouterv6_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? reactrouterv6_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : reactrouterv6_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\nvar reactrouterv6_jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouterv6.tsx\";\nvar reactrouterv6_activeTransaction;\n\nvar _useEffect;\n\nvar _useLocation;\n\nvar _useNavigationType;\n\nvar _createRoutesFromChildren;\n\nvar _matchRoutes;\n\nvar _customStartTransaction;\n\nvar _startTransactionOnLocationChange;\n\nvar reactrouterv6_global = (0,esm_global/* getGlobalObject */.R)();\nvar SENTRY_TAGS = {\n  'routing.instrumentation': 'react-router-v6'\n};\n\nfunction reactRouterV6Instrumentation(useEffect, useLocation, useNavigationType, createRoutesFromChildren, matchRoutes) {\n  return function (customStartTransaction) {\n    var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var initPathName = reactrouterv6_global && reactrouterv6_global.location && reactrouterv6_global.location.pathname;\n\n    if (startTransactionOnPageLoad && initPathName) {\n      reactrouterv6_activeTransaction = customStartTransaction({\n        name: initPathName,\n        op: 'pageload',\n        tags: SENTRY_TAGS,\n        metadata: {\n          source: 'url'\n        }\n      });\n    }\n\n    _useEffect = useEffect;\n    _useLocation = useLocation;\n    _useNavigationType = useNavigationType;\n    _matchRoutes = matchRoutes;\n    _createRoutesFromChildren = createRoutesFromChildren;\n    _customStartTransaction = customStartTransaction;\n    _startTransactionOnLocationChange = startTransactionOnLocationChange;\n  };\n}\n\nfunction getNormalizedName(routes, location, matchRoutes) {\n  if (!routes || routes.length === 0 || !matchRoutes) {\n    return [location.pathname, 'url'];\n  }\n\n  var branches = matchRoutes(routes, location);\n\n  if (branches) {\n    for (var x = 0; x < branches.length; x++) {\n      if (branches[x].route && branches[x].route.path && branches[x].pathname === location.pathname) {\n        var path = branches[x].route.path;\n\n        if (path) {\n          return [path, 'route'];\n        }\n      }\n    }\n  }\n\n  return [location.pathname, 'url'];\n}\n\nfunction withSentryReactRouterV6Routing(Routes) {\n  var _this = this;\n\n  if (!_useEffect || !_useLocation || !_useNavigationType || !_createRoutesFromChildren || !_matchRoutes || !_customStartTransaction) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.');\n    return Routes;\n  }\n\n  var isBaseLocation = false;\n  var routes;\n\n  var SentryRoutes = function SentryRoutes(props) {\n    var location = _useLocation();\n\n    var navigationType = _useNavigationType();\n\n    _useEffect(function () {\n      // Performance concern:\n      // This is repeated when <Routes /> is rendered.\n      routes = _createRoutesFromChildren(props.children);\n      isBaseLocation = true;\n\n      if (reactrouterv6_activeTransaction) {\n        var _getNormalizedName = getNormalizedName(routes, location, _matchRoutes),\n            _getNormalizedName2 = (0,slicedToArray/* default */.Z)(_getNormalizedName, 2),\n            name = _getNormalizedName2[0],\n            source = _getNormalizedName2[1];\n\n        reactrouterv6_activeTransaction.setName(name);\n        reactrouterv6_activeTransaction.setMetadata({\n          source: source\n        });\n      }\n    }, [props.children]);\n\n    _useEffect(function () {\n      if (isBaseLocation) {\n        if (reactrouterv6_activeTransaction) {\n          reactrouterv6_activeTransaction.finish();\n        }\n\n        return;\n      }\n\n      if (_startTransactionOnLocationChange && (navigationType === 'PUSH' || navigationType === 'POP')) {\n        if (reactrouterv6_activeTransaction) {\n          reactrouterv6_activeTransaction.finish();\n        }\n\n        var _getNormalizedName3 = getNormalizedName(routes, location, _matchRoutes),\n            _getNormalizedName4 = (0,slicedToArray/* default */.Z)(_getNormalizedName3, 2),\n            name = _getNormalizedName4[0],\n            source = _getNormalizedName4[1];\n\n        reactrouterv6_activeTransaction = _customStartTransaction({\n          name: name,\n          op: 'navigation',\n          tags: SENTRY_TAGS,\n          metadata: {\n            source: source\n          }\n        });\n      }\n    }, [props.children, location, navigationType, isBaseLocation]);\n\n    isBaseLocation = false; // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n\n    return react.createElement(Routes, reactrouterv6_objectSpread(reactrouterv6_objectSpread({}, props), {}, {\n      __self: _this,\n      __source: {\n        fileName: reactrouterv6_jsxFileName,\n        lineNumber: 179\n      }\n    }));\n  };\n\n  hoist_non_react_statics_cjs_default()(SentryRoutes, Routes); // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n\n  return SentryRoutes;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/index.js\n\n\n\n\n\n\n\n\n;\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/hubextensions.js + 1 modules\nvar hubextensions = __webpack_require__(2268);\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _optionalChain(ops) {\n  var lastAccessLHS = undefined;\n  var value = ops[0];\n  var i = 1;\n\n  while (i < ops.length) {\n    var op = ops[i];\n    var fn = ops[i + 1];\n    i += 2; // by checking for loose equality to `null`, we catch both `null` and `undefined`\n\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        var _value;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_value = value).call.apply(_value, [lastAccessLHS].concat(args));\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n\n  return value;\n} // Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     var op = ops[i];\n//     var fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/express.js\n\n\n\n\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\n\nvar Express = /*#__PURE__*/function () {\n  /**\n   * Express App instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Express() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Express);\n\n    ;\n\n    Express.prototype.__init.call(this);\n\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Express, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Express.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (!this._router) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('ExpressIntegration is missing an Express instance');\n        return;\n      }\n\n      instrumentMiddlewares(this._router, this._methods);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Express';\n    }\n  }]);\n\n  return Express;\n}();\n\nExpress.__initStatic();\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n\n\nfunction express_wrap(fn, method) {\n  var arity = fn.length;\n\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n\n          if (transaction) {\n            var span = transaction.startChild({\n              description: fn.name,\n              op: \"express.middleware.\".concat(method)\n            });\n            res.once('finish', function () {\n              span.finish();\n            });\n          }\n\n          return fn.call(this, req, res);\n        };\n      }\n\n    case 3:\n      {\n        return function (req, res, next) {\n          var transaction = res.__sentry_transaction;\n\n          var span = _optionalChain([transaction, 'optionalAccess', function (_) {\n            return _.startChild;\n          }, 'call', function (_2) {\n            return _2({\n              description: fn.name,\n              op: \"express.middleware.\".concat(method)\n            });\n          }]);\n\n          fn.call(this, req, res, function () {\n            _optionalChain([span, 'optionalAccess', function (_3) {\n              return _3.finish;\n            }, 'call', function (_4) {\n              return _4();\n            }]);\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            next.call.apply(next, [this].concat(args));\n          });\n        };\n      }\n\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var transaction = res.__sentry_transaction;\n\n          var span = _optionalChain([transaction, 'optionalAccess', function (_5) {\n            return _5.startChild;\n          }, 'call', function (_6) {\n            return _6({\n              description: fn.name,\n              op: \"express.middleware.\".concat(method)\n            });\n          }]);\n\n          fn.call(this, err, req, res, function () {\n            _optionalChain([span, 'optionalAccess', function (_7) {\n              return _7.finish;\n            }, 'call', function (_8) {\n              return _8();\n            }]);\n\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            next.call.apply(next, [this].concat(args));\n          });\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \".concat(arity));\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\n\n\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return express_wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return express_wrap(a, method);\n        }\n\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\n\n\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n\n  router[method] = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return originalCallback.call.apply(originalCallback, [this].concat((0,toConsumableArray/* default */.Z)(wrapMiddlewareArgs(args, method))));\n  };\n\n  return router;\n}\n/**\n * Patches original router methods\n */\n\n\nfunction instrumentMiddlewares(router) {\n  var methods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/node.js + 1 modules\nvar node = __webpack_require__(9);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/postgres.js\n\n\n\n\n/** Tracing integration for node-postgres package */\n\nvar Postgres = /*#__PURE__*/function () {\n  function Postgres() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Postgres);\n\n    ;\n\n    Postgres.prototype.__init.call(this);\n\n    this._usePgNative = !!options.usePgNative;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Postgres, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Postgres.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var pkg = (0,node/* loadModule */.$y)('pg');\n\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Postgres Integration was unable to require `pg` package.');\n        return;\n      }\n\n      if (this._usePgNative && !_optionalChain([pkg, 'access', function (_2) {\n        return _2.native;\n      }, 'optionalAccess', function (_3) {\n        return _3.Client;\n      }])) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n        return;\n      }\n\n      var _ref = this._usePgNative ? pkg.native : pkg,\n          Client = _ref.Client;\n      /**\n       * function (query, callback) => void\n       * function (query, params, callback) => void\n       * function (query) => Promise\n       * function (query, params) => Promise\n       * function (pg.Cursor) => pg.Cursor\n       */\n\n\n      (0,object/* fill */.hl)(Client.prototype, 'query', function (orig) {\n        return function (config, values, callback) {\n          var scope = getCurrentHub().getScope();\n\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_4) {\n            return _4.getSpan;\n          }, 'call', function (_5) {\n            return _5();\n          }]);\n\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_6) {\n            return _6.startChild;\n          }, 'call', function (_7) {\n            return _7({\n              description: typeof config === 'string' ? config : config.text,\n              op: 'db'\n            });\n          }]);\n\n          if (typeof callback === 'function') {\n            return orig.call(this, config, values, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n\n              callback(err, result);\n            });\n          }\n\n          if (typeof values === 'function') {\n            return orig.call(this, config, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_10) {\n                return _10.finish;\n              }, 'call', function (_11) {\n                return _11();\n              }]);\n\n              values(err, result);\n            });\n          }\n\n          var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n          if ((0,is/* isThenable */.J8)(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_12) {\n                return _12.finish;\n              }, 'call', function (_13) {\n                return _13();\n              }]);\n\n              return res;\n            });\n          }\n\n          _optionalChain([span, 'optionalAccess', function (_14) {\n            return _14.finish;\n          }, 'call', function (_15) {\n            return _15();\n          }]);\n\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Postgres';\n    }\n  }]);\n\n  return Postgres;\n}();\n\nPostgres.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/mysql.js\n\n\n\n\n/** Tracing integration for node-mysql package */\n\nvar Mysql = /*#__PURE__*/function () {\n  function Mysql() {\n    (0,classCallCheck/* default */.Z)(this, Mysql);\n\n    Mysql.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Mysql, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mysql.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var pkg = (0,node/* loadModule */.$y)('mysql/lib/Connection.js');\n\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('Mysql Integration was unable to require `mysql` package.');\n        return;\n      } // The original function will have one of these signatures:\n      //    function (callback) => void\n      //    function (options, callback) => void\n      //    function (options, values, callback) => void\n\n\n      (0,object/* fill */.hl)(pkg, 'createQuery', function (orig) {\n        return function (options, values, callback) {\n          var scope = getCurrentHub().getScope();\n\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n            return _4.startChild;\n          }, 'call', function (_5) {\n            return _5({\n              description: typeof options === 'string' ? options : options.sql,\n              op: 'db'\n            });\n          }]);\n\n          if (typeof callback === 'function') {\n            return orig.call(this, options, values, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_6) {\n                return _6.finish;\n              }, 'call', function (_7) {\n                return _7();\n              }]);\n\n              callback(err, result, fields);\n            });\n          }\n\n          if (typeof values === 'function') {\n            return orig.call(this, options, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n\n              values(err, result, fields);\n            });\n          }\n\n          return orig.call(this, options, values, callback);\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Mysql';\n    }\n  }]);\n\n  return Mysql;\n}();\n\nMysql.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/mongo.js\n\n\n\n\n\n // This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\n\nvar OPERATIONS = ['aggregate', // aggregate(pipeline, options, callback)\n'bulkWrite', // bulkWrite(operations, options, callback)\n'countDocuments', // countDocuments(query, options, callback)\n'createIndex', // createIndex(fieldOrSpec, options, callback)\n'createIndexes', // createIndexes(indexSpecs, options, callback)\n'deleteMany', // deleteMany(filter, options, callback)\n'deleteOne', // deleteOne(filter, options, callback)\n'distinct', // distinct(key, query, options, callback)\n'drop', // drop(options, callback)\n'dropIndex', // dropIndex(indexName, options, callback)\n'dropIndexes', // dropIndexes(options, callback)\n'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n'find', // find(query, options, callback)\n'findOne', // findOne(query, options, callback)\n'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n'indexes', // indexes(options, callback)\n'indexExists', // indexExists(indexes, options, callback)\n'indexInformation', // indexInformation(options, callback)\n'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n'insertMany', // insertMany(docs, options, callback)\n'insertOne', // insertOne(doc, options, callback)\n'isCapped', // isCapped(options, callback)\n'mapReduce', // mapReduce(map, reduce, options, callback)\n'options', // options(options, callback)\n'parallelCollectionScan', // parallelCollectionScan(options, callback)\n'rename', // rename(newName, options, callback)\n'replaceOne', // replaceOne(filter, doc, options, callback)\n'stats', // stats(options, callback)\n'updateMany', // updateMany(filter, update, options, callback)\n'updateOne' // updateOne(filter, update, options, callback)\n]; // All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\n\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\n\nvar Mongo = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Mongo);\n\n    ;\n\n    Mongo.prototype.__init.call(this);\n\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Mongo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mongo.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n      var pkg = (0,node/* loadModule */.$y)(moduleName);\n\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error(\"Mongo Integration was unable to require `\".concat(moduleName, \"` package.\"));\n        return;\n      }\n\n      this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n    }\n    /**\n     * Patches original collection methods\n     */\n\n  }, {\n    key: \"_instrumentOperations\",\n    value: function _instrumentOperations(collection, operations, getCurrentHub) {\n      var _this = this;\n\n      operations.forEach(function (operation) {\n        return _this._patchOperation(collection, operation, getCurrentHub);\n      });\n    }\n    /**\n     * Patches original collection to utilize our tracing functionality\n     */\n\n  }, {\n    key: \"_patchOperation\",\n    value: function _patchOperation(collection, operation, getCurrentHub) {\n      if (!(operation in collection.prototype)) return;\n\n      var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n      (0,object/* fill */.hl)(collection.prototype, operation, function (orig) {\n        return function () {\n          var _this2 = this;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var lastArg = args[args.length - 1];\n          var scope = getCurrentHub().getScope();\n\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]); // Check if the operation was passed a callback. (mapReduce requires a different check, as\n          // its (non-callback) arguments can also be functions.)\n\n\n          if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n            var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n              return _4.startChild;\n            }, 'call', function (_5) {\n              return _5(getSpanContext(_this2, operation, args));\n            }]);\n\n            var maybePromise = orig.call.apply(orig, [this].concat(args));\n\n            if ((0,is/* isThenable */.J8)(maybePromise)) {\n              return maybePromise.then(function (res) {\n                _optionalChain([span, 'optionalAccess', function (_6) {\n                  return _6.finish;\n                }, 'call', function (_7) {\n                  return _7();\n                }]);\n\n                return res;\n              });\n            } else {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n\n              return maybePromise;\n            }\n          }\n\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_10) {\n            return _10.startChild;\n          }, 'call', function (_11) {\n            return _11(getSpanContext(_this2, operation, args.slice(0, -1)));\n          }]);\n\n          return orig.call.apply(orig, [this].concat((0,toConsumableArray/* default */.Z)(args.slice(0, -1)), [function (err, result) {\n            _optionalChain([span, 'optionalAccess', function (_12) {\n              return _12.finish;\n            }, 'call', function (_13) {\n              return _13();\n            }]);\n\n            lastArg(err, result);\n          }]));\n        };\n      });\n    }\n    /**\n     * Form a SpanContext based on the user input to a given operation.\n     */\n\n  }, {\n    key: \"_getSpanContextFromOperationArguments\",\n    value: function _getSpanContextFromOperationArguments(collection, operation, args) {\n      var data = {\n        collectionName: collection.collectionName,\n        dbName: collection.dbName,\n        namespace: collection.namespace\n      };\n      var spanContext = {\n        op: 'db',\n        description: operation,\n        data: data\n      }; // If the operation takes no arguments besides `options` and `callback`, or if argument\n      // collection is disabled for this operation, just return early.\n\n      var signature = OPERATION_SIGNATURES[operation];\n      var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n\n      if (!signature || !shouldDescribe) {\n        return spanContext;\n      }\n\n      try {\n        // Special case for `mapReduce`, as the only one accepting functions as arguments.\n        if (operation === 'mapReduce') {\n          var _args = (0,slicedToArray/* default */.Z)(args, 2),\n              map = _args[0],\n              reduce = _args[1];\n\n          data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n          data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n        } else {\n          for (var i = 0; i < signature.length; i++) {\n            data[signature[i]] = JSON.stringify(args[i]);\n          }\n        }\n      } catch (_oO) {// no-empty\n      }\n\n      return spanContext;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Mongo';\n    }\n  }]);\n\n  return Mongo;\n}();\n\nMongo.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/prisma.js\n\n\n\n\n\nfunction isValidPrismaClient(possibleClient) {\n  return possibleClient && !!possibleClient['$use'];\n}\n/** Tracing integration for @prisma/client package */\n\n\nvar Prisma = /*#__PURE__*/function () {\n  /**\n   * Prisma ORM Client Instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Prisma() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Prisma);\n\n    ;\n\n    Prisma.prototype.__init.call(this);\n\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"Unsupported Prisma client provided to PrismaIntegration. Provided client: \".concat(JSON.stringify(options.client)));\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Prisma, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Prisma.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!this._client) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.error */.kg.error('PrismaIntegration is missing a Prisma Client Instance');\n        return;\n      }\n\n      this._client.$use(function (params, next) {\n        var scope = getCurrentHub().getScope();\n\n        var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n          return _2.getSpan;\n        }, 'call', function (_3) {\n          return _3();\n        }]);\n\n        var action = params.action;\n        var model = params.model;\n\n        var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n          return _4.startChild;\n        }, 'call', function (_5) {\n          return _5({\n            description: model ? \"\".concat(model, \" \").concat(action) : action,\n            op: 'db.prisma'\n          });\n        }]);\n\n        var rv = next(params);\n\n        if ((0,is/* isThenable */.J8)(rv)) {\n          return rv.then(function (res) {\n            _optionalChain([span, 'optionalAccess', function (_6) {\n              return _6.finish;\n            }, 'call', function (_7) {\n              return _7();\n            }]);\n\n            return res;\n          });\n        }\n\n        _optionalChain([span, 'optionalAccess', function (_8) {\n          return _8.finish;\n        }, 'call', function (_9) {\n          return _9();\n        }]);\n\n        return rv;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Prisma';\n    }\n  }]);\n\n  return Prisma;\n}();\n\nPrisma.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/graphql.js\n\n\n\n\n/** Tracing integration for graphql package */\n\nvar GraphQL = /*#__PURE__*/function () {\n  function GraphQL() {\n    (0,classCallCheck/* default */.Z)(this, GraphQL);\n\n    GraphQL.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(GraphQL, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = GraphQL.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var pkg = (0,node/* loadModule */.$y)('graphql/execution/execute.js');\n\n      if (!pkg) {\n        logger/* logger.error */.kg.error('GraphQL Integration was unable to require graphql/execution package.');\n        return;\n      }\n\n      (0,object/* fill */.hl)(pkg, 'execute', function (orig) {\n        return function () {\n          var scope = getCurrentHub().getScope();\n\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n            return _4.startChild;\n          }, 'call', function (_5) {\n            return _5({\n              description: 'execute',\n              op: 'db.graphql'\n            });\n          }]);\n\n          _optionalChain([scope, 'optionalAccess', function (_6) {\n            return _6.setSpan;\n          }, 'call', function (_7) {\n            return _7(span);\n          }]);\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var rv = orig.call.apply(orig, [this].concat(args));\n\n          if ((0,is/* isThenable */.J8)(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n\n              _optionalChain([scope, 'optionalAccess', function (_10) {\n                return _10.setSpan;\n              }, 'call', function (_11) {\n                return _11(parentSpan);\n              }]);\n\n              return res;\n            });\n          }\n\n          _optionalChain([span, 'optionalAccess', function (_12) {\n            return _12.finish;\n          }, 'call', function (_13) {\n            return _13();\n          }]);\n\n          _optionalChain([scope, 'optionalAccess', function (_14) {\n            return _14.setSpan;\n          }, 'call', function (_15) {\n            return _15(parentSpan);\n          }]);\n\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'GraphQL';\n    }\n  }]);\n\n  return GraphQL;\n}();\n\nGraphQL.__initStatic();\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/node/apollo.js\n\n\n\n\n/** Tracing integration for Apollo */\n\nvar Apollo = /*#__PURE__*/function () {\n  function Apollo() {\n    (0,classCallCheck/* default */.Z)(this, Apollo);\n\n    Apollo.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(Apollo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Apollo.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var pkg = (0,node/* loadModule */.$y)('apollo-server-core');\n\n      if (!pkg) {\n        logger/* logger.error */.kg.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n\n\n      (0,object/* fill */.hl)(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n        return function () {\n          var resolvers = Array.isArray(this.config.resolvers) ? this.config.resolvers : [this.config.resolvers];\n          this.config.resolvers = resolvers.map(function (model) {\n            Object.keys(model).forEach(function (resolverGroupName) {\n              Object.keys(model[resolverGroupName]).forEach(function (resolverName) {\n                if (typeof model[resolverGroupName][resolverName] !== 'function') {\n                  return;\n                }\n\n                wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n              });\n            });\n            return model;\n          });\n          return orig.call(this);\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Apollo';\n    }\n  }]);\n\n  return Apollo;\n}();\n\nApollo.__initStatic();\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\n\n\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  (0,object/* fill */.hl)(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      var scope = getCurrentHub().getScope();\n\n      var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n        return _2.getSpan;\n      }, 'call', function (_3) {\n        return _3();\n      }]);\n\n      var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n        return _4.startChild;\n      }, 'call', function (_5) {\n        return _5({\n          description: \"\".concat(resolverGroupName, \".\").concat(resolverName),\n          op: 'db.graphql.apollo'\n        });\n      }]);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var rv = orig.call.apply(orig, [this].concat(args));\n\n      if ((0,is/* isThenable */.J8)(rv)) {\n        return rv.then(function (res) {\n          _optionalChain([span, 'optionalAccess', function (_6) {\n            return _6.finish;\n          }, 'call', function (_7) {\n            return _7();\n          }]);\n\n          return res;\n        });\n      }\n\n      _optionalChain([span, 'optionalAccess', function (_8) {\n        return _8.finish;\n      }, 'call', function (_9) {\n        return _9();\n      }]);\n\n      return rv;\n    };\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/utils/esm/tracing.js\nvar TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nfunction extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/idletransaction.js\nvar idletransaction = __webpack_require__(1441);\n// EXTERNAL MODULE: ./node_modules/@sentry/tracing/esm/utils.js\nvar utils = __webpack_require__(2662);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/backgroundtab.js\n\n\nvar backgroundtab_global = (0,esm_global/* getGlobalObject */.R)();\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\n\nfunction registerBackgroundTabDetection() {\n  if (backgroundtab_global && backgroundtab_global.document) {\n    backgroundtab_global.document.addEventListener('visibilitychange', function () {\n      var activeTransaction = (0,utils/* getActiveTransaction */.x1)();\n\n      if (backgroundtab_global.document.hidden && activeTransaction) {\n        var statusType = 'cancelled';\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Transaction: \".concat(statusType, \" -> since tab moved to the background, op: \").concat(activeTransaction.op)); // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n\n\n// EXTERNAL MODULE: ./node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\nvar _nullishCoalesce = __webpack_require__(1508);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js\nvar bindReporter = function bindReporter(callback, metric, reportAllChanges) {\n  var prevValue;\n  return function (forceReport) {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0); // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nvar generateUniqueID = function generateUniqueID() {\n  return \"v2-\".concat(Date.now(), \"-\").concat(Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js\n\n\n\nvar initMetric = function initMetric(name, value) {\n  return {\n    name: name,\n    value: (0,_nullishCoalesce/* _nullishCoalesce */.h)(value, function () {\n      return -1;\n    }),\n    delta: 0,\n    entries: [],\n    id: generateUniqueID()\n  };\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nvar observe = function observe(type, callback) {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      var po = new PerformanceObserver(function (l) {\n        return l.getEntries().map(callback);\n      });\n      po.observe({\n        type: type,\n        buffered: true\n      });\n      return po;\n    }\n  } catch (e) {// Do nothing.\n  }\n\n  return;\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar onHidden = function onHidden(cb, once) {\n  var onHiddenOrPageHide = function onHiddenOrPageHide(event) {\n    if (event.type === 'pagehide' || (0,esm_global/* getGlobalObject */.R)().document.visibilityState === 'hidden') {\n      cb(event);\n\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n\n  addEventListener('visibilitychange', onHiddenOrPageHide, true); // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js\n\n\n\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://wicg.github.io/layout-instability/#sec-layout-shift\n\nvar getCLS = function getCLS(onReport, reportAllChanges) {\n  var metric = initMetric('CLS', 0);\n  var report;\n  var sessionValue = 0;\n  var sessionEntries = [];\n\n  var entryHandler = function entryHandler(entry) {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      var firstSessionEntry = sessionEntries[0];\n      var lastSessionEntry = sessionEntries[sessionEntries.length - 1]; // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n\n      if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      } // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n\n\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  var po = observe('layout-shift', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      report(true);\n    });\n  }\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js\n\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar firstHiddenTime = -1;\n\nvar initHiddenTime = function initHiddenTime() {\n  return (0,esm_global/* getGlobalObject */.R)().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nvar trackChanges = function trackChanges() {\n  // Update the time if/when the document becomes hidden.\n  onHidden(function (_ref) {\n    var timeStamp = _ref.timeStamp;\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nvar getVisibilityWatcher = function getVisibilityWatcher() {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n\n  };\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js\n\n\n\n\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getFID = function getFID(onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('FID');\n  var report;\n\n  var entryHandler = function entryHandler(entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  var po = observe('first-input', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js\n\n\n\n\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\n\nvar reportedMetricIDs = {};\n\nvar getLCP = function getLCP(onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('LCP');\n  var report;\n\n  var entryHandler = function entryHandler(entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime; // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  var po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    var stopListening = function stopListening() {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    }; // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n\n\n    ['keydown', 'click'].forEach(function (type) {\n      addEventListener(type, stopListening, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening, true);\n  }\n};\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules\nvar objectWithoutProperties = __webpack_require__(4925);\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/metrics/utils.js\n\n\nvar _excluded = [\"startTimestamp\"];\n\nfunction utils_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction utils_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? utils_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : utils_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\n\n\nfunction _startChild(transaction, _ref) {\n  var startTimestamp = _ref.startTimestamp,\n      ctx = (0,objectWithoutProperties/* default */.Z)(_ref, _excluded);\n\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild(utils_objectSpread({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/metrics/index.js\n\n\n\n\n\n\n\n\nvar metrics_global = (0,esm_global/* getGlobalObject */.R)();\n\nfunction getBrowserPerformanceAPI() {\n  return metrics_global && metrics_global.addEventListener && metrics_global.performance;\n}\n\nvar _performanceCursor = 0;\nvar _measurements = {};\n\nvar _lcpEntry;\n\nvar _clsEntry;\n/**\n * Start tracking web vitals\n */\n\n\nfunction startTrackingWebVitals() {\n  var reportAllChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var performance = getBrowserPerformanceAPI();\n\n  if (performance && time/* browserPerformanceTimeOrigin */.Z1) {\n    if (performance.mark) {\n      metrics_global.performance.mark('sentry-tracing-init');\n    }\n\n    _trackCLS();\n\n    _trackLCP(reportAllChanges);\n\n    _trackFID();\n  }\n}\n/** Starts tracking the Cumulative Layout Shift on the current page. */\n\n\nfunction _trackCLS() {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  getCLS(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding CLS');\n    _measurements['cls'] = {\n      value: metric.value,\n      unit: ''\n    };\n    _clsEntry = entry;\n  });\n}\n/** Starts tracking the Largest Contentful Paint on the current page. */\n\n\nfunction _trackLCP(reportAllChanges) {\n  getLCP(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    var timeOrigin = (0,utils/* msToSec */.XL)(time/* browserPerformanceTimeOrigin */.Z1);\n    var startTime = (0,utils/* msToSec */.XL)(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.lcp'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n    _lcpEntry = entry;\n  }, reportAllChanges);\n}\n/** Starts tracking the First Input Delay on the current page. */\n\n\nfunction _trackFID() {\n  getFID(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    var timeOrigin = (0,utils/* msToSec */.XL)(time/* browserPerformanceTimeOrigin */.Z1);\n    var startTime = (0,utils/* msToSec */.XL)(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding FID');\n    _measurements['fid'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.fid'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n  });\n}\n/** Add performance related spans to a transaction */\n\n\nfunction addPerformanceEntries(transaction) {\n  var performance = getBrowserPerformanceAPI();\n\n  if (!performance || !metrics_global.performance.getEntries || !time/* browserPerformanceTimeOrigin */.Z1) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Tracing] Adding & adjusting spans using Performance API');\n  var timeOrigin = (0,utils/* msToSec */.XL)(time/* browserPerformanceTimeOrigin */.Z1);\n  var performanceEntries = performance.getEntries();\n  var responseStartTimestamp;\n  var requestStartTimestamp;\n  performanceEntries.slice(_performanceCursor).forEach(function (entry) {\n    var startTime = (0,utils/* msToSec */.XL)(entry.startTime);\n    var duration = (0,utils/* msToSec */.XL)(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation':\n        {\n          _addNavigationSpans(transaction, entry, timeOrigin);\n\n          responseStartTimestamp = timeOrigin + (0,utils/* msToSec */.XL)(entry.responseStart);\n          requestStartTimestamp = timeOrigin + (0,utils/* msToSec */.XL)(entry.requestStart);\n          break;\n        }\n\n      case 'mark':\n      case 'paint':\n      case 'measure':\n        {\n          var startTimestamp = _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin); // capture web vitals\n\n\n          var firstHidden = getVisibilityWatcher(); // Only report if the page wasn't hidden prior to the web vital.\n\n          var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n          if (entry.name === 'first-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding FP');\n            _measurements['fp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n            _measurements['mark.fp'] = {\n              value: startTimestamp,\n              unit: 'second'\n            };\n          }\n\n          if (entry.name === 'first-contentful-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding FCP');\n            _measurements['fcp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n            _measurements['mark.fcp'] = {\n              value: startTimestamp,\n              unit: 'second'\n            };\n          }\n\n          break;\n        }\n\n      case 'resource':\n        {\n          var resourceName = entry.name.replace(metrics_global.location.origin, '');\n\n          _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n\n          break;\n        }\n\n      default: // Ignore other entry types.\n\n    }\n  });\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction); // Measurements are only available for pageload transactions\n\n\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond'\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond'\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(function (name) {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      } // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n\n\n      var oldValue = _measurements[name].value;\n      var measurementTimestamp = timeOrigin + (0,utils/* msToSec */.XL)(oldValue); // normalizedValue should be in milliseconds\n\n      var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      var delta = normalizedValue - oldValue;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Measurements] Normalized \".concat(name, \" from \").concat(oldValue, \" to \").concat(normalizedValue, \" (\").concat(delta, \")\"));\n      _measurements[name].value = normalizedValue;\n    });\n\n    if (_measurements['mark.fid'] && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: _measurements['mark.fid'].value + (0,utils/* msToSec */.XL)(_measurements['fid'].value),\n        op: 'web.vitals',\n        startTimestamp: _measurements['mark.fid'].value\n      });\n    } // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n\n\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(function (measurementName) {\n      transaction.setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n/** Create measure related spans */\n\n\nfunction _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n\n  return measureStartTimestamp;\n}\n/** Instrument navigation entries */\n\n\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n\n  _addRequest(transaction, entry, timeOrigin);\n}\n/** Create performance navigation related spans */\n\n\nfunction _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[\"\".concat(event, \"End\")];\n  var start = entry[\"\".concat(event, \"Start\")];\n\n  if (!start || !end) {\n    return;\n  }\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: (0,_nullishCoalesce/* _nullishCoalesce */.h)(description, function () {\n      return event;\n    }),\n    startTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(start),\n    endTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(end)\n  });\n}\n/** Create request and response related spans */\n\n\nfunction _addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(entry.requestStart),\n    endTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(entry.responseEnd)\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(entry.responseStart),\n    endTimestamp: timeOrigin + (0,utils/* msToSec */.XL)(entry.responseEnd)\n  });\n}\n/** Create resource-related spans */\n\n\nfunction _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  var data = {};\n\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\".concat(entry.initiatorType) : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n}\n/**\n * Capture the information of the user agent.\n */\n\n\nfunction _trackNavigator(transaction) {\n  var navigator = metrics_global.navigator;\n\n  if (!navigator) {\n    return;\n  } // track network connectivity\n\n\n  var connection = navigator.connection;\n\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = {\n        value: connection.rtt,\n        unit: 'millisecond'\n      };\n    }\n\n    if (isMeasurementValue(connection.downlink)) {\n      _measurements['connection.downlink'] = {\n        value: connection.downlink,\n        unit: ''\n      }; // unit is empty string for now, while relay doesn't support download speed units\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', \"\".concat(navigator.deviceMemory, \" GB\"));\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n/** Add LCP / CLS data to transaction to allow debugging */\n\n\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding LCP Data'); // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', (0,browser/* htmlTreeAsString */.R)(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  } // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n\n\n  if (_clsEntry && _clsEntry.sources) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log('[Measurements] Adding CLS Data');\n\n    _clsEntry.sources.forEach(function (source, index) {\n      return transaction.setTag(\"cls.source.\".concat(index + 1), (0,browser/* htmlTreeAsString */.R)(source.node));\n    });\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/request.js\n\n\n\n\nfunction request_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction request_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? request_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : request_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n/** Options for Request Instrumentation */\n\nvar defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\n\nfunction instrumentOutgoingRequests(_options) {\n  var _defaultRequestInstru = request_objectSpread(request_objectSpread({}, defaultRequestInstrumentationOptions), _options),\n      traceFetch = _defaultRequestInstru.traceFetch,\n      traceXHR = _defaultRequestInstru.traceXHR,\n      tracingOrigins = _defaultRequestInstru.tracingOrigins,\n      shouldCreateSpanForRequest = _defaultRequestInstru.shouldCreateSpanForRequest; // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n\n\n  var urlMap = {};\n\n  var defaultShouldCreateSpan = function defaultShouldCreateSpan(url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return (0,string/* isMatchingPattern */.zC)(url, origin);\n    }) && !(0,string/* isMatchingPattern */.zC)(url, 'sentry_key');\n    return urlMap[url];\n  }; // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n\n\n  var shouldCreateSpan = defaultShouldCreateSpan;\n\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function shouldCreateSpan(url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  var spans = {};\n\n  if (traceFetch) {\n    (0,instrument/* addInstrumentationHandler */.o)('fetch', function (handlerData) {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    (0,instrument/* addInstrumentationHandler */.o)('xhr', function (handlerData) {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\n\n\nfunction fetchCallback(handlerData, shouldCreateSpan, spans) {\n  if (!(0,utils/* hasTracingEnabled */.zu)() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    var span = spans[spanId];\n\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n\n      span.finish();\n      delete spans[spanId];\n    }\n\n    return;\n  }\n\n  var activeTransaction = (0,utils/* getActiveTransaction */.x1)();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: request_objectSpread(request_objectSpread({}, handlerData.fetchData), {}, {\n        type: 'fetch'\n      }),\n      description: \"\".concat(handlerData.fetchData.method, \" \").concat(handlerData.fetchData.url),\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0];\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    options.headers = addTracingHeaders(request, activeTransaction.getBaggage(), span, options);\n  }\n}\n\nfunction addTracingHeaders(request, incomingBaggage, span, options) {\n  var headers = options.headers;\n\n  if ((0,is/* isInstanceOf */.V9)(request, Request)) {\n    headers = request.headers;\n  }\n\n  if (headers) {\n    if (typeof headers.append === 'function') {\n      headers.append('sentry-trace', span.toTraceparent());\n      headers.append(esm_baggage/* BAGGAGE_HEADER_NAME */.bU, (0,esm_baggage/* mergeAndSerializeBaggage */.J8)(incomingBaggage, headers.get(esm_baggage/* BAGGAGE_HEADER_NAME */.bU)));\n    } else if (Array.isArray(headers)) {\n      var _headers$find = headers.find(function (_ref) {\n        var _ref2 = (0,slicedToArray/* default */.Z)(_ref, 2),\n            key = _ref2[0],\n            _ = _ref2[1];\n\n        return key === esm_baggage/* BAGGAGE_HEADER_NAME */.bU;\n      }),\n          _headers$find2 = (0,slicedToArray/* default */.Z)(_headers$find, 2),\n          headerBaggageString = _headers$find2[1];\n\n      headers = [].concat((0,toConsumableArray/* default */.Z)(headers), [['sentry-trace', span.toTraceparent()], [esm_baggage/* BAGGAGE_HEADER_NAME */.bU, (0,esm_baggage/* mergeAndSerializeBaggage */.J8)(incomingBaggage, headerBaggageString)]]);\n    } else {\n      headers = request_objectSpread(request_objectSpread({}, headers), {}, {\n        'sentry-trace': span.toTraceparent(),\n        baggage: (0,esm_baggage/* mergeAndSerializeBaggage */.J8)(incomingBaggage, headers.baggage)\n      });\n    }\n  } else {\n    headers = {\n      'sentry-trace': span.toTraceparent(),\n      baggage: (0,esm_baggage/* mergeAndSerializeBaggage */.J8)(incomingBaggage)\n    };\n  }\n\n  return headers;\n}\n/**\n * Create and track xhr request spans\n */\n\n\nfunction xhrCallback(handlerData, shouldCreateSpan, spans) {\n  if (!(0,utils/* hasTracingEnabled */.zu)() || handlerData.xhr && handlerData.xhr.__sentry_own_request__ || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {\n    return;\n  }\n\n  var xhr = handlerData.xhr.__sentry_xhr__; // check first if the request has finished and is tracked by an existing span which should now end\n\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n    var span = spans[spanId];\n\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n      delete spans[spanId];\n    }\n\n    return;\n  } // if not, create a new span to track it\n\n\n  var activeTransaction = (0,utils/* getActiveTransaction */.x1)();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: request_objectSpread(request_objectSpread({}, xhr.data), {}, {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: \"\".concat(xhr.method, \" \").concat(xhr.url),\n      op: 'http.client'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n        var headerBaggageString = handlerData.xhr.getRequestHeader && handlerData.xhr.getRequestHeader(esm_baggage/* BAGGAGE_HEADER_NAME */.bU);\n        handlerData.xhr.setRequestHeader(esm_baggage/* BAGGAGE_HEADER_NAME */.bU, (0,esm_baggage/* mergeAndSerializeBaggage */.J8)(activeTransaction.getBaggage(), headerBaggageString));\n      } catch (_) {// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/router.js\n\nvar router_global = (0,esm_global/* getGlobalObject */.R)();\n/**\n * Default function implementing pageload and navigation transactions\n */\n\nfunction instrumentRoutingWithDefaults(customStartTransaction) {\n  var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (!router_global || !router_global.location) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  var startingUrl = router_global.location.href;\n  var activeTransaction;\n\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: router_global.location.pathname,\n      op: 'pageload',\n      metadata: {\n        source: 'url'\n      }\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    (0,instrument/* addInstrumentationHandler */.o)('history', function (_ref) {\n      var to = _ref.to,\n          from = _ref.from;\n\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n\n        if (activeTransaction) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Finishing current transaction with op: \".concat(activeTransaction.op)); // If there's an open transaction on the scope, we need to finish it before creating an new one.\n\n          activeTransaction.finish();\n        }\n\n        activeTransaction = customStartTransaction({\n          name: router_global.location.pathname,\n          op: 'navigation',\n          metadata: {\n            source: 'url'\n          }\n        });\n      }\n    });\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/browser/browsertracing.js\n\n\n\n\nfunction browsertracing_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction browsertracing_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? browsertracing_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : browsertracing_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\nvar BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n/** Options for Browser Tracing integration */\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = browsertracing_objectSpread({\n  idleTimeout: idletransaction/* DEFAULT_IDLE_TIMEOUT */.nT,\n  finalTimeout: idletransaction/* DEFAULT_FINAL_TIMEOUT */.mg,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing = /*#__PURE__*/function () {\n  function BrowserTracing(_options) {\n    (0,classCallCheck/* default */.Z)(this, BrowserTracing);\n\n    ;\n\n    BrowserTracing.prototype.__init.call(this);\n\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options) {\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = browsertracing_objectSpread(browsertracing_objectSpread(browsertracing_objectSpread({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {}, {\n      tracingOrigins: tracingOrigins\n    });\n    var _metricOptions = this.options._metricOptions;\n    startTrackingWebVitals(_metricOptions && _metricOptions._reportAllChanges);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  (0,createClass/* default */.Z)(BrowserTracing, [{\n    key: \"__init\",\n    value: // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n    // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n    // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n    // integrations.\n\n    /** Browser Tracing integration options */\n\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = BROWSER_TRACING_INTEGRATION_ID;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var _this = this;\n\n      this._getCurrentHub = getCurrentHub;\n\n      if (this._emitOptionsWarning) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"[Tracing] We added a reasonable default for you: \".concat(defaultRequestInstrumentationOptions.tracingOrigins));\n      }\n\n      var _this$options = this.options,\n          instrumentRouting = _this$options.routingInstrumentation,\n          startTransactionOnLocationChange = _this$options.startTransactionOnLocationChange,\n          startTransactionOnPageLoad = _this$options.startTransactionOnPageLoad,\n          markBackgroundTransactions = _this$options.markBackgroundTransactions,\n          traceFetch = _this$options.traceFetch,\n          traceXHR = _this$options.traceXHR,\n          tracingOrigins = _this$options.tracingOrigins,\n          shouldCreateSpanForRequest = _this$options.shouldCreateSpanForRequest;\n      instrumentRouting(function (context) {\n        return _this._createRouteTransaction(context);\n      }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n      if (markBackgroundTransactions) {\n        registerBackgroundTabDetection();\n      }\n\n      instrumentOutgoingRequests({\n        traceFetch: traceFetch,\n        traceXHR: traceXHR,\n        tracingOrigins: tracingOrigins,\n        shouldCreateSpanForRequest: shouldCreateSpanForRequest\n      });\n    }\n    /** Create routing idle transaction. */\n\n  }, {\n    key: \"_createRouteTransaction\",\n    value: function _createRouteTransaction(context) {\n      var _this2 = this;\n\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.warn */.kg.warn(\"[Tracing] Did not create \".concat(context.op, \" transaction because _getCurrentHub is invalid.\"));\n        return undefined;\n      }\n\n      var _this$options2 = this.options,\n          beforeNavigate = _this$options2.beforeNavigate,\n          idleTimeout = _this$options2.idleTimeout,\n          finalTimeout = _this$options2.finalTimeout;\n      var parentContextFromHeader = context.op === 'pageload' ? extractTraceDataFromMetaTags() : undefined;\n\n      var expandedContext = browsertracing_objectSpread(browsertracing_objectSpread(browsertracing_objectSpread(browsertracing_objectSpread({}, context), parentContextFromHeader), parentContextFromHeader && {\n        metadata: browsertracing_objectSpread(browsertracing_objectSpread({}, context.metadata), parentContextFromHeader.metadata)\n      }), {}, {\n        trimEnd: true\n      });\n\n      var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n      // from being sent to Sentry).\n\n      var finalContext = modifiedContext === undefined ? browsertracing_objectSpread(browsertracing_objectSpread({}, expandedContext), {}, {\n        sampled: false\n      }) : modifiedContext; // If `beforeNavigate` set a custom name, record that fact\n\n      finalContext.metadata = finalContext.name !== expandedContext.name ? browsertracing_objectSpread(browsertracing_objectSpread({}, finalContext.metadata), {}, {\n        source: 'custom'\n      }) : finalContext.metadata;\n\n      if (finalContext.sampled === false) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Will not send \".concat(finalContext.op, \" transaction because of beforeNavigate.\"));\n      }\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger/* logger.log */.kg.log(\"[Tracing] Starting \".concat(finalContext.op, \" transaction on scope\"));\n\n      var hub = this._getCurrentHub();\n\n      var _getGlobalObject = (0,esm_global/* getGlobalObject */.R)(),\n          location = _getGlobalObject.location;\n\n      var idleTransaction = (0,hubextensions/* startIdleTransaction */.lb)(hub, finalContext, idleTimeout, finalTimeout, true, {\n        location: location\n      } // for use in the tracesSampler\n      );\n      idleTransaction.registerBeforeFinishCallback(function (transaction) {\n        addPerformanceEntries(transaction);\n        transaction.setTag('sentry_reportAllChanges', Boolean(_this2.options._metricOptions && _this2.options._metricOptions._reportAllChanges));\n      });\n      return idleTransaction;\n    }\n  }]);\n\n  return BrowserTracing;\n}();\n/**\n * Gets transaction context data from `sentry-trace` and `baggage` <meta> tags.\n * @returns Transaction context data or undefined neither tag exists or has valid data\n */\n\n\nfunction extractTraceDataFromMetaTags() {\n  var sentrytraceValue = getMetaContent('sentry-trace');\n  var baggageValue = getMetaContent('baggage');\n  var sentrytraceData = sentrytraceValue ? extractTraceparentData(sentrytraceValue) : undefined;\n  var baggage = (0,esm_baggage/* parseBaggageSetMutability */.rg)(baggageValue, sentrytraceValue); // TODO more extensive checks for baggage validity/emptyness?\n\n  if (sentrytraceData || baggage) {\n    return browsertracing_objectSpread(browsertracing_objectSpread({}, sentrytraceData && sentrytraceData), baggage && {\n      metadata: {\n        baggage: baggage\n      }\n    });\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\n\nfunction getMetaContent(metaName) {\n  var globalObject = (0,esm_global/* getGlobalObject */.R)(); // DOM/querySelector is not available in all environments\n\n  if (globalObject.document && globalObject.document.querySelector) {\n    var el = globalObject.document.querySelector(\"meta[name=\".concat(metaName, \"]\"));\n    return el ? el.getAttribute('content') : null;\n  } else {\n    return null;\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/integrations/index.js\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/tracing/esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n;\n; // Treeshakable guard to remove all code related to tracing\n// Guard for tree\n\nif (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {\n  // We are patching the global object with our hub extension methods\n  (0,hubextensions/* addExtensionMethods */.ro)();\n}\n;// CONCATENATED MODULE: ./node_modules/@sentry/react/esm/sdk.js\n\n/**\n * Inits the React SDK\n */\n\nfunction sdk_init(options) {\n  options._metadata = options._metadata || {};\n  options._metadata.sdk = options._metadata.sdk || {\n    name: 'sentry.javascript.react',\n    packages: [{\n      name: 'npm:@sentry/react',\n      version: SDK_VERSION\n    }],\n    version: SDK_VERSION\n  };\n  init(options);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@sentry/gatsby/esm/utils/integrations.js\n/**\n * Returns the integrations to add to the SDK.\n * If tracing is enabled, `BrowserTracing` is always present.\n *\n * @param options The options users have defined.\n */function getIntegrationsFromOptions(options){var isTracingEnabled=utils/* hasTracingEnabled */.zu(options);if(options.integrations===undefined){return getIntegrationsFromArray([],isTracingEnabled);}else if(Array.isArray(options.integrations)){return getIntegrationsFromArray(options.integrations,isTracingEnabled);}else{return getIntegrationsFromFunction(options.integrations,isTracingEnabled);}}/**\n * Returns the integrations to add to the SDK, from the given integrations array.\n *\n * @param userIntegrations Array of user's integrations.\n * @param isTracingEnabled Whether the user has enabled tracing.\n */function getIntegrationsFromArray(userIntegrations,isTracingEnabled){if(isTracingEnabled&&!userIntegrations.some(function(integration){return integration.name===BrowserTracing.name;})){userIntegrations.push(new BrowserTracing());}return userIntegrations;}/**\n * Returns the integrations to add to the SDK, from the given function.\n *\n * @param userIntegrations Function returning the user's integrations.\n * @param isTracingEnabled Whether the user has enabled tracing.\n */function getIntegrationsFromFunction(userIntegrations,isTracingEnabled){var wrapper=function wrapper(defaultIntegrations){return getIntegrationsFromArray(userIntegrations(defaultIntegrations),isTracingEnabled);};return wrapper;}\n;// CONCATENATED MODULE: ./node_modules/@sentry/gatsby/esm/sdk.js\n/**\n * Inits the Sentry Gatsby SDK.\n */function esm_sdk_init(options){options._metadata=options._metadata||{};options._metadata.sdk=options._metadata.sdk||{name:'sentry.javascript.gatsby',packages:[{name:'npm:@sentry/gatsby',version:SDK_VERSION}],version:SDK_VERSION};var integrations=getIntegrationsFromOptions(options);sdk_init(Object.assign({},options,{integrations:integrations}));}\n;// CONCATENATED MODULE: ./node_modules/@sentry/gatsby/esm/index.js\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///758\n")},6101:function(__unused_webpack_module,exports,__webpack_require__){eval("/* eslint-disable no-console */var Sentry=__webpack_require__(758);exports.onClientEntry=function(_,pluginParams){var isIntialized=isSentryInitialized();var areOptionsDefined=areSentryOptionsDefined(pluginParams);if(isIntialized){if(areOptionsDefined){console.warn('Sentry Logger [Warn]: The SDK was initialized in the Sentry config file, but options were found in the Gatsby config. '+'These have been ignored, merge them to the Sentry config if you want to use them.\\n'+'Learn more about the Gatsby SDK on https://docs.sentry.io/platforms/javascript/guides/gatsby/');}return;}if(!areOptionsDefined){console.error('Sentry Logger [Error]: No config for the Gatsby SDK was found.\\n'+'Learn how to configure it on https://docs.sentry.io/platforms/javascript/guides/gatsby/');return;}Sentry.init(Object.assign({// eslint-disable-next-line no-undef\nrelease:undefined,// eslint-disable-next-line no-undef\ndsn:\"\"},pluginParams));};function isSentryInitialized(){// Although `window` should exist because we're in the browser (where this script\n// is run), and `__SENTRY__.hub` is created when importing the Gatsby SDK, double\n// check that in case something weird happens.\nreturn!!(window&&window.__SENTRY__&&window.__SENTRY__.hub&&window.__SENTRY__.hub.getClient());}function areSentryOptionsDefined(params){if(params==undefined)return false;// Even if there aren't any options, there's a `plugins` property defined as an empty array\nif(Object.keys(params).length==1&&Array.isArray(params.plugins)&&params.plugins.length==0){return false;}return true;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEwMS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrQkFDQSxHQUFNQSxDQUFBQSxNQUFNLENBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUF0QixDQUVBQyxxQkFBQSxDQUF3QixTQUFVRSxDQUFWLENBQWFDLFlBQWIsQ0FBMkIsQ0FDakQsR0FBTUMsQ0FBQUEsWUFBWSxDQUFHQyxtQkFBbUIsRUFBeEMsQ0FDQSxHQUFNQyxDQUFBQSxpQkFBaUIsQ0FBR0MsdUJBQXVCLENBQUNKLFlBQUQsQ0FBakQsQ0FFQSxHQUFJQyxZQUFKLENBQWtCLENBQ2hCLEdBQUlFLGlCQUFKLENBQXVCLENBQ3JCRSxPQUFPLENBQUNDLElBQVIsQ0FDRSx5SEFDQSxxRkFEQSxDQUVBLCtGQUhGLEVBS0QsQ0FDRCxPQUNELENBRUQsR0FBSSxDQUFDSCxpQkFBTCxDQUF3QixDQUN0QkUsT0FBTyxDQUFDRSxLQUFSLENBQ0UsbUVBQ0EseUZBRkYsRUFJQSxPQUNELENBRURaLE1BQU0sQ0FBQ2EsSUFBUCxnQkFDRTtBQUNBQyxPQUFPLENBQUVDLFNBRlgsQ0FHRTtBQUNBQyxHQUFHLENBQUVDLEVBSlAsRUFLS1osWUFMTCxHQU9ELENBOUJELENBZ0NBLFFBQVNFLENBQUFBLG1CQUFULEVBQStCLENBQzdCO0FBQ0E7QUFDQTtBQUNBLE1BQU8sQ0FBQyxFQUFFVyxNQUFNLEVBQUlBLE1BQU0sQ0FBQ0MsVUFBakIsRUFBK0JELE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsR0FBakQsRUFBd0RGLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsR0FBbEIsQ0FBc0JDLFNBQXRCLEVBQTFELENBQVIsQ0FDRCxDQUVELFFBQVNaLENBQUFBLHVCQUFULENBQWlDYSxNQUFqQyxDQUF5QyxDQUN2QyxHQUFJQSxNQUFNLEVBQUlDLFNBQWQsQ0FBeUIsTUFBTyxNQUFQLENBQ3pCO0FBQ0EsR0FBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlILE1BQVosRUFBb0JJLE1BQXBCLEVBQThCLENBQTlCLEVBQW1DQyxLQUFLLENBQUNDLE9BQU4sQ0FBY04sTUFBTSxDQUFDTyxPQUFyQixDQUFuQyxFQUFvRVAsTUFBTSxDQUFDTyxPQUFQLENBQWVILE1BQWYsRUFBeUIsQ0FBakcsQ0FBb0csQ0FDbEcsTUFBTyxNQUFQLENBQ0QsQ0FDRCxNQUFPLEtBQVAsQ0FDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvZ2F0c2J5L2dhdHNieS1icm93c2VyLmpzPzE2YWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9nYXRzYnknKTtcblxuZXhwb3J0cy5vbkNsaWVudEVudHJ5ID0gZnVuY3Rpb24gKF8sIHBsdWdpblBhcmFtcykge1xuICBjb25zdCBpc0ludGlhbGl6ZWQgPSBpc1NlbnRyeUluaXRpYWxpemVkKCk7XG4gIGNvbnN0IGFyZU9wdGlvbnNEZWZpbmVkID0gYXJlU2VudHJ5T3B0aW9uc0RlZmluZWQocGx1Z2luUGFyYW1zKTtcblxuICBpZiAoaXNJbnRpYWxpemVkKSB7XG4gICAgaWYgKGFyZU9wdGlvbnNEZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTZW50cnkgTG9nZ2VyIFtXYXJuXTogVGhlIFNESyB3YXMgaW5pdGlhbGl6ZWQgaW4gdGhlIFNlbnRyeSBjb25maWcgZmlsZSwgYnV0IG9wdGlvbnMgd2VyZSBmb3VuZCBpbiB0aGUgR2F0c2J5IGNvbmZpZy4gJyArXG4gICAgICAgICdUaGVzZSBoYXZlIGJlZW4gaWdub3JlZCwgbWVyZ2UgdGhlbSB0byB0aGUgU2VudHJ5IGNvbmZpZyBpZiB5b3Ugd2FudCB0byB1c2UgdGhlbS5cXG4nICtcbiAgICAgICAgJ0xlYXJuIG1vcmUgYWJvdXQgdGhlIEdhdHNieSBTREsgb24gaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvZ2F0c2J5LycsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWFyZU9wdGlvbnNEZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgICdTZW50cnkgTG9nZ2VyIFtFcnJvcl06IE5vIGNvbmZpZyBmb3IgdGhlIEdhdHNieSBTREsgd2FzIGZvdW5kLlxcbicgK1xuICAgICAgJ0xlYXJuIGhvdyB0byBjb25maWd1cmUgaXQgb24gaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvZ2F0c2J5LycsXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBTZW50cnkuaW5pdCh7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmVsZWFzZTogX19TRU5UUllfUkVMRUFTRV9fLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIGRzbjogX19TRU5UUllfRFNOX18sXG4gICAgLi4ucGx1Z2luUGFyYW1zLFxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGlzU2VudHJ5SW5pdGlhbGl6ZWQoKSB7XG4gIC8vIEFsdGhvdWdoIGB3aW5kb3dgIHNob3VsZCBleGlzdCBiZWNhdXNlIHdlJ3JlIGluIHRoZSBicm93c2VyICh3aGVyZSB0aGlzIHNjcmlwdFxuICAvLyBpcyBydW4pLCBhbmQgYF9fU0VOVFJZX18uaHViYCBpcyBjcmVhdGVkIHdoZW4gaW1wb3J0aW5nIHRoZSBHYXRzYnkgU0RLLCBkb3VibGVcbiAgLy8gY2hlY2sgdGhhdCBpbiBjYXNlIHNvbWV0aGluZyB3ZWlyZCBoYXBwZW5zLlxuICByZXR1cm4gISEod2luZG93ICYmIHdpbmRvdy5fX1NFTlRSWV9fICYmIHdpbmRvdy5fX1NFTlRSWV9fLmh1YiAmJiB3aW5kb3cuX19TRU5UUllfXy5odWIuZ2V0Q2xpZW50KCkpO1xufVxuXG5mdW5jdGlvbiBhcmVTZW50cnlPcHRpb25zRGVmaW5lZChwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgLy8gRXZlbiBpZiB0aGVyZSBhcmVuJ3QgYW55IG9wdGlvbnMsIHRoZXJlJ3MgYSBgcGx1Z2luc2AgcHJvcGVydHkgZGVmaW5lZCBhcyBhbiBlbXB0eSBhcnJheVxuICBpZiAoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT0gMSAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5wbHVnaW5zKSAmJiBwYXJhbXMucGx1Z2lucy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6WyJTZW50cnkiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIm9uQ2xpZW50RW50cnkiLCJfIiwicGx1Z2luUGFyYW1zIiwiaXNJbnRpYWxpemVkIiwiaXNTZW50cnlJbml0aWFsaXplZCIsImFyZU9wdGlvbnNEZWZpbmVkIiwiYXJlU2VudHJ5T3B0aW9uc0RlZmluZWQiLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiaW5pdCIsInJlbGVhc2UiLCJfX1NFTlRSWV9SRUxFQVNFX18iLCJkc24iLCJfX1NFTlRSWV9EU05fXyIsIndpbmRvdyIsIl9fU0VOVFJZX18iLCJodWIiLCJnZXRDbGllbnQiLCJwYXJhbXMiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwicGx1Z2lucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6101\n")},5526:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("var _interopRequireDefault=__webpack_require__(5318);exports.__esModule=true;exports.wrapPageElement=void 0;var _wrapPage=_interopRequireDefault(__webpack_require__(6604));var wrapPageElement=_wrapPage.default;exports.wrapPageElement=wrapPageElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUyNi5qcyIsIm1hcHBpbmdzIjoiQUFFQSxHQUFJQSxDQUFBQSxzQkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxJQUFELENBQXBDLENBRUFDLGtCQUFBLENBQXFCLElBQXJCLENBQ0FBLHVCQUFBLENBQTBCLElBQUssRUFBL0IsQ0FFQSxHQUFJRyxDQUFBQSxTQUFTLENBQUdMLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLElBQUQsQ0FBUixDQUF0QyxDQUVBLEdBQUlHLENBQUFBLGVBQWUsQ0FBR0MsU0FBUyxDQUFDQyxPQUFoQyxDQUNBSix1QkFBQSxDQUEwQkUsZUFBMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9nYXRzYnktcGx1Z2luLWludGwvZ2F0c2J5LWJyb3dzZXIuanM/ZjRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndyYXBQYWdlRWxlbWVudCA9IHZvaWQgMDtcblxudmFyIF93cmFwUGFnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vd3JhcC1wYWdlXCIpKTtcblxudmFyIHdyYXBQYWdlRWxlbWVudCA9IF93cmFwUGFnZS5kZWZhdWx0O1xuZXhwb3J0cy53cmFwUGFnZUVsZW1lbnQgPSB3cmFwUGFnZUVsZW1lbnQ7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJ3cmFwUGFnZUVsZW1lbnQiLCJfd3JhcFBhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5526\n")},8368:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("var _interopRequireDefault=__webpack_require__(5318);exports.__esModule=true;exports.IntlContextConsumer=exports.IntlContextProvider=void 0;var _react=_interopRequireDefault(__webpack_require__(7294));var IntlContext=_react.default.createContext();var IntlContextProvider=IntlContext.Provider;exports.IntlContextProvider=IntlContextProvider;var IntlContextConsumer=IntlContext.Consumer;exports.IntlContextConsumer=IntlContextConsumer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM2OC5qcyIsIm1hcHBpbmdzIjoiQUFFQSxHQUFJQSxDQUFBQSxzQkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxJQUFELENBQXBDLENBRUFDLGtCQUFBLENBQXFCLElBQXJCLENBQ0FBLDJCQUFBLENBQThCQSwyQkFBQSxDQUE4QixJQUFLLEVBQWpFLENBRUEsR0FBSUksQ0FBQUEsTUFBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyxJQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxDQUFBQSxXQUFXLENBQUdELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxhQUFmLEVBQWxCLENBRUEsR0FBSUosQ0FBQUEsbUJBQW1CLENBQUdFLFdBQVcsQ0FBQ0csUUFBdEMsQ0FDQVIsMkJBQUEsQ0FBOEJHLG1CQUE5QixDQUNBLEdBQUlELENBQUFBLG1CQUFtQixDQUFHRyxXQUFXLENBQUNJLFFBQXRDLENBQ0FULDJCQUFBLENBQThCRSxtQkFBOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9nYXRzYnktcGx1Z2luLWludGwvaW50bC1jb250ZXh0LmpzPzlmY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5JbnRsQ29udGV4dENvbnN1bWVyID0gZXhwb3J0cy5JbnRsQ29udGV4dFByb3ZpZGVyID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgSW50bENvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KCk7XG5cbnZhciBJbnRsQ29udGV4dFByb3ZpZGVyID0gSW50bENvbnRleHQuUHJvdmlkZXI7XG5leHBvcnRzLkludGxDb250ZXh0UHJvdmlkZXIgPSBJbnRsQ29udGV4dFByb3ZpZGVyO1xudmFyIEludGxDb250ZXh0Q29uc3VtZXIgPSBJbnRsQ29udGV4dC5Db25zdW1lcjtcbmV4cG9ydHMuSW50bENvbnRleHRDb25zdW1lciA9IEludGxDb250ZXh0Q29uc3VtZXI7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJJbnRsQ29udGV4dENvbnN1bWVyIiwiSW50bENvbnRleHRQcm92aWRlciIsIl9yZWFjdCIsIkludGxDb250ZXh0IiwiZGVmYXVsdCIsImNyZWF0ZUNvbnRleHQiLCJQcm92aWRlciIsIkNvbnN1bWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8368\n")},7060:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"FormattedDate\": function() { return /* binding */ FormattedDate; },\n  \"FormattedDateParts\": function() { return /* binding */ FormattedDateParts; },\n  \"FormattedDisplayName\": function() { return /* binding */ FormattedDisplayName; },\n  \"FormattedHTMLMessage\": function() { return /* reexport */ html_message; },\n  \"FormattedList\": function() { return /* binding */ FormattedList; },\n  \"FormattedMessage\": function() { return /* reexport */ message; },\n  \"FormattedNumber\": function() { return /* binding */ FormattedNumber; },\n  \"FormattedNumberParts\": function() { return /* reexport */ FormattedNumberParts; },\n  \"FormattedPlural\": function() { return /* reexport */ plural; },\n  \"FormattedRelativeTime\": function() { return /* reexport */ relative; },\n  \"FormattedTime\": function() { return /* binding */ FormattedTime; },\n  \"FormattedTimeParts\": function() { return /* binding */ FormattedTimeParts; },\n  \"IntlContext\": function() { return /* reexport */ Context; },\n  \"IntlProvider\": function() { return /* reexport */ provider_IntlProvider; },\n  \"RawIntlProvider\": function() { return /* reexport */ Provider; },\n  \"createIntl\": function() { return /* reexport */ createIntl; },\n  \"createIntlCache\": function() { return /* reexport */ createIntlCache; },\n  \"defineMessages\": function() { return /* binding */ defineMessages; },\n  \"injectIntl\": function() { return /* reexport */ injectIntl; },\n  \"useIntl\": function() { return /* reexport */ useIntl; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\nvar react_namespaceObject = /*#__PURE__*/__webpack_require__.t(react, 2);\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/types.js\nvar TYPE;\n\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n})(TYPE || (TYPE = {}));\n/**\n * Type Guards\n */\n\n\nfunction isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n  return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nfunction isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === 0\n  /* number */\n  );\n}\nfunction isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === 1\n  /* dateTime */\n  );\n}\nfunction createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nfunction createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/parser.js\n// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\n\n\n\n\nvar SyntaxError =\n/** @class */\nfunction (_super) {\n  __extends(SyntaxError, _super);\n\n  function SyntaxError(message, expected, found, location) {\n    var _this = _super.call(this) || this;\n\n    _this.message = message;\n    _this.expected = expected;\n    _this.found = found;\n    _this.location = location;\n    _this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(_this, SyntaxError);\n    }\n\n    return _this;\n  }\n\n  SyntaxError.buildMessage = function (expected, found) {\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n\n        case \"class\":\n          var escapedParts = expectation.parts.map(function (part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n\n        case \"any\":\n          return \"any character\";\n\n        case \"end\":\n          return \"end of input\";\n\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1) {\n      var descriptions = expected1.map(describeExpectation);\n      var i;\n      var j;\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  return SyntaxError;\n}(Error);\n\n\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    start: peg$parsestart\n  };\n  var peg$startRuleFunction = peg$parsestart;\n\n  var peg$c0 = function peg$c0(parts) {\n    return parts.join('');\n  };\n\n  var peg$c1 = function peg$c1(messageText) {\n    return __assign({\n      type: TYPE.literal,\n      value: messageText\n    }, insertLocation());\n  };\n\n  var peg$c2 = \"#\";\n  var peg$c3 = peg$literalExpectation(\"#\", false);\n\n  var peg$c4 = function peg$c4() {\n    return __assign({\n      type: TYPE.pound\n    }, insertLocation());\n  };\n\n  var peg$c5 = peg$otherExpectation(\"argumentElement\");\n  var peg$c6 = \"{\";\n  var peg$c7 = peg$literalExpectation(\"{\", false);\n  var peg$c8 = \"}\";\n  var peg$c9 = peg$literalExpectation(\"}\", false);\n\n  var peg$c10 = function peg$c10(value) {\n    return __assign({\n      type: TYPE.argument,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c11 = peg$otherExpectation(\"numberSkeletonId\");\n  var peg$c12 = /^['\\/{}]/;\n  var peg$c13 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n  var peg$c14 = peg$anyExpectation();\n  var peg$c15 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n  var peg$c16 = \"/\";\n  var peg$c17 = peg$literalExpectation(\"/\", false);\n\n  var peg$c18 = function peg$c18(option) {\n    return option;\n  };\n\n  var peg$c19 = peg$otherExpectation(\"numberSkeletonToken\");\n\n  var peg$c20 = function peg$c20(stem, options) {\n    return {\n      stem: stem,\n      options: options\n    };\n  };\n\n  var peg$c21 = function peg$c21(tokens) {\n    return __assign({\n      type: 0\n      /* number */\n      ,\n      tokens: tokens\n    }, insertLocation());\n  };\n\n  var peg$c22 = \"::\";\n  var peg$c23 = peg$literalExpectation(\"::\", false);\n\n  var peg$c24 = function peg$c24(skeleton) {\n    return skeleton;\n  };\n\n  var peg$c25 = function peg$c25() {\n    messageCtx.push('numberArgStyle');\n    return true;\n  };\n\n  var peg$c26 = function peg$c26(style) {\n    messageCtx.pop();\n    return style.replace(/\\s*$/, '');\n  };\n\n  var peg$c27 = \",\";\n  var peg$c28 = peg$literalExpectation(\",\", false);\n  var peg$c29 = \"number\";\n  var peg$c30 = peg$literalExpectation(\"number\", false);\n\n  var peg$c31 = function peg$c31(value, type, style) {\n    return __assign({\n      type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time,\n      style: style && style[2],\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c32 = \"'\";\n  var peg$c33 = peg$literalExpectation(\"'\", false);\n  var peg$c34 = /^[^']/;\n  var peg$c35 = peg$classExpectation([\"'\"], true, false);\n  var peg$c36 = /^[^a-zA-Z'{}]/;\n  var peg$c37 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n  var peg$c38 = /^[a-zA-Z]/;\n  var peg$c39 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n\n  var peg$c40 = function peg$c40(pattern) {\n    return __assign({\n      type: 1\n      /* dateTime */\n      ,\n      pattern: pattern\n    }, insertLocation());\n  };\n\n  var peg$c41 = function peg$c41() {\n    messageCtx.push('dateOrTimeArgStyle');\n    return true;\n  };\n\n  var peg$c42 = \"date\";\n  var peg$c43 = peg$literalExpectation(\"date\", false);\n  var peg$c44 = \"time\";\n  var peg$c45 = peg$literalExpectation(\"time\", false);\n  var peg$c46 = \"plural\";\n  var peg$c47 = peg$literalExpectation(\"plural\", false);\n  var peg$c48 = \"selectordinal\";\n  var peg$c49 = peg$literalExpectation(\"selectordinal\", false);\n  var peg$c50 = \"offset:\";\n  var peg$c51 = peg$literalExpectation(\"offset:\", false);\n\n  var peg$c52 = function peg$c52(value, pluralType, offset, options) {\n    return __assign({\n      type: TYPE.plural,\n      pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal',\n      value: value,\n      offset: offset ? offset[2] : 0,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c53 = \"select\";\n  var peg$c54 = peg$literalExpectation(\"select\", false);\n\n  var peg$c55 = function peg$c55(value, options) {\n    return __assign({\n      type: TYPE.select,\n      value: value,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c56 = \"=\";\n  var peg$c57 = peg$literalExpectation(\"=\", false);\n\n  var peg$c58 = function peg$c58(id) {\n    messageCtx.push('select');\n    return true;\n  };\n\n  var peg$c59 = function peg$c59(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c60 = function peg$c60(id) {\n    messageCtx.push('plural');\n    return true;\n  };\n\n  var peg$c61 = function peg$c61(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c62 = peg$otherExpectation(\"whitespace\");\n  var peg$c63 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  var peg$c64 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n  var peg$c65 = peg$otherExpectation(\"syntax pattern\");\n  var peg$c66 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n  var peg$c67 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n  var peg$c68 = peg$otherExpectation(\"optional whitespace\");\n  var peg$c69 = peg$otherExpectation(\"number\");\n  var peg$c70 = \"-\";\n  var peg$c71 = peg$literalExpectation(\"-\", false);\n\n  var peg$c72 = function peg$c72(negative, num) {\n    return num ? negative ? -num : num : 0;\n  };\n\n  var peg$c73 = peg$otherExpectation(\"apostrophe\");\n  var peg$c74 = peg$otherExpectation(\"double apostrophes\");\n  var peg$c75 = \"''\";\n  var peg$c76 = peg$literalExpectation(\"''\", false);\n\n  var peg$c77 = function peg$c77() {\n    return \"'\";\n  };\n\n  var peg$c78 = function peg$c78(escapedChar, quotedChars) {\n    return escapedChar + quotedChars.replace(\"''\", \"'\");\n  };\n\n  var peg$c79 = function peg$c79(x) {\n    return x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}');\n  };\n\n  var peg$c80 = \"\\n\";\n  var peg$c81 = peg$literalExpectation(\"\\n\", false);\n\n  var peg$c82 = function peg$c82(x) {\n    return x === '{' || x === '}' || isInPluralOption() && x === '#';\n  };\n\n  var peg$c83 = peg$otherExpectation(\"argNameOrNumber\");\n  var peg$c84 = peg$otherExpectation(\"argNumber\");\n  var peg$c85 = \"0\";\n  var peg$c86 = peg$literalExpectation(\"0\", false);\n\n  var peg$c87 = function peg$c87() {\n    return 0;\n  };\n\n  var peg$c88 = /^[1-9]/;\n  var peg$c89 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$c90 = /^[0-9]/;\n  var peg$c91 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n\n  var peg$c92 = function peg$c92(digits) {\n    return parseInt(digits.join(''), 10);\n  };\n\n  var peg$c93 = peg$otherExpectation(\"argName\");\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n  }\n\n  function error(message, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text1,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message, location1) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1, found, location1) {\n    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n  }\n\n  function peg$parsestart() {\n    var s0;\n    s0 = peg$parsemessage();\n    return s0;\n  }\n\n  function peg$parsemessage() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsemessageElement();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsemessageElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageElement() {\n    var s0;\n    s0 = peg$parseliteralElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargumentElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesimpleFormatElement();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsepluralElement();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectElement();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsepoundElement();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageText() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedoubleApostrophes();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$parsequotedString();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseunquotedString();\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedoubleApostrophes();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsequotedString();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseunquotedString();\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteralElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsemessageText();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsepoundElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c2;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c3);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseargumentElement() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c8;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c9);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c10(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c5);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonId() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      if (peg$c12.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c13);\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c14);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          if (peg$c12.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c13);\n            }\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonTokenOption() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s1 = peg$c16;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c17);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c15);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonToken() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsenumberSkeletonTokenOption();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenumberSkeletonTokenOption();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c19);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeleton() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsenumberSkeletonToken();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsenumberSkeletonToken();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c21(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsenumberArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s1 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c24(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c25();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c29) {\n                  s7 = peg$c29;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsenumberArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c8;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c31(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonLiteral() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsedoubleApostrophes();\n\n      if (s3 === peg$FAILED) {\n        if (peg$c34.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsedoubleApostrophes();\n\n          if (s3 === peg$FAILED) {\n            if (peg$c34.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n              }\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c33);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      s1 = peg$parsedoubleApostrophes();\n\n      if (s1 === peg$FAILED) {\n        if (peg$c36.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c37);\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsedoubleApostrophes();\n\n          if (s1 === peg$FAILED) {\n            if (peg$c36.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c37);\n              }\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonPattern() {\n    var s0, s1;\n    s0 = [];\n\n    if (peg$c38.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (peg$c38.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c39);\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeleton() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$parsedateTimeSkeletonLiteral();\n\n    if (s3 === peg$FAILED) {\n      s3 = peg$parsedateTimeSkeletonPattern();\n    }\n\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsedateTimeSkeletonLiteral();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsedateTimeSkeletonPattern();\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c40(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsedateOrTimeArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s1 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedateTimeSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c24(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c41();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateOrTimeFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c42) {\n                  s7 = peg$c42;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c43);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c44) {\n                    s7 = peg$c44;\n                    peg$currPos += 4;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c45);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsedateOrTimeArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c8;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c31(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimpleFormatElement() {\n    var s0;\n    s0 = peg$parsenumberFormatElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedateOrTimeFormatElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c46) {\n                  s7 = peg$c46;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c47);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13) === peg$c48) {\n                    s7 = peg$c48;\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c49);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n\n                        if (input.substr(peg$currPos, 7) === peg$c50) {\n                          s12 = peg$c50;\n                          peg$currPos += 7;\n                        } else {\n                          s12 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c51);\n                          }\n                        }\n\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse_();\n\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsenumber();\n\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsepluralOption();\n\n                            if (s14 !== peg$FAILED) {\n                              while (s14 !== peg$FAILED) {\n                                s13.push(s14);\n                                s14 = peg$parsepluralOption();\n                              }\n                            } else {\n                              s13 = peg$FAILED;\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c8;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c9);\n                                  }\n                                }\n\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c52(s3, s7, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c53) {\n                  s7 = peg$c53;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c54);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseselectOption();\n\n                        if (s12 !== peg$FAILED) {\n                          while (s12 !== peg$FAILED) {\n                            s11.push(s12);\n                            s12 = peg$parseselectOption();\n                          }\n                        } else {\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s13 = peg$c8;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c9);\n                              }\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c55(s3, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralRuleSelectValue() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s2 = peg$c56;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c57);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsenumber();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargName();\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargName();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c6;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c58(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c9);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c59(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepluralRuleSelectValue();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c6;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c60(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c9);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c61(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c63.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c64);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c62);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepatternSyntax() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c66.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c67);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c65);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewhiteSpace();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewhiteSpace();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c68);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c70;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c71);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c69);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseapostrophe() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s0 = peg$c32;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c73);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedoubleApostrophes() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c75) {\n      s1 = peg$c75;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c76);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c77();\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c74);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotedString() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseescapedChar();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n\n        if (input.substr(peg$currPos, 2) === peg$c75) {\n          s5 = peg$c75;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c76);\n          }\n        }\n\n        if (s5 === peg$FAILED) {\n          if (peg$c34.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c35);\n            }\n          }\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n\n          if (input.substr(peg$currPos, 2) === peg$c75) {\n            s5 = peg$c75;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c76);\n            }\n          }\n\n          if (s5 === peg$FAILED) {\n            if (peg$c34.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n              }\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c32;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c33);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c78(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunquotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c14);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c79(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s1 = peg$c80;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c81);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseescapedChar() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c14);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c82(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNameOrNumber() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseargName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNumber() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c85;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c86);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c87();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c88.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c89);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (peg$c90.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c91);\n          }\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n\n          if (peg$c90.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c91);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1);\n      }\n\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      s4 = peg$parsepatternSyntax();\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c14);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          s4 = peg$parsepatternSyntax();\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c93);\n      }\n    }\n\n    return s0;\n  }\n\n  var messageCtx = ['root'];\n\n  function isNestedMessageText() {\n    return messageCtx.length > 1;\n  }\n\n  function isInPluralOption() {\n    return messageCtx[messageCtx.length - 1] === 'plural';\n  }\n\n  function insertLocation() {\n    return options && options.captureLocation ? {\n      location: location()\n    } : {};\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nvar pegParse = peg$parse;\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/normalize.js\nvar __spreadArrays = undefined && undefined.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\n\n\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\n\nfunction normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    } // Go down the options and search for # in any literal element\n\n\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n\n      var opt = el.options[id]; // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/index.js\n\n\n\n\n\nfunction parse(input, opts) {\n  var els = pegParse(input, opts);\n\n  if (!opts || opts.normalizeHashtagInPlural !== false) {\n    normalizeHashtagInPlural(els);\n  }\n\n  return els;\n}\n;// CONCATENATED MODULE: ./node_modules/intl-format-cache/lib/index.js\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar lib_spreadArrays = undefined && undefined.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}; // -- Utilities ----------------------------------------------------------------\n\n\nfunction getCacheId(inputs) {\n  return JSON.stringify(inputs.map(function (input) {\n    return input && typeof input === 'object' ? orderedProps(input) : input;\n  }));\n}\n\nfunction orderedProps(obj) {\n  return Object.keys(obj).sort().map(function (k) {\n    var _a;\n\n    return _a = {}, _a[k] = obj[k], _a;\n  });\n}\n\nvar memoizeFormatConstructor = function memoizeFormatConstructor(FormatConstructor, cache) {\n  if (cache === void 0) {\n    cache = {};\n  }\n\n  return function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var cacheId = getCacheId(args);\n    var format = cacheId && cache[cacheId];\n\n    if (!format) {\n      format = new ((_a = FormatConstructor).bind.apply(_a, lib_spreadArrays([void 0], args)))();\n\n      if (cacheId) {\n        cache[cacheId] = format;\n      }\n    }\n\n    return format;\n  };\n};\n\n/* harmony default export */ var lib = (memoizeFormatConstructor);\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/skeleton.js\nvar skeleton_assign = undefined && undefined.__assign || function () {\n  skeleton_assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return skeleton_assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\n\n\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\n\nfunction parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n\n      case 'E':\n        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n        break;\n\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n\n      case 'b': // am, pm, noon, midnight\n\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n      // Zone\n\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n      case 'O': // 1, 4: miliseconds in day short, long\n\n      case 'v': // 1, 4: generic non-location format\n\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n    }\n\n    return '';\n  });\n  return result;\n}\n\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\n\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\+|#+)?)?$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\n\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    } // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    } // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    } // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n\n    return '';\n  });\n  return result;\n}\n\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n\n    case 'sign-accounting':\n      return {\n        currencySign: 'accounting'\n      };\n\n    case 'sign-always':\n      return {\n        signDisplay: 'always'\n      };\n\n    case 'sign-accounting-always':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-except-zero':\n      return {\n        signDisplay: 'exceptZero'\n      };\n\n    case 'sign-accounting-except-zero':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-never':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\n\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n\n  if (signOpts) {\n    return signOpts;\n  }\n\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\n\n\nfunction convertNumberSkeletonToNumberFormatOptions(tokens) {\n  var result = {};\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    switch (token.stem) {\n      case 'percent':\n        result.style = 'percent';\n        continue;\n\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n\n      case 'group-off':\n        result.useGrouping = false;\n        continue;\n\n      case 'precision-integer':\n        result.maximumFractionDigits = 0;\n        continue;\n\n      case 'measure-unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n\n      case 'compact-short':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n\n      case 'compact-long':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n\n      case 'scientific':\n        result = skeleton_assign(skeleton_assign(skeleton_assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return skeleton_assign(skeleton_assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'engineering':\n        result = skeleton_assign(skeleton_assign(skeleton_assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return skeleton_assign(skeleton_assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n    } // Precision\n    // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n\n\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {\n        // precision-integer case\n        if (match === '.') {\n          result.maximumFractionDigits = 0;\n        } // .000+ case\n        else if (g2 === '+') {\n          result.minimumFractionDigits = g2.length;\n        } // .### case\n        else if (g1[0] === '#') {\n          result.maximumFractionDigits = g1.length;\n        } // .00## or .000 case\n        else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n\n        return '';\n      });\n\n      if (token.options.length) {\n        result = skeleton_assign(skeleton_assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n\n      continue;\n    }\n\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = skeleton_assign(skeleton_assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n\n    var signOpts = parseSign(token.stem);\n\n    if (signOpts) {\n      result = skeleton_assign(skeleton_assign({}, result), signOpts);\n    }\n  }\n\n  return result;\n}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/intl-messageformat/lib/formatters.js\nvar formatters_extends=undefined&&undefined.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var formatters_spreadArrays=undefined&&undefined.__spreadArrays||function(){for(var s=0,i=0,il=arguments.length;i<il;i++){s+=arguments[i].length;}for(var r=Array(s),k=0,i=0;i<il;i++){for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++){r[k]=a[j];}}return r;};var FormatError=/** @class */function(_super){formatters_extends(FormatError,_super);function FormatError(msg,variableId){var _this=_super.call(this,msg)||this;_this.variableId=variableId;return _this;}return FormatError;}(Error);function mergeLiteral(parts){if(parts.length<2){return parts;}return parts.reduce(function(all,part){var lastPart=all[all.length-1];if(!lastPart||lastPart.type!==0/* literal */||part.type!==0/* literal */){all.push(part);}else{lastPart.value+=part.value;}return all;},[]);}// TODO(skeleton): add skeleton support\nfunction formatToParts(els,locales,formatters,formats,values,currentPluralValue,// For debugging\noriginalMessage){// Hot path for straight simple msg translations\nif(els.length===1&&isLiteralElement(els[0])){return[{type:0/* literal */,value:els[0].value}];}var result=[];for(var _i=0,els_1=els;_i<els_1.length;_i++){var el=els_1[_i];// Exit early for string parts.\nif(isLiteralElement(el)){result.push({type:0/* literal */,value:el.value});continue;}// TODO: should this part be literal type?\n// Replace `#` in plural rules with the actual numeric value.\nif(isPoundElement(el)){if(typeof currentPluralValue==='number'){result.push({type:0/* literal */,value:formatters.getNumberFormat(locales).format(currentPluralValue)});}continue;}var varName=el.value;// Enforce that all required values are provided by the caller.\nif(!(values&&varName in values)){throw new FormatError(\"The intl string context variable \\\"\"+varName+\"\\\" was not provided to the string \\\"\"+originalMessage+\"\\\"\");}var value=values[varName];if(isArgumentElement(el)){if(!value||typeof value==='string'||typeof value==='number'){value=typeof value==='string'||typeof value==='number'?String(value):'';}result.push({type:1/* argument */,value:value});continue;}// Recursively format plural and select parts' option — which can be a\n// nested pattern structure. The choosing of the option to use is\n// abstracted-by and delegated-to the part helper object.\nif(isDateElement(el)){var style=typeof el.style==='string'?formats.date[el.style]:undefined;result.push({type:0/* literal */,value:formatters.getDateTimeFormat(locales,style).format(value)});continue;}if(isTimeElement(el)){var style=typeof el.style==='string'?formats.time[el.style]:isDateTimeSkeleton(el.style)?parseDateTimeSkeleton(el.style.pattern):undefined;result.push({type:0/* literal */,value:formatters.getDateTimeFormat(locales,style).format(value)});continue;}if(isNumberElement(el)){var style=typeof el.style==='string'?formats.number[el.style]:isNumberSkeleton(el.style)?convertNumberSkeletonToNumberFormatOptions(el.style.tokens):undefined;result.push({type:0/* literal */,value:formatters.getNumberFormat(locales,style).format(value)});continue;}if(isSelectElement(el)){var opt=el.options[value]||el.options.other;if(!opt){throw new RangeError(\"Invalid values for \\\"\"+el.value+\"\\\": \\\"\"+value+\"\\\". Options are \\\"\"+Object.keys(el.options).join('\", \"')+\"\\\"\");}result.push.apply(result,formatToParts(opt.value,locales,formatters,formats,values));continue;}if(isPluralElement(el)){var opt=el.options[\"=\"+value];if(!opt){if(!Intl.PluralRules){throw new FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\");}var rule=formatters.getPluralRules(locales,{type:el.pluralType}).select(value-(el.offset||0));opt=el.options[rule]||el.options.other;}if(!opt){throw new RangeError(\"Invalid values for \\\"\"+el.value+\"\\\": \\\"\"+value+\"\\\". Options are \\\"\"+Object.keys(el.options).join('\", \"')+\"\\\"\");}result.push.apply(result,formatToParts(opt.value,locales,formatters,formats,values,value-(el.offset||0)));continue;}}return mergeLiteral(result);}function formatToString(els,locales,formatters,formats,values,// For debugging\noriginalMessage){var parts=formatToParts(els,locales,formatters,formats,values,undefined,originalMessage);// Hot path for straight simple msg translations\nif(parts.length===1){return parts[0].value;}return parts.reduce(function(all,part){return all+=part.value;},'');}// Singleton\nvar domParser;var TOKEN_DELIMITER='@@';var TOKEN_REGEX=/@@(\\d+_\\d+)@@/g;var counter=0;function generateId(){return Date.now()+\"_\"+ ++counter;}function restoreRichPlaceholderMessage(text,objectParts){return text.split(TOKEN_REGEX).filter(Boolean).map(function(c){return objectParts[c]!=null?objectParts[c]:c;}).reduce(function(all,c){if(!all.length){all.push(c);}else if(typeof c==='string'&&typeof all[all.length-1]==='string'){all[all.length-1]+=c;}else{all.push(c);}return all;},[]);}/**\n * Not exhaustive, just for sanity check\n */var SIMPLE_XML_REGEX=/(<([0-9a-zA-Z-_]*?)>(.*?)<\\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\\/>)/;var TEMPLATE_ID=Date.now()+'@@';var VOID_ELEMENTS=['area','base','br','col','embed','hr','img','input','link','meta','param','source','track','wbr'];function formatHTMLElement(el,objectParts,values){var tagName=el.tagName;var outerHTML=el.outerHTML,textContent=el.textContent,childNodes=el.childNodes;// Regular text\nif(!tagName){return restoreRichPlaceholderMessage(textContent||'',objectParts);}tagName=tagName.toLowerCase();var isVoidElement=~VOID_ELEMENTS.indexOf(tagName);var formatFnOrValue=values[tagName];if(formatFnOrValue&&isVoidElement){throw new FormatError(tagName+\" is a self-closing tag and can not be used, please use another tag name.\");}if(!childNodes.length){return[outerHTML];}var chunks=Array.prototype.slice.call(childNodes).reduce(function(all,child){return all.concat(formatHTMLElement(child,objectParts,values));},[]);// Legacy HTML\nif(!formatFnOrValue){return formatters_spreadArrays([\"<\"+tagName+\">\"],chunks,[\"</\"+tagName+\">\"]);}// HTML Tag replacement\nif(typeof formatFnOrValue==='function'){return[formatFnOrValue.apply(void 0,chunks)];}return[formatFnOrValue];}function formatHTMLMessage(els,locales,formatters,formats,values,// For debugging\noriginalMessage){var parts=formatToParts(els,locales,formatters,formats,values,undefined,originalMessage);var objectParts={};var formattedMessage=parts.reduce(function(all,part){if(part.type===0/* literal */){return all+=part.value;}var id=generateId();objectParts[id]=part.value;return all+=\"\"+TOKEN_DELIMITER+id+TOKEN_DELIMITER;},'');// Not designed to filter out aggressively\nif(!SIMPLE_XML_REGEX.test(formattedMessage)){return restoreRichPlaceholderMessage(formattedMessage,objectParts);}if(!values){throw new FormatError('Message has placeholders but no values was given');}if(typeof DOMParser==='undefined'){throw new FormatError('Cannot format XML message without DOMParser');}if(!domParser){domParser=new DOMParser();}var content=domParser.parseFromString(\"<formatted-message id=\\\"\"+TEMPLATE_ID+\"\\\">\"+formattedMessage+\"</formatted-message>\",'text/html').getElementById(TEMPLATE_ID);if(!content){throw new FormatError(\"Malformed HTML message \"+formattedMessage);}var tagsToFormat=Object.keys(values).filter(function(varName){return!!content.getElementsByTagName(varName).length;});// No tags to format\nif(!tagsToFormat.length){return restoreRichPlaceholderMessage(formattedMessage,objectParts);}var caseSensitiveTags=tagsToFormat.filter(function(tagName){return tagName!==tagName.toLowerCase();});if(caseSensitiveTags.length){throw new FormatError(\"HTML tag must be lowercased but the following tags are not: \"+caseSensitiveTags.join(', '));}// We're doing this since top node is `<formatted-message/>` which does not have a formatter\nreturn Array.prototype.slice.call(content.childNodes).reduce(function(all,child){return all.concat(formatHTMLElement(child,objectParts,values));},[]);}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/intl-messageformat/lib/core.js\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/var core_assign=undefined&&undefined.__assign||function(){core_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return core_assign.apply(this,arguments);};// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1,c2){if(!c2){return c1;}return core_assign(core_assign(core_assign({},c1||{}),c2||{}),Object.keys(c1).reduce(function(all,k){all[k]=core_assign(core_assign({},c1[k]),c2[k]||{});return all;},{}));}function mergeConfigs(defaultConfig,configs){if(!configs){return defaultConfig;}return Object.keys(defaultConfig).reduce(function(all,k){all[k]=mergeConfig(defaultConfig[k],configs[k]);return all;},core_assign({},defaultConfig));}function createDefaultFormatters(cache){if(cache===void 0){cache={number:{},dateTime:{},pluralRules:{}};}return{getNumberFormat:lib(Intl.NumberFormat,cache.number),getDateTimeFormat:lib(Intl.DateTimeFormat,cache.dateTime),getPluralRules:lib(Intl.PluralRules,cache.pluralRules)};}var IntlMessageFormat=/** @class */function(){function IntlMessageFormat(message,locales,overrideFormats,opts){var _this=this;if(locales===void 0){locales=IntlMessageFormat.defaultLocale;}this.formatterCache={number:{},dateTime:{},pluralRules:{}};this.format=function(values){return formatToString(_this.ast,_this.locales,_this.formatters,_this.formats,values,_this.message);};this.formatToParts=function(values){return formatToParts(_this.ast,_this.locales,_this.formatters,_this.formats,values,undefined,_this.message);};this.formatHTMLMessage=function(values){return formatHTMLMessage(_this.ast,_this.locales,_this.formatters,_this.formats,values,_this.message);};this.resolvedOptions=function(){return{locale:Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]};};this.getAst=function(){return _this.ast;};if(typeof message==='string'){this.message=message;if(!IntlMessageFormat.__parse){throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');}// Parse string messages into an AST.\nthis.ast=IntlMessageFormat.__parse(message,{normalizeHashtagInPlural:false});}else{this.ast=message;}if(!Array.isArray(this.ast)){throw new TypeError('A message must be provided as a String or AST.');}// Creates a new object with the specified `formats` merged with the default\n// formats.\nthis.formats=mergeConfigs(IntlMessageFormat.formats,overrideFormats);// Defined first because it's used to build the format pattern.\nthis.locales=locales;this.formatters=opts&&opts.formatters||createDefaultFormatters(this.formatterCache);}IntlMessageFormat.defaultLocale=new Intl.NumberFormat().resolvedOptions().locale;IntlMessageFormat.__parse=parse;// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\nIntlMessageFormat.formats={number:{currency:{style:'currency'},percent:{style:'percent'}},date:{short:{month:'numeric',day:'numeric',year:'2-digit'},medium:{month:'short',day:'numeric',year:'numeric'},long:{month:'long',day:'numeric',year:'numeric'},full:{weekday:'long',month:'long',day:'numeric',year:'numeric'}},time:{short:{hour:'numeric',minute:'numeric'},medium:{hour:'numeric',minute:'numeric',second:'numeric'},long:{hour:'numeric',minute:'numeric',second:'numeric',timeZoneName:'short'},full:{hour:'numeric',minute:'numeric',second:'numeric',timeZoneName:'short'}}};return IntlMessageFormat;}();/* harmony default export */ var core = (IntlMessageFormat);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/intl-messageformat/lib/index.js\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*//* harmony default export */ var intl_messageformat_lib = (core);\n// EXTERNAL MODULE: ./node_modules/@formatjs/intl-utils/lib/invariant.js\nvar invariant = __webpack_require__(5981);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/utils.js\n/*\nHTML escaping is the same as React's\n(on purpose.) Therefore, it has the following Copyright and Licensing:\n\nCopyright 2013-2014, Facebook, Inc.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the LICENSE\nfile in the root directory of React's source tree.\n*/var ESCAPED_CHARS={38:'&amp;',62:'&gt;',60:'&lt;',34:'&quot;',39:'&#x27;'};var UNSAFE_CHARS_REGEX=/[&><\"']/g;function utils_escape(str){return(''+str).replace(UNSAFE_CHARS_REGEX,function(match){return ESCAPED_CHARS[match.charCodeAt(0)];});}function filterProps(props,whitelist,defaults){if(defaults===void 0){defaults={};}return whitelist.reduce(function(filtered,name){if(name in props){filtered[name]=props[name];}else if(name in defaults){filtered[name]=defaults[name];}return filtered;},{});}function invariantIntlContext(intl){(0,invariant/* invariant */.k)(intl,'[React Intl] Could not find required `intl` object. '+'<IntlProvider> needs to exist in the component ancestry.');}function createError(message,exception){var eMsg=exception?\"\\n\"+exception.stack:'';return\"[React Intl] \"+message+eMsg;}function defaultErrorHandler(error){if(false){}}var DEFAULT_INTL_CONFIG={formats:{},messages:{},timeZone:undefined,textComponent:react.Fragment,defaultLocale:'en',defaultFormats:{},onError:defaultErrorHandler};function createIntlCache(){return{dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}};}/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */function createFormatters(cache){if(cache===void 0){cache=createIntlCache();}var RelativeTimeFormat=Intl.RelativeTimeFormat;var ListFormat=Intl.ListFormat;var DisplayNames=Intl.DisplayNames;return{getDateTimeFormat:lib(Intl.DateTimeFormat,cache.dateTime),getNumberFormat:lib(Intl.NumberFormat,cache.number),getMessageFormat:lib(intl_messageformat_lib,cache.message),getRelativeTimeFormat:lib(RelativeTimeFormat,cache.relativeTime),getPluralRules:lib(Intl.PluralRules,cache.pluralRules),getListFormat:lib(ListFormat,cache.list),getDisplayNames:lib(DisplayNames,cache.displayNames)};}function getNamedFormat(formats,type,name,onError){var formatType=formats&&formats[type];var format;if(formatType){format=formatType[name];}if(format){return format;}onError(createError(\"No \"+type+\" format named: \"+name));}\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(5706);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/injectIntl.js\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nvar hoistNonReactStatics=(hoist_non_react_statics_cjs_default())||hoist_non_react_statics_cjs;function getDisplayName(Component){return Component.displayName||Component.name||'Component';}// TODO: We should provide initial value here\nvar IntlContext=/*#__PURE__*/react.createContext(null);var IntlConsumer=IntlContext.Consumer,IntlProvider=IntlContext.Provider;var Provider=IntlProvider;var Context=IntlContext;function injectIntl(WrappedComponent,options){var _ref=options||{},_ref$intlPropName=_ref.intlPropName,intlPropName=_ref$intlPropName===void 0?'intl':_ref$intlPropName,_ref$forwardRef=_ref.forwardRef,forwardRef=_ref$forwardRef===void 0?false:_ref$forwardRef,_ref$enforceContext=_ref.enforceContext,enforceContext=_ref$enforceContext===void 0?true:_ref$enforceContext;var WithIntl=function WithIntl(props){return/*#__PURE__*/react.createElement(IntlConsumer,null,function(intl){var _Object$assign;if(enforceContext){invariantIntlContext(intl);}return/*#__PURE__*/react.createElement(WrappedComponent,Object.assign({},props,(_Object$assign={},_Object$assign[intlPropName]=intl,_Object$assign),{ref:forwardRef?props.forwardedRef:null}));});};WithIntl.displayName=\"injectIntl(\"+getDisplayName(WrappedComponent)+\")\";WithIntl.WrappedComponent=WrappedComponent;if(forwardRef){return hoistNonReactStatics(/*#__PURE__*/react.forwardRef(function(props,ref){return/*#__PURE__*/react.createElement(WithIntl,Object.assign({},props,{forwardedRef:ref}));}),WrappedComponent);}return hoistNonReactStatics(WithIntl,WrappedComponent);}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/createFormattedComponent.js\nvar __rest=undefined&&undefined.__rest||function(s,e){var t={};for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];}if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};var DisplayName;(function(DisplayName){DisplayName[\"formatDate\"]=\"FormattedDate\";DisplayName[\"formatTime\"]=\"FormattedTime\";DisplayName[\"formatNumber\"]=\"FormattedNumber\";DisplayName[\"formatList\"]=\"FormattedList\";// Note that this DisplayName is the locale display name, not to be confused with\n// the name of the enum, which is for React component display name in dev tools.\nDisplayName[\"formatDisplayName\"]=\"FormattedDisplayName\";})(DisplayName||(DisplayName={}));var DisplayNameParts;(function(DisplayNameParts){DisplayNameParts[\"formatDate\"]=\"FormattedDateParts\";DisplayNameParts[\"formatTime\"]=\"FormattedTimeParts\";DisplayNameParts[\"formatNumber\"]=\"FormattedNumberParts\";DisplayNameParts[\"formatList\"]=\"FormattedListParts\";})(DisplayNameParts||(DisplayNameParts={}));var FormattedNumberParts=function FormattedNumberParts(props){return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){invariantIntlContext(intl);var value=props.value,children=props.children,formatProps=__rest(props,[\"value\",\"children\"]);return children(intl.formatNumberToParts(value,formatProps));});};FormattedNumberParts.displayName='FormattedNumberParts';function createFormattedDateTimePartsComponent(name){var ComponentParts=function ComponentParts(props){return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){invariantIntlContext(intl);var value=props.value,children=props.children,formatProps=__rest(props,[\"value\",\"children\"]);var date=typeof value==='string'?new Date(value||0):value;var formattedParts=name==='formatDate'?intl.formatDateToParts(date,formatProps):intl.formatTimeToParts(date,formatProps);return children(formattedParts);});};ComponentParts.displayName=DisplayNameParts[name];return ComponentParts;}function createFormattedComponent(name){var Component=function Component(props){return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){invariantIntlContext(intl);var value=props.value,children=props.children,formatProps=__rest(props,[\"value\",\"children\"]);// TODO: fix TS type definition for localeMatcher upstream\nvar formattedValue=intl[name](value,formatProps);if(typeof children==='function'){return children(formattedValue);}var Text=intl.textComponent||react.Fragment;return/*#__PURE__*/react.createElement(Text,null,formattedValue);});};Component.displayName=DisplayName[name];return Component;}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/useIntl.js\nfunction useIntl(){var intl=(0,react.useContext)(Context);invariantIntlContext(intl);return intl;}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/number.js\nvar NUMBER_FORMAT_OPTIONS=['localeMatcher','style','currency','currencyDisplay','unit','unitDisplay','useGrouping','minimumIntegerDigits','minimumFractionDigits','maximumFractionDigits','minimumSignificantDigits','maximumSignificantDigits',// Unified NumberFormat (Stage 3 as of 10/22/19)\n'compactDisplay','currencyDisplay','currencySign','notation','signDisplay','unit','unitDisplay'];function getFormatter(_ref,getNumberFormat,options){var locale=_ref.locale,formats=_ref.formats,onError=_ref.onError;if(options===void 0){options={};}var _options=options,format=_options.format;var defaults=format&&getNamedFormat(formats,'number',format,onError)||{};var filteredOptions=filterProps(options,NUMBER_FORMAT_OPTIONS,defaults);return getNumberFormat(locale,filteredOptions);}function formatNumber(config,getNumberFormat,value,options){if(options===void 0){options={};}try{return getFormatter(config,getNumberFormat,options).format(value);}catch(e){config.onError(createError('Error formatting number.',e));}return String(value);}function formatNumberToParts(config,getNumberFormat,value,options){if(options===void 0){options={};}try{return getFormatter(config,getNumberFormat,options).formatToParts(value);}catch(e){config.onError(createError('Error formatting number.',e));}return[];}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/relativeTime.js\nvar RELATIVE_TIME_FORMAT_OPTIONS=['numeric','style'];function relativeTime_getFormatter(_ref,getRelativeTimeFormat,options){var locale=_ref.locale,formats=_ref.formats,onError=_ref.onError;if(options===void 0){options={};}var _options=options,format=_options.format;var defaults=!!format&&getNamedFormat(formats,'relative',format,onError)||{};var filteredOptions=filterProps(options,RELATIVE_TIME_FORMAT_OPTIONS,defaults);return getRelativeTimeFormat(locale,filteredOptions);}function formatRelativeTime(config,getRelativeTimeFormat,value,unit,options){if(options===void 0){options={};}if(!unit){unit='second';}var RelativeTimeFormat=Intl.RelativeTimeFormat;if(!RelativeTimeFormat){config.onError(createError(\"Intl.RelativeTimeFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-relativetimeformat\\\"\\n\"));}try{return relativeTime_getFormatter(config,getRelativeTimeFormat,options).format(value,unit);}catch(e){config.onError(createError('Error formatting relative time.',e));}return String(value);}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/dateTime.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var DATE_TIME_FORMAT_OPTIONS=['localeMatcher','formatMatcher','timeZone','hour12','weekday','era','year','month','day','hour','minute','second','timeZoneName'];function dateTime_getFormatter(_ref,type,getDateTimeFormat,options){var locale=_ref.locale,formats=_ref.formats,onError=_ref.onError,timeZone=_ref.timeZone;if(options===void 0){options={};}var _options=options,format=_options.format;var defaults=Object.assign(Object.assign({},timeZone&&{timeZone:timeZone}),format&&getNamedFormat(formats,type,format,onError));var filteredOptions=filterProps(options,DATE_TIME_FORMAT_OPTIONS,defaults);if(type==='time'&&!filteredOptions.hour&&!filteredOptions.minute&&!filteredOptions.second){// Add default formatting options if hour, minute, or second isn't defined.\nfilteredOptions=Object.assign(Object.assign({},filteredOptions),{hour:'numeric',minute:'numeric'});}return getDateTimeFormat(locale,filteredOptions);}function formatDate(config,getDateTimeFormat,value,options){if(options===void 0){options={};}var date=typeof value==='string'?new Date(value||0):value;try{return dateTime_getFormatter(config,'date',getDateTimeFormat,options).format(date);}catch(e){config.onError(createError('Error formatting date.',e));}return String(date);}function formatTime(config,getDateTimeFormat,value,options){if(options===void 0){options={};}var date=typeof value==='string'?new Date(value||0):value;try{return dateTime_getFormatter(config,'time',getDateTimeFormat,options).format(date);}catch(e){config.onError(createError('Error formatting time.',e));}return String(date);}function formatDateToParts(config,getDateTimeFormat,value,options){if(options===void 0){options={};}var date=typeof value==='string'?new Date(value||0):value;try{return dateTime_getFormatter(config,'date',getDateTimeFormat,options).formatToParts(date);}catch(e){config.onError(createError('Error formatting date.',e));}return[];}function formatTimeToParts(config,getDateTimeFormat,value,options){if(options===void 0){options={};}var date=typeof value==='string'?new Date(value||0):value;try{return dateTime_getFormatter(config,'time',getDateTimeFormat,options).formatToParts(date);}catch(e){config.onError(createError('Error formatting time.',e));}return[];}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/plural.js\nvar PLURAL_FORMAT_OPTIONS=['localeMatcher','type'];function formatPlural(_ref,getPluralRules,value,options){var locale=_ref.locale,onError=_ref.onError;if(options===void 0){options={};}if(!Intl.PluralRules){onError(createError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\"));}var filteredOptions=filterProps(options,PLURAL_FORMAT_OPTIONS);try{return getPluralRules(locale,filteredOptions).select(value);}catch(e){onError(createError('Error formatting plural.',e));}return'other';}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(2982);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/message.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */function setTimeZoneInOptions(opts,timeZone){return Object.keys(opts).reduce(function(all,k){all[k]=Object.assign({timeZone:timeZone},opts[k]);return all;},{});}function deepMergeOptions(opts1,opts2){var keys=Object.keys(Object.assign(Object.assign({},opts1),opts2));return keys.reduce(function(all,k){all[k]=Object.assign(Object.assign({},opts1[k]||{}),opts2[k]||{});return all;},{});}function deepMergeFormatsAndSetTimeZone(f1,timeZone){if(!timeZone){return f1;}var mfFormats=intl_messageformat_lib.formats;return Object.assign(Object.assign(Object.assign({},mfFormats),f1),{date:deepMergeOptions(setTimeZoneInOptions(mfFormats.date,timeZone),setTimeZoneInOptions(f1.date||{},timeZone)),time:deepMergeOptions(setTimeZoneInOptions(mfFormats.time,timeZone),setTimeZoneInOptions(f1.time||{},timeZone))});}var prepareIntlMessageFormatHtmlOutput=function prepareIntlMessageFormatHtmlOutput(chunks){return react.createElement.apply(react_namespaceObject,[react.Fragment,null].concat((0,toConsumableArray/* default */.Z)(chunks)));};function formatMessage(_ref,state,messageDescriptor,values){var locale=_ref.locale,formats=_ref.formats,messages=_ref.messages,defaultLocale=_ref.defaultLocale,defaultFormats=_ref.defaultFormats,onError=_ref.onError,timeZone=_ref.timeZone;if(messageDescriptor===void 0){messageDescriptor={id:''};}if(values===void 0){values={};}var _messageDescriptor=messageDescriptor,id=_messageDescriptor.id,defaultMessage=_messageDescriptor.defaultMessage;// `id` is a required field of a Message Descriptor.\n(0,invariant/* invariant */.k)(!!id,'[React Intl] An `id` must be provided to format a message.');var message=messages&&messages[String(id)];formats=deepMergeFormatsAndSetTimeZone(formats,timeZone);defaultFormats=deepMergeFormatsAndSetTimeZone(defaultFormats,timeZone);var formattedMessageParts=[];if(message){try{var formatter=state.getMessageFormat(message,locale,formats,{formatters:state});formattedMessageParts=formatter.formatHTMLMessage(values);}catch(e){onError(createError(\"Error formatting message: \\\"\"+id+\"\\\" for locale: \\\"\"+locale+\"\\\"\"+(defaultMessage?', using default message as fallback.':''),e));}}else{// This prevents warnings from littering the console in development\n// when no `messages` are passed into the <IntlProvider> for the\n// default locale, and a default message is in the source.\nif(!defaultMessage||locale&&locale.toLowerCase()!==defaultLocale.toLowerCase()){onError(createError(\"Missing message: \\\"\"+id+\"\\\" for locale: \\\"\"+locale+\"\\\"\"+(defaultMessage?', using default message as fallback.':'')));}}if(!formattedMessageParts.length&&defaultMessage){try{var _formatter=state.getMessageFormat(defaultMessage,defaultLocale,defaultFormats);formattedMessageParts=_formatter.formatHTMLMessage(values);}catch(e){onError(createError(\"Error formatting the default message for: \\\"\"+id+\"\\\"\",e));}}if(!formattedMessageParts.length){onError(createError(\"Cannot format message: \\\"\"+id+\"\\\", \"+(\"using message \"+(message||defaultMessage?'source':'id')+\" as fallback.\")));if(typeof message==='string'){return message||defaultMessage||String(id);}return defaultMessage||String(id);}if(formattedMessageParts.length===1&&typeof formattedMessageParts[0]==='string'){return formattedMessageParts[0]||defaultMessage||String(id);}return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);}function message_formatHTMLMessage(config,state,messageDescriptor,rawValues){if(messageDescriptor===void 0){messageDescriptor={id:''};}if(rawValues===void 0){rawValues={};}// Process all the values before they are used when formatting the ICU\n// Message string. Since the formatted message might be injected via\n// `innerHTML`, all String-based values need to be HTML-escaped.\nvar escapedValues=Object.keys(rawValues).reduce(function(escaped,name){var value=rawValues[name];escaped[name]=typeof value==='string'?utils_escape(value):value;return escaped;},{});return formatMessage(config,state,messageDescriptor,escapedValues);}\n// EXTERNAL MODULE: ./node_modules/shallow-equal/objects/index.js\nvar objects = __webpack_require__(9108);\nvar objects_default = /*#__PURE__*/__webpack_require__.n(objects);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/list.js\nvar LIST_FORMAT_OPTIONS=['localeMatcher','type','style'];var now=Date.now();function generateToken(i){return now+\"_\"+i+\"_\"+now;}function formatList(_ref,getListFormat,values,options){var locale=_ref.locale,onError=_ref.onError;if(options===void 0){options={};}var ListFormat=Intl.ListFormat;if(!ListFormat){onError(createError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\"));}var filteredOptions=filterProps(options,LIST_FORMAT_OPTIONS);try{var richValues={};var serializedValues=values.map(function(v,i){if(typeof v==='object'){var id=generateToken(i);richValues[id]=v;return id;}return String(v);});if(!Object.keys(richValues).length){return getListFormat(locale,filteredOptions).format(serializedValues);}var parts=getListFormat(locale,filteredOptions).formatToParts(serializedValues);return parts.reduce(function(all,el){var val=el.value;if(richValues[val]){all.push(richValues[val]);}else if(typeof all[all.length-1]==='string'){all[all.length-1]+=val;}else{all.push(val);}return all;},[]);}catch(e){onError(createError('Error formatting list.',e));}return values;}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/formatters/displayName.js\nvar DISPLAY_NAMES_OPTONS=['localeMatcher','style','type','fallback'];function formatDisplayName(_ref,getDisplayNames,value,options){var locale=_ref.locale,onError=_ref.onError;if(options===void 0){options={};}var DisplayNames=Intl.DisplayNames;if(!DisplayNames){onError(createError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\"));}var filteredOptions=filterProps(options,DISPLAY_NAMES_OPTONS);try{return getDisplayNames(locale,filteredOptions).of(value);}catch(e){onError(createError('Error formatting display name.',e));}}\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/provider.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var shallowEquals=(objects_default())||objects;function processIntlConfig(config){return{locale:config.locale,timeZone:config.timeZone,formats:config.formats,textComponent:config.textComponent,messages:config.messages,defaultLocale:config.defaultLocale,defaultFormats:config.defaultFormats,onError:config.onError};}/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */function createIntl(config,cache){var formatters=createFormatters(cache);var resolvedConfig=Object.assign(Object.assign({},DEFAULT_INTL_CONFIG),config);var locale=resolvedConfig.locale,defaultLocale=resolvedConfig.defaultLocale,onError=resolvedConfig.onError;if(!locale){if(onError){onError(createError(\"\\\"locale\\\" was not configured, using \\\"\"+defaultLocale+\"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape for more details\"));}// Since there's no registered locale data for `locale`, this will\n// fallback to the `defaultLocale` to make sure things can render.\n// The `messages` are overridden to the `defaultProps` empty object\n// to maintain referential equality across re-renders. It's assumed\n// each <FormattedMessage> contains a `defaultMessage` prop.\nresolvedConfig.locale=resolvedConfig.defaultLocale||'en';}else if(!Intl.NumberFormat.supportedLocalesOf(locale).length&&onError){onError(createError(\"Missing locale data for locale: \\\"\"+locale+\"\\\" in Intl.NumberFormat. Using default locale: \\\"\"+defaultLocale+\"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details\"));}else if(!Intl.DateTimeFormat.supportedLocalesOf(locale).length&&onError){onError(createError(\"Missing locale data for locale: \\\"\"+locale+\"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\"+defaultLocale+\"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details\"));}return Object.assign(Object.assign({},resolvedConfig),{formatters:formatters,formatNumber:formatNumber.bind(null,resolvedConfig,formatters.getNumberFormat),formatNumberToParts:formatNumberToParts.bind(null,resolvedConfig,formatters.getNumberFormat),formatRelativeTime:formatRelativeTime.bind(null,resolvedConfig,formatters.getRelativeTimeFormat),formatDate:formatDate.bind(null,resolvedConfig,formatters.getDateTimeFormat),formatDateToParts:formatDateToParts.bind(null,resolvedConfig,formatters.getDateTimeFormat),formatTime:formatTime.bind(null,resolvedConfig,formatters.getDateTimeFormat),formatTimeToParts:formatTimeToParts.bind(null,resolvedConfig,formatters.getDateTimeFormat),formatPlural:formatPlural.bind(null,resolvedConfig,formatters.getPluralRules),formatMessage:formatMessage.bind(null,resolvedConfig,formatters),formatHTMLMessage:message_formatHTMLMessage.bind(null,resolvedConfig,formatters),formatList:formatList.bind(null,resolvedConfig,formatters.getListFormat),formatDisplayName:formatDisplayName.bind(null,resolvedConfig,formatters.getDisplayNames)});}var provider_IntlProvider=/*#__PURE__*/function(_React$PureComponent){(0,inheritsLoose/* default */.Z)(IntlProvider,_React$PureComponent);function IntlProvider(){var _this;_this=_React$PureComponent.apply(this,arguments)||this;_this.cache=createIntlCache();_this.state={cache:_this.cache,intl:createIntl(processIntlConfig(_this.props),_this.cache),prevConfig:processIntlConfig(_this.props)};return _this;}IntlProvider.getDerivedStateFromProps=function getDerivedStateFromProps(props,_ref){var prevConfig=_ref.prevConfig,cache=_ref.cache;var config=processIntlConfig(props);if(!shallowEquals(prevConfig,config)){return{intl:createIntl(config,cache),prevConfig:config};}return null;};var _proto=IntlProvider.prototype;_proto.render=function render(){invariantIntlContext(this.state.intl);return/*#__PURE__*/react.createElement(Provider,{value:this.state.intl},this.props.children);};return IntlProvider;}(react.PureComponent);provider_IntlProvider.displayName='IntlProvider';provider_IntlProvider.defaultProps=DEFAULT_INTL_CONFIG;\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/relative.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var MINUTE=60;var HOUR=60*60;var DAY=60*60*24;function selectUnit(seconds){var absValue=Math.abs(seconds);if(absValue<MINUTE){return'second';}if(absValue<HOUR){return'minute';}if(absValue<DAY){return'hour';}return'day';}function getDurationInSeconds(unit){switch(unit){case'second':return 1;case'minute':return MINUTE;case'hour':return HOUR;default:return DAY;}}function valueToSeconds(value,unit){if(!value){return 0;}switch(unit){case'second':return value;case'minute':return value*MINUTE;default:return value*HOUR;}}var INCREMENTABLE_UNITS=['second','minute','hour'];function canIncrement(unit){if(unit===void 0){unit='second';}return INCREMENTABLE_UNITS.includes(unit);}var FormattedRelativeTime=/*#__PURE__*/function(_React$PureComponent){(0,inheritsLoose/* default */.Z)(FormattedRelativeTime,_React$PureComponent);function FormattedRelativeTime(props){var _this;_this=_React$PureComponent.call(this,props)||this;// Public for testing\n_this._updateTimer=null;_this.state={prevUnit:_this.props.unit,prevValue:_this.props.value,currentValueInSeconds:canIncrement(_this.props.unit)?valueToSeconds(_this.props.value,_this.props.unit):0};(0,invariant/* invariant */.k)(!props.updateIntervalInSeconds||!!(props.updateIntervalInSeconds&&canIncrement(props.unit)),'Cannot schedule update with unit longer than hour');return _this;}var _proto=FormattedRelativeTime.prototype;_proto.scheduleNextUpdate=function scheduleNextUpdate(_ref,_ref2){var _this2=this;var updateIntervalInSeconds=_ref.updateIntervalInSeconds,unit=_ref.unit;var currentValueInSeconds=_ref2.currentValueInSeconds;clearTimeout(this._updateTimer);this._updateTimer=null;// If there's no interval and we cannot increment this unit, do nothing\nif(!updateIntervalInSeconds||!canIncrement(unit)){return;}// Figure out the next interesting time\nvar nextValueInSeconds=currentValueInSeconds-updateIntervalInSeconds;var nextUnit=selectUnit(nextValueInSeconds);// We've reached the max auto incrementable unit, don't schedule another update\nif(nextUnit==='day'){return;}var unitDuration=getDurationInSeconds(nextUnit);var remainder=nextValueInSeconds%unitDuration;var prevInterestingValueInSeconds=nextValueInSeconds-remainder;var nextInterestingValueInSeconds=prevInterestingValueInSeconds>=currentValueInSeconds?prevInterestingValueInSeconds-unitDuration:prevInterestingValueInSeconds;var delayInSeconds=Math.abs(nextInterestingValueInSeconds-currentValueInSeconds);this._updateTimer=setTimeout(function(){return _this2.setState({currentValueInSeconds:nextInterestingValueInSeconds});},delayInSeconds*1e3);};_proto.componentDidMount=function componentDidMount(){this.scheduleNextUpdate(this.props,this.state);};_proto.componentDidUpdate=function componentDidUpdate(){this.scheduleNextUpdate(this.props,this.state);};_proto.componentWillUnmount=function componentWillUnmount(){clearTimeout(this._updateTimer);this._updateTimer=null;};FormattedRelativeTime.getDerivedStateFromProps=function getDerivedStateFromProps(props,state){if(props.unit!==state.prevUnit||props.value!==state.prevValue){return{prevValue:props.value,prevUnit:props.unit,currentValueInSeconds:canIncrement(props.unit)?valueToSeconds(props.value,props.unit):0};}return null;};_proto.render=function render(){var _this3=this;return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){invariantIntlContext(intl);var formatRelativeTime=intl.formatRelativeTime,Text=intl.textComponent;var _this3$props=_this3.props,children=_this3$props.children,value=_this3$props.value,unit=_this3$props.unit,updateIntervalInSeconds=_this3$props.updateIntervalInSeconds;var currentValueInSeconds=_this3.state.currentValueInSeconds;var currentValue=value||0;var currentUnit=unit;if(canIncrement(unit)&&typeof currentValueInSeconds==='number'&&updateIntervalInSeconds){currentUnit=selectUnit(currentValueInSeconds);var unitDuration=getDurationInSeconds(currentUnit);currentValue=Math.round(currentValueInSeconds/unitDuration);}var formattedRelativeTime=formatRelativeTime(currentValue,currentUnit,Object.assign({},_this3.props));if(typeof children==='function'){return children(formattedRelativeTime);}if(Text){return/*#__PURE__*/react.createElement(Text,null,formattedRelativeTime);}return formattedRelativeTime;});};return FormattedRelativeTime;}(react.PureComponent);FormattedRelativeTime.displayName='FormattedRelativeTime';FormattedRelativeTime.defaultProps={value:0,unit:'second'};/* harmony default export */ var relative = (FormattedRelativeTime);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/plural.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var FormattedPlural=function FormattedPlural(props){var value=props.value,other=props.other,children=props.children,_props$intl=props.intl,formatPlural=_props$intl.formatPlural,Text=_props$intl.textComponent;var pluralCategory=formatPlural(value,props);var formattedPlural=props[pluralCategory]||other;if(typeof children==='function'){return children(formattedPlural);}if(Text){return/*#__PURE__*/react.createElement(Text,null,formattedPlural);}// Work around @types/react where React.FC cannot return string\nreturn formattedPlural;};FormattedPlural.defaultProps={type:'cardinal'};FormattedPlural.displayName='FormattedPlural';/* harmony default export */ var plural = (injectIntl(FormattedPlural));\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/message.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var message_rest=undefined&&undefined.__rest||function(s,e){var t={};for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];}if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};var message_shallowEquals=(objects_default())||objects;var defaultFormatMessage=function defaultFormatMessage(descriptor,values){if(false){}return formatMessage(Object.assign(Object.assign({},DEFAULT_INTL_CONFIG),{locale:'en'}),createFormatters(),descriptor,values);};var FormattedMessage=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(FormattedMessage,_React$Component);function FormattedMessage(){return _React$Component.apply(this,arguments)||this;}var _proto=FormattedMessage.prototype;_proto.shouldComponentUpdate=function shouldComponentUpdate(nextProps){var _a=this.props,values=_a.values,otherProps=message_rest(_a,[\"values\"]);var nextValues=nextProps.values,nextOtherProps=message_rest(nextProps,[\"values\"]);return!message_shallowEquals(nextValues,values)||!message_shallowEquals(otherProps,nextOtherProps);};_proto.render=function render(){var _this=this;return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){if(!_this.props.defaultMessage){invariantIntlContext(intl);}var _ref=intl||{},_ref$formatMessage=_ref.formatMessage,formatMessage=_ref$formatMessage===void 0?defaultFormatMessage:_ref$formatMessage,_ref$textComponent=_ref.textComponent,Text=_ref$textComponent===void 0?react.Fragment:_ref$textComponent;var _this$props=_this.props,id=_this$props.id,description=_this$props.description,defaultMessage=_this$props.defaultMessage,values=_this$props.values,children=_this$props.children,_this$props$tagName=_this$props.tagName,Component=_this$props$tagName===void 0?Text:_this$props$tagName;var descriptor={id:id,description:description,defaultMessage:defaultMessage};var nodes=formatMessage(descriptor,values);if(!Array.isArray(nodes)){nodes=[nodes];}if(typeof children==='function'){return children.apply(void 0,(0,toConsumableArray/* default */.Z)(nodes));}if(Component){// Needs to use `createElement()` instead of JSX, otherwise React will\n// warn about a missing `key` prop with rich-text message formatting.\nreturn react.createElement.apply(react_namespaceObject,[Component,null].concat((0,toConsumableArray/* default */.Z)(nodes)));}return nodes;});};return FormattedMessage;}(react.Component);FormattedMessage.displayName='FormattedMessage';FormattedMessage.defaultProps={values:{}};/* harmony default export */ var message = (FormattedMessage);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/components/html-message.js\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */var FormattedHTMLMessage=/*#__PURE__*/function(_FormattedMessage){(0,inheritsLoose/* default */.Z)(FormattedHTMLMessage,_FormattedMessage);function FormattedHTMLMessage(){return _FormattedMessage.apply(this,arguments)||this;}var _proto=FormattedHTMLMessage.prototype;_proto.render=function render(){var _this=this;return/*#__PURE__*/react.createElement(Context.Consumer,null,function(intl){if(!_this.props.defaultMessage){invariantIntlContext(intl);}var formatHTMLMessage=intl.formatHTMLMessage,textComponent=intl.textComponent;var _this$props=_this.props,id=_this$props.id,description=_this$props.description,defaultMessage=_this$props.defaultMessage,rawValues=_this$props.values,children=_this$props.children;var Component=_this.props.tagName;// This is bc of TS3.3 doesn't recognize `defaultProps`\nif(!Component){Component=textComponent||'span';}var descriptor={id:id,description:description,defaultMessage:defaultMessage};var formattedHTMLMessage=formatHTMLMessage(descriptor,rawValues);if(typeof children==='function'){return children(formattedHTMLMessage);}// Since the message presumably has HTML in it, we need to set\n// `innerHTML` in order for it to be rendered and not escaped by React.\n// To be safe, all string prop values were escaped when formatting the\n// message. It is assumed that the message is not UGC, and came from the\n// developer making it more like a template.\n//\n// Note: There's a perf impact of using this component since there's no\n// way for React to do its virtual DOM diffing.\nvar html={__html:formattedHTMLMessage};return/*#__PURE__*/react.createElement(Component,{dangerouslySetInnerHTML:html});});};return FormattedHTMLMessage;}(message);FormattedHTMLMessage.displayName='FormattedHTMLMessage';FormattedHTMLMessage.defaultProps=Object.assign(Object.assign({},message.defaultProps),{tagName:'span'});/* harmony default export */ var html_message = (FormattedHTMLMessage);\n;// CONCATENATED MODULE: ./node_modules/gatsby-plugin-intl/node_modules/react-intl/lib/index.js\nfunction defineMessages(msgs){return msgs;}// IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./types').CustomFormatConfig`\nvar FormattedDate=createFormattedComponent('formatDate');var FormattedTime=createFormattedComponent('formatTime');var FormattedNumber=createFormattedComponent('formatNumber');var FormattedList=createFormattedComponent('formatList');var FormattedDisplayName=createFormattedComponent('formatDisplayName');var FormattedDateParts=createFormattedDateTimePartsComponent('formatDate');var FormattedTimeParts=createFormattedDateTimePartsComponent('formatTime');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7060\n")},6604:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('var _interopRequireDefault=__webpack_require__(5318);exports.__esModule=true;exports["default"]=void 0;var _react=_interopRequireDefault(__webpack_require__(7294));var _browserLang=_interopRequireDefault(__webpack_require__(9771));var _gatsby=__webpack_require__(5444);var _reactIntl=__webpack_require__(7060);var _intlContext=__webpack_require__(8368);var preferDefault=function preferDefault(m){return m&&m.default||m;};var polyfillIntl=function polyfillIntl(language){var locale=language.split("-")[0];try{if(!Intl.PluralRules){__webpack_require__(3228);__webpack_require__(5024)("./"+locale);}if(!Intl.RelativeTimeFormat){__webpack_require__(5316);__webpack_require__(161)("./"+locale);}}catch(e){throw new Error("Cannot find react-intl/locale-data/"+language);}};var withIntlProvider=function withIntlProvider(intl){return function(children){polyfillIntl(intl.language);return _react.default.createElement(_reactIntl.IntlProvider,{locale:intl.language,defaultLocale:intl.defaultLanguage,messages:intl.messages},_react.default.createElement(_intlContext.IntlContextProvider,{value:intl},children));};};var _default=function _default(_ref,pluginOptions){var element=_ref.element,props=_ref.props;if(!props){return;}var pageContext=props.pageContext,location=props.location;var defaultLanguage=pluginOptions.defaultLanguage;var intl=pageContext.intl;var language=intl.language,languages=intl.languages,redirect=intl.redirect,routed=intl.routed,originalPath=intl.originalPath;if(typeof window!=="undefined"){window.___gatsbyIntl=intl;}/* eslint-disable no-undef */var isRedirect=redirect&&!routed;if(isRedirect){var search=location.search;// Skip build, Browsers only\nif(typeof window!=="undefined"){var detected=window.localStorage.getItem("gatsby-intl-language")||(0,_browserLang.default)({languages:languages,fallback:language});if(!languages.includes(detected)){detected=language;}var queryParams=search||"";var newUrl=(0,_gatsby.withPrefix)("/"+detected+originalPath+queryParams);window.localStorage.setItem("gatsby-intl-language",detected);window.location.replace(newUrl);}}var renderElement=isRedirect?null&&0:element;return withIntlProvider(intl)(renderElement);};exports["default"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6604\n')},9499:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "BaseContext": function() { return /* binding */ BaseContext; },\n  "Link": function() { return /* binding */ Link; },\n  "Location": function() { return /* binding */ Location; },\n  "LocationProvider": function() { return /* binding */ LocationProvider; },\n  "Match": function() { return /* binding */ Match; },\n  "Redirect": function() { return /* binding */ Redirect; },\n  "Router": function() { return /* binding */ Router; },\n  "ServerLocation": function() { return /* binding */ ServerLocation; },\n  "createHistory": function() { return /* reexport */ createHistory; },\n  "createMemorySource": function() { return /* reexport */ createMemorySource; },\n  "globalHistory": function() { return /* reexport */ globalHistory; },\n  "isRedirect": function() { return /* binding */ isRedirect; },\n  "matchPath": function() { return /* reexport */ match; },\n  "navigate": function() { return /* reexport */ history_navigate; },\n  "redirectTo": function() { return /* binding */ redirectTo; },\n  "useLocation": function() { return /* binding */ useLocation; },\n  "useMatch": function() { return /* binding */ useMatch; },\n  "useNavigate": function() { return /* binding */ useNavigate; },\n  "useParams": function() { return /* binding */ useParams; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/invariant/browser.js\nvar browser = __webpack_require__(1143);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n// EXTERNAL MODULE: ./.cache/react-lifecycles-compat.js\nvar react_lifecycles_compat = __webpack_require__(3639);\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/lib/utils.js\n ////////////////////////////////////////////////////////////////////////////////\n// startsWith(string, search) - Check if `string` starts with `search`\n\nvar startsWith = function startsWith(string, search) {\n  return string.substr(0, search.length) === search;\n}; ////////////////////////////////////////////////////////////////////////////////\n// pick(routes, uri)\n//\n// Ranks and picks the best route to match. Each segment gets the highest\n// amount of points, then the type of segment gets an additional amount of\n// points where\n//\n//     static > dynamic > splat > root\n//\n// This way we don\'t have to worry about the order of our routes, let the\n// computers do it.\n//\n// A route looks like this\n//\n//     { path, default, value }\n//\n// And a returned match looks like:\n//\n//     { route, params, uri }\n//\n// I know, I should use TypeScript not comments for these types.\n\n\nvar pick = function pick(routes, uri) {\n  var match = void 0;\n  var default_ = void 0;\n\n  var _uri$split = uri.split("?"),\n      uriPathname = _uri$split[0];\n\n  var uriSegments = segmentize(uriPathname);\n  var isRootUri = uriSegments[0] === "";\n  var ranked = rankRoutes(routes);\n\n  for (var i = 0, l = ranked.length; i < l; i++) {\n    var missed = false;\n    var route = ranked[i].route;\n\n    if (route.default) {\n      default_ = {\n        route: route,\n        params: {},\n        uri: uri\n      };\n      continue;\n    }\n\n    var routeSegments = segmentize(route.path);\n    var params = {};\n    var max = Math.max(uriSegments.length, routeSegments.length);\n    var index = 0;\n\n    for (; index < max; index++) {\n      var routeSegment = routeSegments[index];\n      var uriSegment = uriSegments[index];\n\n      if (isSplat(routeSegment)) {\n        // Hit a splat, just grab the rest, and return a match\n        // uri:   /files/documents/work\n        // route: /files/*\n        var param = routeSegment.slice(1) || "*";\n        params[param] = uriSegments.slice(index).map(decodeURIComponent).join("/");\n        break;\n      }\n\n      if (uriSegment === undefined) {\n        // URI is shorter than the route, no match\n        // uri:   /users\n        // route: /users/:userId\n        missed = true;\n        break;\n      }\n\n      var dynamicMatch = paramRe.exec(routeSegment);\n\n      if (dynamicMatch && !isRootUri) {\n        var matchIsNotReserved = reservedNames.indexOf(dynamicMatch[1]) === -1;\n        !matchIsNotReserved ?  false ? 0 : browser_default()(false) : void 0;\n        var value = decodeURIComponent(uriSegment);\n        params[dynamicMatch[1]] = value;\n      } else if (routeSegment !== uriSegment) {\n        // Current segments don\'t match, not dynamic, not splat, so no match\n        // uri:   /users/123/settings\n        // route: /users/:id/profile\n        missed = true;\n        break;\n      }\n    }\n\n    if (!missed) {\n      match = {\n        route: route,\n        params: params,\n        uri: "/" + uriSegments.slice(0, index).join("/")\n      };\n      break;\n    }\n  }\n\n  return match || default_ || null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// match(path, uri) - Matches just one path to a uri, also lol\n\n\nvar match = function match(path, uri) {\n  return pick([{\n    path: path\n  }], uri);\n}; ////////////////////////////////////////////////////////////////////////////////\n// resolve(to, basepath)\n//\n// Resolves URIs as though every path is a directory, no files.  Relative URIs\n// in the browser can feel awkward because not only can you be "in a directory"\n// you can be "at a file", too. For example\n//\n//     browserSpecResolve(\'foo\', \'/bar/\') => /bar/foo\n//     browserSpecResolve(\'foo\', \'/bar\') => /foo\n//\n// But on the command line of a file system, it\'s not as complicated, you can\'t\n// `cd` from a file, only directories.  This way, links have to know less about\n// their current path. To go deeper you can do this:\n//\n//     <Link to="deeper"/>\n//     // instead of\n//     <Link to=`{${props.uri}/deeper}`/>\n//\n// Just like `cd`, if you want to go deeper from the command line, you do this:\n//\n//     cd deeper\n//     # not\n//     cd $(pwd)/deeper\n//\n// By treating every path as a directory, linking to relative paths should\n// require less contextual information and (fingers crossed) be more intuitive.\n\n\nvar resolve = function resolve(to, base) {\n  // /foo/bar, /baz/qux => /foo/bar\n  if (startsWith(to, "/")) {\n    return to;\n  }\n\n  var _to$split = to.split("?"),\n      toPathname = _to$split[0],\n      toQuery = _to$split[1];\n\n  var _base$split = base.split("?"),\n      basePathname = _base$split[0];\n\n  var toSegments = segmentize(toPathname);\n  var baseSegments = segmentize(basePathname); // ?a=b, /users?b=c => /users?a=b\n\n  if (toSegments[0] === "") {\n    return addQuery(basePathname, toQuery);\n  } // profile, /users/789 => /users/789/profile\n\n\n  if (!startsWith(toSegments[0], ".")) {\n    var pathname = baseSegments.concat(toSegments).join("/");\n    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);\n  } // ./         /users/123  =>  /users/123\n  // ../        /users/123  =>  /users\n  // ../..      /users/123  =>  /\n  // ../../one  /a/b/c/d    =>  /a/b/one\n  // .././one   /a/b/c/d    =>  /a/b/c/one\n\n\n  var allSegments = baseSegments.concat(toSegments);\n  var segments = [];\n\n  for (var i = 0, l = allSegments.length; i < l; i++) {\n    var segment = allSegments[i];\n    if (segment === "..") segments.pop();else if (segment !== ".") segments.push(segment);\n  }\n\n  return addQuery("/" + segments.join("/"), toQuery);\n}; ////////////////////////////////////////////////////////////////////////////////\n// insertParams(path, params)\n\n\nvar insertParams = function insertParams(path, params) {\n  var _path$split = path.split("?"),\n      pathBase = _path$split[0],\n      _path$split$ = _path$split[1],\n      query = _path$split$ === undefined ? "" : _path$split$;\n\n  var segments = segmentize(pathBase);\n  var constructedPath = "/" + segments.map(function (segment) {\n    var match = paramRe.exec(segment);\n    return match ? params[match[1]] : segment;\n  }).join("/");\n  var _params$location = params.location;\n  _params$location = _params$location === undefined ? {} : _params$location;\n  var _params$location$sear = _params$location.search,\n      search = _params$location$sear === undefined ? "" : _params$location$sear;\n  var searchSplit = search.split("?")[1] || "";\n  constructedPath = addQuery(constructedPath, query, searchSplit);\n  return constructedPath;\n};\n\nvar validateRedirect = function validateRedirect(from, to) {\n  var filter = function filter(segment) {\n    return isDynamic(segment);\n  };\n\n  var fromString = segmentize(from).filter(filter).sort().join("/");\n  var toString = segmentize(to).filter(filter).sort().join("/");\n  return fromString === toString;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar paramRe = /^:(.+)/;\nvar SEGMENT_POINTS = 4;\nvar STATIC_POINTS = 3;\nvar DYNAMIC_POINTS = 2;\nvar SPLAT_PENALTY = 1;\nvar ROOT_POINTS = 1;\n\nvar isRootSegment = function isRootSegment(segment) {\n  return segment === "";\n};\n\nvar isDynamic = function isDynamic(segment) {\n  return paramRe.test(segment);\n};\n\nvar isSplat = function isSplat(segment) {\n  return segment && segment[0] === "*";\n};\n\nvar rankRoute = function rankRoute(route, index) {\n  var score = route.default ? 0 : segmentize(route.path).reduce(function (score, segment) {\n    score += SEGMENT_POINTS;\n    if (isRootSegment(segment)) score += ROOT_POINTS;else if (isDynamic(segment)) score += DYNAMIC_POINTS;else if (isSplat(segment)) score -= SEGMENT_POINTS + SPLAT_PENALTY;else score += STATIC_POINTS;\n    return score;\n  }, 0);\n  return {\n    route: route,\n    score: score,\n    index: index\n  };\n};\n\nvar rankRoutes = function rankRoutes(routes) {\n  return routes.map(rankRoute).sort(function (a, b) {\n    return a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index;\n  });\n};\n\nvar segmentize = function segmentize(uri) {\n  return uri // strip starting/ending slashes\n  .replace(/(^\\/+|\\/+$)/g, "").split("/");\n};\n\nvar addQuery = function addQuery(pathname) {\n  for (var _len = arguments.length, query = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    query[_key - 1] = arguments[_key];\n  }\n\n  query = query.filter(function (q) {\n    return q && q.length > 0;\n  });\n  return pathname + (query && query.length > 0 ? "?" + query.join("&") : "");\n};\n\nvar reservedNames = ["uri", "path"];\n/**\n * Shallow compares two objects.\n * @param {Object} obj1 The first object to compare.\n * @param {Object} obj2 The second object to compare.\n */\n\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  var obj1Keys = Object.keys(obj1);\n  return obj1Keys.length === Object.keys(obj2).length && obj1Keys.every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/lib/history.js\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar getLocation = function getLocation(source) {\n  var _source$location = source.location,\n      search = _source$location.search,\n      hash = _source$location.hash,\n      href = _source$location.href,\n      origin = _source$location.origin,\n      protocol = _source$location.protocol,\n      host = _source$location.host,\n      hostname = _source$location.hostname,\n      port = _source$location.port;\n  var pathname = source.location.pathname;\n\n  if (!pathname && href && canUseDOM) {\n    var url = new URL(href);\n    pathname = url.pathname;\n  }\n\n  return {\n    pathname: encodeURI(decodeURI(pathname)),\n    search: search,\n    hash: hash,\n    href: href,\n    origin: origin,\n    protocol: protocol,\n    host: host,\n    hostname: hostname,\n    port: port,\n    state: source.history.state,\n    key: source.history.state && source.history.state.key || "initial"\n  };\n};\n\nvar createHistory = function createHistory(source, options) {\n  var listeners = [];\n  var location = getLocation(source);\n  var transitioning = false;\n\n  var resolveTransition = function resolveTransition() {};\n\n  return {\n    get location() {\n      return location;\n    },\n\n    get transitioning() {\n      return transitioning;\n    },\n\n    _onTransitionComplete: function _onTransitionComplete() {\n      transitioning = false;\n      resolveTransition();\n    },\n    listen: function listen(listener) {\n      listeners.push(listener);\n\n      var popstateListener = function popstateListener() {\n        location = getLocation(source);\n        listener({\n          location: location,\n          action: "POP"\n        });\n      };\n\n      source.addEventListener("popstate", popstateListener);\n      return function () {\n        source.removeEventListener("popstate", popstateListener);\n        listeners = listeners.filter(function (fn) {\n          return fn !== listener;\n        });\n      };\n    },\n    navigate: function navigate(to) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          state = _ref.state,\n          _ref$replace = _ref.replace,\n          replace = _ref$replace === undefined ? false : _ref$replace;\n\n      if (typeof to === "number") {\n        source.history.go(to);\n      } else {\n        state = _extends({}, state, {\n          key: Date.now() + ""\n        }); // try...catch iOS Safari limits to 100 pushState calls\n\n        try {\n          if (transitioning || replace) {\n            source.history.replaceState(state, null, to);\n          } else {\n            source.history.pushState(state, null, to);\n          }\n        } catch (e) {\n          source.location[replace ? "replace" : "assign"](to);\n        }\n      }\n\n      location = getLocation(source);\n      transitioning = true;\n      var transition = new Promise(function (res) {\n        return resolveTransition = res;\n      });\n      listeners.forEach(function (listener) {\n        return listener({\n          location: location,\n          action: "PUSH"\n        });\n      });\n      return transition;\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// Stores history entries in memory for testing or other platforms like Native\n\n\nvar createMemorySource = function createMemorySource() {\n  var initialPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";\n  var searchIndex = initialPath.indexOf("?");\n  var initialLocation = {\n    pathname: searchIndex > -1 ? initialPath.substr(0, searchIndex) : initialPath,\n    search: searchIndex > -1 ? initialPath.substr(searchIndex) : ""\n  };\n  var index = 0;\n  var stack = [initialLocation];\n  var states = [null];\n  return {\n    get location() {\n      return stack[index];\n    },\n\n    addEventListener: function addEventListener(name, fn) {},\n    removeEventListener: function removeEventListener(name, fn) {},\n    history: {\n      get entries() {\n        return stack;\n      },\n\n      get index() {\n        return index;\n      },\n\n      get state() {\n        return states[index];\n      },\n\n      pushState: function pushState(state, _, uri) {\n        var _uri$split = uri.split("?"),\n            pathname = _uri$split[0],\n            _uri$split$ = _uri$split[1],\n            search = _uri$split$ === undefined ? "" : _uri$split$;\n\n        index++;\n        stack.push({\n          pathname: pathname,\n          search: search.length ? "?" + search : search\n        });\n        states.push(state);\n      },\n      replaceState: function replaceState(state, _, uri) {\n        var _uri$split2 = uri.split("?"),\n            pathname = _uri$split2[0],\n            _uri$split2$ = _uri$split2[1],\n            search = _uri$split2$ === undefined ? "" : _uri$split2$;\n\n        stack[index] = {\n          pathname: pathname,\n          search: search\n        };\n        states[index] = state;\n      },\n      go: function go(to) {\n        var newIndex = index + to;\n\n        if (newIndex < 0 || newIndex > states.length - 1) {\n          return;\n        }\n\n        index = newIndex;\n      }\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// global history - uses window.history as the source if available, otherwise a\n// memory history\n\n\nvar canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);\n\nvar getSource = function getSource() {\n  return canUseDOM ? window : createMemorySource();\n};\n\nvar globalHistory = createHistory(getSource());\nvar history_navigate = globalHistory.navigate; ////////////////////////////////////////////////////////////////////////////////\n\n\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/index.js\nvar es_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable jsx-a11y/anchor-has-content */\n\n\n\n\n\n\n ////////////////////////////////////////////////////////////////////////////////\n\nvar createNamedContext = function createNamedContext(name, defaultValue) {\n  var Ctx = (0,react.createContext)(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Location Context/Provider\n\n\nvar LocationContext = createNamedContext("Location"); // sets up a listener if there isn\'t one already so apps don\'t need to be\n// wrapped in some top level provider\n\nvar Location = function Location(_ref) {\n  var children = _ref.children;\n  return react.createElement(LocationContext.Consumer, null, function (context) {\n    return context ? children(context) : react.createElement(LocationProvider, null, children);\n  });\n};\n\nvar LocationProvider = function (_React$Component) {\n  _inherits(LocationProvider, _React$Component);\n\n  function LocationProvider() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, LocationProvider);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      context: _this.getContext(),\n      refs: {\n        unlisten: null\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  LocationProvider.prototype.getContext = function getContext() {\n    var _props$history = this.props.history,\n        navigate = _props$history.navigate,\n        location = _props$history.location;\n    return {\n      navigate: navigate,\n      location: location\n    };\n  };\n\n  LocationProvider.prototype.componentDidCatch = function componentDidCatch(error, info) {\n    if (isRedirect(error)) {\n      var _navigate = this.props.history.navigate;\n\n      _navigate(error.uri, {\n        replace: true\n      });\n    } else {\n      throw error;\n    }\n  };\n\n  LocationProvider.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevState.context.location !== this.state.context.location) {\n      this.props.history._onTransitionComplete();\n    }\n  };\n\n  LocationProvider.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var refs = this.state.refs,\n        history = this.props.history;\n\n    history._onTransitionComplete();\n\n    refs.unlisten = history.listen(function () {\n      Promise.resolve().then(function () {\n        // TODO: replace rAF with react deferred update API when it\'s ready https://github.com/facebook/react/issues/13306\n        requestAnimationFrame(function () {\n          if (!_this2.unmounted) {\n            _this2.setState(function () {\n              return {\n                context: _this2.getContext()\n              };\n            });\n          }\n        });\n      });\n    });\n  };\n\n  LocationProvider.prototype.componentWillUnmount = function componentWillUnmount() {\n    var refs = this.state.refs;\n    this.unmounted = true;\n    refs.unlisten();\n  };\n\n  LocationProvider.prototype.render = function render() {\n    var context = this.state.context,\n        children = this.props.children;\n    return react.createElement(LocationContext.Provider, {\n      value: context\n    }, typeof children === "function" ? children(context) : children || null);\n  };\n\n  return LocationProvider;\n}(react.Component); ////////////////////////////////////////////////////////////////////////////////\n\n\nLocationProvider.defaultProps = {\n  history: globalHistory\n};\n false ? 0 : void 0;\n\nvar ServerLocation = function ServerLocation(_ref2) {\n  var url = _ref2.url,\n      children = _ref2.children;\n  var searchIndex = url.indexOf("?");\n  var searchExists = searchIndex > -1;\n  var pathname = void 0;\n  var search = "";\n  var hash = "";\n\n  if (searchExists) {\n    pathname = url.substring(0, searchIndex);\n    search = url.substring(searchIndex);\n  } else {\n    pathname = url;\n  }\n\n  return react.createElement(LocationContext.Provider, {\n    value: {\n      location: {\n        pathname: pathname,\n        search: search,\n        hash: hash\n      },\n      navigate: function navigate() {\n        throw new Error("You can\'t call navigate on the server.");\n      }\n    }\n  }, children);\n}; ////////////////////////////////////////////////////////////////////////////////\n// Sets baseuri and basepath for nested routers and links\n\n\nvar BaseContext = createNamedContext("Base", {\n  baseuri: "/",\n  basepath: "/",\n  navigate: globalHistory.navigate\n}); ////////////////////////////////////////////////////////////////////////////////\n// The main event, welcome to the show everybody.\n\nvar Router = function Router(props) {\n  return react.createElement(BaseContext.Consumer, null, function (baseContext) {\n    return react.createElement(Location, null, function (locationContext) {\n      return react.createElement(RouterImpl, es_extends({}, baseContext, locationContext, props));\n    });\n  });\n};\n\nvar RouterImpl = function (_React$PureComponent) {\n  _inherits(RouterImpl, _React$PureComponent);\n\n  function RouterImpl() {\n    _classCallCheck(this, RouterImpl);\n\n    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  RouterImpl.prototype.render = function render() {\n    var _props = this.props,\n        location = _props.location,\n        _navigate2 = _props.navigate,\n        basepath = _props.basepath,\n        primary = _props.primary,\n        children = _props.children,\n        baseuri = _props.baseuri,\n        _props$component = _props.component,\n        component = _props$component === undefined ? "div" : _props$component,\n        domProps = _objectWithoutProperties(_props, ["location", "navigate", "basepath", "primary", "children", "baseuri", "component"]);\n\n    var routes = react.Children.toArray(children).reduce(function (array, child) {\n      var routes = createRoute(basepath)(child);\n      return array.concat(routes);\n    }, []);\n    var pathname = location.pathname;\n    var match = pick(routes, pathname);\n\n    if (match) {\n      var params = match.params,\n          uri = match.uri,\n          route = match.route,\n          element = match.route.value; // remove the /* from the end for child routes relative paths\n\n      basepath = route.default ? basepath : route.path.replace(/\\*$/, "");\n\n      var props = es_extends({}, params, {\n        uri: uri,\n        location: location,\n        navigate: function navigate(to, options) {\n          return _navigate2(resolve(to, uri), options);\n        }\n      });\n\n      var clone = react.cloneElement(element, props, element.props.children ? react.createElement(Router, {\n        location: location,\n        primary: primary\n      }, element.props.children) : undefined); // using \'div\' for < 16.3 support\n\n      var FocusWrapper = primary ? FocusHandler : component; // don\'t pass any props to \'div\'\n\n      var wrapperProps = primary ? es_extends({\n        uri: uri,\n        location: location,\n        component: component\n      }, domProps) : domProps;\n      return react.createElement(BaseContext.Provider, {\n        value: {\n          baseuri: uri,\n          basepath: basepath,\n          navigate: props.navigate\n        }\n      }, react.createElement(FocusWrapper, wrapperProps, clone));\n    } else {\n      // Not sure if we want this, would require index routes at every level\n      // warning(\n      //   false,\n      //   `<Router basepath="${basepath}">\\n\\nNothing matched:\\n\\t${\n      //     location.pathname\n      //   }\\n\\nPaths checked: \\n\\t${routes\n      //     .map(route => route.path)\n      //     .join(\n      //       "\\n\\t"\n      //     )}\\n\\nTo get rid of this warning, add a default NotFound component as child of Router:\n      //   \\n\\tlet NotFound = () => <div>Not Found!</div>\n      //   \\n\\t<Router>\\n\\t  <NotFound default/>\\n\\t  {/* ... */}\\n\\t</Router>`\n      // );\n      return null;\n    }\n  };\n\n  return RouterImpl;\n}(react.PureComponent);\n\nRouterImpl.defaultProps = {\n  primary: true\n};\nvar FocusContext = createNamedContext("Focus");\n\nvar FocusHandler = function FocusHandler(_ref3) {\n  var uri = _ref3.uri,\n      location = _ref3.location,\n      component = _ref3.component,\n      domProps = _objectWithoutProperties(_ref3, ["uri", "location", "component"]);\n\n  return react.createElement(FocusContext.Consumer, null, function (requestFocus) {\n    return react.createElement(FocusHandlerImpl, es_extends({}, domProps, {\n      component: component,\n      requestFocus: requestFocus,\n      uri: uri,\n      location: location\n    }));\n  });\n}; // don\'t focus on initial render\n\n\nvar initialRender = true;\nvar focusHandlerCount = 0;\n\nvar FocusHandlerImpl = function (_React$Component2) {\n  _inherits(FocusHandlerImpl, _React$Component2);\n\n  function FocusHandlerImpl() {\n    var _temp2, _this4, _ret2;\n\n    _classCallCheck(this, FocusHandlerImpl);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this4 = _possibleConstructorReturn(this, _React$Component2.call.apply(_React$Component2, [this].concat(args))), _this4), _this4.state = {}, _this4.requestFocus = function (node) {\n      if (!_this4.state.shouldFocus && node) {\n        node.focus();\n      }\n    }, _temp2), _possibleConstructorReturn(_this4, _ret2);\n  }\n\n  FocusHandlerImpl.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var initial = prevState.uri == null;\n\n    if (initial) {\n      return es_extends({\n        shouldFocus: true\n      }, nextProps);\n    } else {\n      var myURIChanged = nextProps.uri !== prevState.uri;\n      var navigatedUpToMe = prevState.location.pathname !== nextProps.location.pathname && nextProps.location.pathname === nextProps.uri;\n      return es_extends({\n        shouldFocus: myURIChanged || navigatedUpToMe\n      }, nextProps);\n    }\n  };\n\n  FocusHandlerImpl.prototype.componentDidMount = function componentDidMount() {\n    focusHandlerCount++;\n    this.focus();\n  };\n\n  FocusHandlerImpl.prototype.componentWillUnmount = function componentWillUnmount() {\n    focusHandlerCount--;\n\n    if (focusHandlerCount === 0) {\n      initialRender = true;\n    }\n  };\n\n  FocusHandlerImpl.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevProps.location !== this.props.location && this.state.shouldFocus) {\n      this.focus();\n    }\n  };\n\n  FocusHandlerImpl.prototype.focus = function focus() {\n    if (false) {}\n\n    var requestFocus = this.props.requestFocus;\n\n    if (requestFocus) {\n      requestFocus(this.node);\n    } else {\n      if (initialRender) {\n        initialRender = false;\n      } else if (this.node) {\n        // React polyfills [autofocus] and it fires earlier than cDM,\n        // so we were stealing focus away, this line prevents that.\n        if (!this.node.contains(document.activeElement)) {\n          this.node.focus();\n        }\n      }\n    }\n  };\n\n  FocusHandlerImpl.prototype.render = function render() {\n    var _this5 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        style = _props2.style,\n        requestFocus = _props2.requestFocus,\n        _props2$component = _props2.component,\n        Comp = _props2$component === undefined ? "div" : _props2$component,\n        uri = _props2.uri,\n        location = _props2.location,\n        domProps = _objectWithoutProperties(_props2, ["children", "style", "requestFocus", "component", "uri", "location"]);\n\n    return react.createElement(Comp, es_extends({\n      style: es_extends({\n        outline: "none"\n      }, style),\n      tabIndex: "-1",\n      ref: function ref(n) {\n        return _this5.node = n;\n      }\n    }, domProps), react.createElement(FocusContext.Provider, {\n      value: this.requestFocus\n    }, this.props.children));\n  };\n\n  return FocusHandlerImpl;\n}(react.Component);\n\n(0,react_lifecycles_compat/* polyfill */.O)(FocusHandlerImpl);\n\nvar k = function k() {}; ////////////////////////////////////////////////////////////////////////////////\n\n\nvar forwardRef = react.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = function forwardRef(C) {\n    return C;\n  };\n}\n\nvar Link = forwardRef(function (_ref4, ref) {\n  var innerRef = _ref4.innerRef,\n      props = _objectWithoutProperties(_ref4, ["innerRef"]);\n\n  return react.createElement(BaseContext.Consumer, null, function (_ref5) {\n    var basepath = _ref5.basepath,\n        baseuri = _ref5.baseuri;\n    return react.createElement(Location, null, function (_ref6) {\n      var location = _ref6.location,\n          navigate = _ref6.navigate;\n\n      var to = props.to,\n          state = props.state,\n          replace = props.replace,\n          _props$getProps = props.getProps,\n          getProps = _props$getProps === undefined ? k : _props$getProps,\n          anchorProps = _objectWithoutProperties(props, ["to", "state", "replace", "getProps"]);\n\n      var href = resolve(to, baseuri);\n      var encodedHref = encodeURI(href);\n      var isCurrent = location.pathname === encodedHref;\n      var isPartiallyCurrent = startsWith(location.pathname, encodedHref);\n      return react.createElement("a", es_extends({\n        ref: ref || innerRef,\n        "aria-current": isCurrent ? "page" : undefined\n      }, anchorProps, getProps({\n        isCurrent: isCurrent,\n        isPartiallyCurrent: isPartiallyCurrent,\n        href: href,\n        location: location\n      }), {\n        href: href,\n        onClick: function onClick(event) {\n          if (anchorProps.onClick) anchorProps.onClick(event);\n\n          if (shouldNavigate(event)) {\n            event.preventDefault();\n            var shouldReplace = replace;\n\n            if (typeof replace !== "boolean" && isCurrent) {\n              var _location$state = es_extends({}, location.state),\n                  key = _location$state.key,\n                  restState = _objectWithoutProperties(_location$state, ["key"]);\n\n              shouldReplace = shallowCompare(es_extends({}, state), restState);\n            }\n\n            navigate(href, {\n              state: state,\n              replace: shouldReplace\n            });\n          }\n        }\n      }));\n    });\n  });\n});\nLink.displayName = "Link";\n false ? 0 : void 0; ////////////////////////////////////////////////////////////////////////////////\n\nfunction RedirectRequest(uri) {\n  this.uri = uri;\n}\n\nvar isRedirect = function isRedirect(o) {\n  return o instanceof RedirectRequest;\n};\n\nvar redirectTo = function redirectTo(to) {\n  throw new RedirectRequest(to);\n};\n\nvar RedirectImpl = function (_React$Component3) {\n  _inherits(RedirectImpl, _React$Component3);\n\n  function RedirectImpl() {\n    _classCallCheck(this, RedirectImpl);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  } // Support React < 16 with this hook\n\n\n  RedirectImpl.prototype.componentDidMount = function componentDidMount() {\n    var _props3 = this.props,\n        navigate = _props3.navigate,\n        to = _props3.to,\n        from = _props3.from,\n        _props3$replace = _props3.replace,\n        replace = _props3$replace === undefined ? true : _props3$replace,\n        state = _props3.state,\n        noThrow = _props3.noThrow,\n        baseuri = _props3.baseuri,\n        props = _objectWithoutProperties(_props3, ["navigate", "to", "from", "replace", "state", "noThrow", "baseuri"]);\n\n    Promise.resolve().then(function () {\n      var resolvedTo = resolve(to, baseuri);\n      navigate(insertParams(resolvedTo, props), {\n        replace: replace,\n        state: state\n      });\n    });\n  };\n\n  RedirectImpl.prototype.render = function render() {\n    var _props4 = this.props,\n        navigate = _props4.navigate,\n        to = _props4.to,\n        from = _props4.from,\n        replace = _props4.replace,\n        state = _props4.state,\n        noThrow = _props4.noThrow,\n        baseuri = _props4.baseuri,\n        props = _objectWithoutProperties(_props4, ["navigate", "to", "from", "replace", "state", "noThrow", "baseuri"]);\n\n    var resolvedTo = resolve(to, baseuri);\n    if (!noThrow) redirectTo(insertParams(resolvedTo, props));\n    return null;\n  };\n\n  return RedirectImpl;\n}(react.Component);\n\nvar Redirect = function Redirect(props) {\n  return react.createElement(BaseContext.Consumer, null, function (_ref7) {\n    var baseuri = _ref7.baseuri;\n    return react.createElement(Location, null, function (locationContext) {\n      return react.createElement(RedirectImpl, es_extends({}, locationContext, {\n        baseuri: baseuri\n      }, props));\n    });\n  });\n};\n\n false ? 0 : void 0; ////////////////////////////////////////////////////////////////////////////////\n\nvar Match = function Match(_ref8) {\n  var path = _ref8.path,\n      children = _ref8.children;\n  return react.createElement(BaseContext.Consumer, null, function (_ref9) {\n    var baseuri = _ref9.baseuri;\n    return react.createElement(Location, null, function (_ref10) {\n      var navigate = _ref10.navigate,\n          location = _ref10.location;\n      var resolvedPath = resolve(path, baseuri);\n      var result = match(resolvedPath, location.pathname);\n      return children({\n        navigate: navigate,\n        location: location,\n        match: result ? es_extends({}, result.params, {\n          uri: result.uri,\n          path: path\n        }) : null\n      });\n    });\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n// Hooks\n\n\nvar useLocation = function useLocation() {\n  var context = (0,react.useContext)(LocationContext);\n\n  if (!context) {\n    throw new Error("useLocation hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  return context.location;\n};\n\nvar useNavigate = function useNavigate() {\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useNavigate hook was used but a BaseContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  return context.navigate;\n};\n\nvar useParams = function useParams() {\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useParams hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  var location = useLocation();\n  var results = match(context.basepath, location.pathname);\n  return results ? results.params : null;\n};\n\nvar useMatch = function useMatch(path) {\n  if (!path) {\n    throw new Error("useMatch(path: string) requires an argument of a string to match against");\n  }\n\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useMatch hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  var location = useLocation();\n  var resolvedPath = resolve(path, context.baseuri);\n  var result = match(resolvedPath, location.pathname);\n  return result ? es_extends({}, result.params, {\n    uri: result.uri,\n    path: path\n  }) : null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar stripSlashes = function stripSlashes(str) {\n  return str.replace(/(^\\/+|\\/+$)/g, "");\n};\n\nvar createRoute = function createRoute(basepath) {\n  return function (element) {\n    if (!element) {\n      return null;\n    }\n\n    if (element.type === react.Fragment && element.props.children) {\n      return react.Children.map(element.props.children, createRoute(basepath));\n    }\n\n    !(element.props.path || element.props.default || element.type === Redirect) ?  false ? 0 : browser_default()(false) : void 0;\n    !!(element.type === Redirect && (!element.props.from || !element.props.to)) ?  false ? 0 : browser_default()(false) : void 0;\n    !!(element.type === Redirect && !validateRedirect(element.props.from, element.props.to)) ?  false ? 0 : browser_default()(false) : void 0;\n\n    if (element.props.default) {\n      return {\n        value: element,\n        default: true\n      };\n    }\n\n    var elementPath = element.type === Redirect ? element.props.from : element.props.path;\n    var path = elementPath === "/" ? basepath : stripSlashes(basepath) + "/" + stripSlashes(elementPath);\n    return {\n      value: element,\n      default: element.props.default,\n      path: element.props.children ? stripSlashes(path) + "/*" : path\n    };\n  };\n};\n\nvar shouldNavigate = function shouldNavigate(event) {\n  return !event.defaultPrevented && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}; ////////////////////////////////////////////////////////////////////////\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9499\n')},1143:function(module){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (false) {}\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0My5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFJMUM7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMEJBQTBCO0FBQ3JFO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanM/NDBiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1143\n")},907:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _arrayLikeToArray; }\n/* harmony export */ });\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7O0FBRUEseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcz8wNzY1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///907\n')},7326:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _assertThisInitialized; }\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMyNi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzP2IyOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7326\n')},5671:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _classCallCheck; }\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY3MS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanM/N2E0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5671\n')},3144:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _createClass; }\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0NC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanM/NGQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3144\n')},3:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _defineProperty; }\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/Y2UzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},8052:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _get; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(1120);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/superPropBase.js\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = (0,getPrototypeOf/* default */.Z)(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js\n\nfunction _get() {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA1Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUQ7QUFDbEM7QUFDZjtBQUNBLGFBQWEsaUNBQWM7QUFDM0I7QUFDQTs7QUFFQTtBQUNBLEM7O0FDUitDO0FBQ2hDO0FBQ2Y7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGlCQUFpQixjQUFhO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc3VwZXJQcm9wQmFzZS5qcz9hNDA1Iiwid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldC5qcz9kYTQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufSIsImltcG9ydCBzdXBlclByb3BCYXNlIGZyb20gXCIuL3N1cGVyUHJvcEJhc2UuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXQoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgIF9nZXQgPSBSZWZsZWN0LmdldC5iaW5kKCk7XG4gIH0gZWxzZSB7XG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8052\n')},1120:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _getPrototypeOf; }\n/* harmony export */ });\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyMC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcz9mM2M4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1120\n')},136:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _inherits; }\n/* harmony export */ });\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9611);\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, "prototype", {\n    writable: false\n  });\n  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBaUQ7QUFDbEM7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsa0JBQWtCLHVFQUFjO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanM/NTk0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n')},4578:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _inheritsLoose; }\n/* harmony export */ });\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9611);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3OC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWlEO0FBQ2xDO0FBQ2Y7QUFDQTtBQUNBLEVBQUUsdUVBQWM7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzPzJkZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4578\n')},4925:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _objectWithoutProperties; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkyNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEM7O0FDYjZFO0FBQzlEO0FBQ2Y7QUFDQSxlQUFlLDZCQUE0QjtBQUMzQzs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQiw2QkFBNkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzPzY0MzIiLCJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanM/ZDcxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4925\n')},2963:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _possibleConstructorReturn; }\n/* harmony export */ });\n/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1002);\n/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7326);\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(call) === "object" || typeof call === "function")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError("Derived constructors may only return object or undefined");\n  }\n\n  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(self);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2My5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrQztBQUM2QjtBQUNoRDtBQUNmLGVBQWUsK0RBQU87QUFDdEI7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxTQUFTLDhFQUFxQjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanM/OGFjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2963\n')},9611:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _setPrototypeOf; }\n/* harmony export */ });\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYxMS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzP2EwY2IiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9611\n')},885:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _slicedToArray; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\nvar unsupportedIterableToArray = __webpack_require__(181);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || (0,unsupportedIterableToArray/* default */.Z)(arr, i) || _nonIterableRest();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZTtBQUNmO0FBQ0EsQzs7QUNGZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsNEJBQTRCLCtCQUErQjtBQUMzRDs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDOzs7O0FDNUJlO0FBQ2Y7QUFDQSxDOztBQ0ZpRDtBQUNZO0FBQ1k7QUFDdEI7QUFDcEM7QUFDZixTQUFTLGVBQWMsU0FBUyxxQkFBb0IsWUFBWSw2Q0FBMEIsWUFBWSxnQkFBZTtBQUNySCIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzP2YzZGQiLCJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanM/YTQ2NiIsIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanM/YTVlYyIsIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzPzcwNWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///885\n')},2982:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _toConsumableArray; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nvar arrayLikeToArray = __webpack_require__(907);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return (0,arrayLikeToArray/* default */.Z)(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\nvar unsupportedIterableToArray = __webpack_require__(181);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || (0,unsupportedIterableToArray/* default */.Z)(arr) || _nonIterableSpread();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk4Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUQ7QUFDdEM7QUFDZixpQ0FBaUMsbUNBQWdCO0FBQ2pELEM7O0FDSGU7QUFDZjtBQUNBLEM7Ozs7QUNGZTtBQUNmO0FBQ0EsQzs7QUNGdUQ7QUFDSjtBQUNzQjtBQUNsQjtBQUN4QztBQUNmLFNBQVMsa0JBQWlCLFNBQVMsZ0JBQWUsU0FBUyw2Q0FBMEIsU0FBUyxrQkFBaUI7QUFDL0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcz83ODI2Iiwid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcz9mMWYxIiwid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzPzk2MWQiLCJ3ZWJwYWNrOi8vanVzdGljZTQwLXRvb2wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanM/YmFjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2982\n')},1002:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _typeof; }\n/* harmony export */ });\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXN0aWNlNDAtdG9vbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanM/ZTUwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1002\n')},181:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _unsupportedIterableToArray; }\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(907);\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(o, minLen);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBcUQ7QUFDdEM7QUFDZjtBQUNBLG9DQUFvQyx5RUFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLHlFQUFnQjtBQUN0RyIsInNvdXJjZXMiOlsid2VicGFjazovL2p1c3RpY2U0MC10b29sLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzPzI3NjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///181\n')},1549:function(n){"use strict";n.exports=JSON.parse('{"data":{"en-001":{"year-short":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yr"},"past":{"one":"{0} yr ago","other":"{0} yr ago"},"-1":"last yr"},"year-narrow":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yr"},"past":{"one":"{0} yr ago","other":"{0} yr ago"},"-1":"last yr"},"quarter-short":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtr"},"past":{"one":"{0} qtr ago","other":"{0} qtr ago"},"-1":"last qtr."},"quarter-narrow":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtr"},"past":{"one":"{0} qtr ago","other":"{0} qtr ago"},"-1":"last qtr."},"month-short":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo","other":"in {0} mo"},"past":{"one":"{0} mo ago","other":"{0} mo ago"},"-1":"last mo"},"month-narrow":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo","other":"in {0} mo"},"past":{"one":"{0} mo ago","other":"{0} mo ago"},"-1":"last mo"},"week-short":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wk"},"past":{"one":"{0} wk ago","other":"{0} wk ago"},"-1":"last wk"},"week-narrow":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wk"},"past":{"one":"{0} wk ago","other":"{0} wk ago"},"-1":"last wk"},"hour-short":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hr"},"past":{"one":"{0} hr ago","other":"{0} hr ago"}},"hour-narrow":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hr"},"past":{"one":"{0} hr ago","other":"{0} hr ago"}},"minute-short":{"0":"this minute","future":{"one":"in {0} min","other":"in {0} min"},"past":{"one":"{0} min ago","other":"{0} min ago"}},"minute-narrow":{"0":"this minute","future":{"one":"in {0} min","other":"in {0} min"},"past":{"one":"{0} min ago","other":"{0} min ago"}},"second-short":{"0":"now","future":{"one":"in {0} sec","other":"in {0} sec"},"past":{"one":"{0} sec ago","other":"{0} sec ago"}},"second-narrow":{"0":"now","future":{"one":"in {0} sec","other":"in {0} sec"},"past":{"one":"{0} sec ago","other":"{0} sec ago"}}},"en-150":{"year-short":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yr"},"past":{"one":"{0} yr ago","other":"{0} yr ago"},"-1":"last yr"},"year-narrow":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yr"},"past":{"one":"{0} yr ago","other":"{0} yr ago"},"-1":"last yr"},"quarter-short":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtr"},"past":{"one":"{0} qtr ago","other":"{0} qtr ago"},"-1":"last qtr."},"quarter-narrow":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtr"},"past":{"one":"{0} qtr ago","other":"{0} qtr ago"},"-1":"last qtr."},"month-short":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo","other":"in {0} mo"},"past":{"one":"{0} mo ago","other":"{0} mo ago"},"-1":"last mo"},"month-narrow":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo","other":"in {0} mo"},"past":{"one":"{0} mo ago","other":"{0} mo ago"},"-1":"last mo"},"week-short":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wk"},"past":{"one":"{0} wk ago","other":"{0} wk ago"},"-1":"last wk"},"week-narrow":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wk"},"past":{"one":"{0} wk ago","other":"{0} wk ago"},"-1":"last wk"},"hour-short":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hr"},"past":{"one":"{0} hr ago","other":"{0} hr ago"}},"hour-narrow":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hr"},"past":{"one":"{0} hr ago","other":"{0} hr ago"}},"minute-short":{"0":"this minute","future":{"one":"in {0} min","other":"in {0} min"},"past":{"one":"{0} min ago","other":"{0} min ago"}},"minute-narrow":{"0":"this minute","future":{"one":"in {0} min","other":"in {0} min"},"past":{"one":"{0} min ago","other":"{0} min ago"}},"second-short":{"0":"now","future":{"one":"in {0} sec","other":"in {0} sec"},"past":{"one":"{0} sec ago","other":"{0} sec ago"}},"second-narrow":{"0":"now","future":{"one":"in {0} sec","other":"in {0} sec"},"past":{"one":"{0} sec ago","other":"{0} sec ago"}}},"en-AU":{"year-short":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yrs"},"past":{"one":"{0} yr ago","other":"{0} yrs ago"},"-1":"last yr"},"year-narrow":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr","other":"in {0} yrs"},"past":{"one":"{0} yr ago","other":"{0} yrs ago"},"-1":"last yr"},"quarter-short":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtrs"},"past":{"one":"{0} qtr ago","other":"{0} qtrs ago"},"-1":"last qtr."},"quarter-narrow":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr","other":"in {0} qtrs"},"past":{"one":"in {0} qtr ago","other":"{0} qtrs ago"},"-1":"last qtr."},"month-short":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo.","other":"in {0} mo."},"past":{"one":"{0} mo. ago","other":"{0} mo. ago"},"-1":"last mo"},"month-narrow":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo.","other":"in {0} mo."},"past":{"one":"{0} mo. ago","other":"{0} mo. ago"},"-1":"last mo"},"week-short":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wks"},"past":{"one":"{0} wk ago","other":"{0} wks ago"},"-1":"last wk"},"week-narrow":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk","other":"in {0} wks"},"past":{"one":"{0} wk ago","other":"{0} wks ago"},"-1":"last wk"},"hour-short":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hrs"},"past":{"one":"{0} hr ago","other":"{0} hrs ago"}},"hour-narrow":{"0":"this hour","future":{"one":"in {0} hr","other":"in {0} hrs"},"past":{"one":"{0} hr ago","other":"{0} hrs ago"}},"minute-short":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} mins"},"past":{"one":"{0} min. ago","other":"{0} mins ago"}},"minute-narrow":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} mins"},"past":{"one":"{0} min. ago","other":"{0} mins ago"}},"second-short":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} secs"},"past":{"one":"{0} sec. ago","other":"{0} secs ago"}},"second-narrow":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} secs"},"past":{"one":"{0} sec. ago","other":"{0} secs ago"}}},"en-CA":{"year-short":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr.","other":"in {0} yrs."},"past":{"one":"{0} yr. ago","other":"{0} yrs. ago"},"-1":"last yr"},"year-narrow":{"0":"this yr","1":"next yr","future":{"one":"in {0} yr.","other":"in {0} yrs."},"past":{"one":"{0} yr. ago","other":"{0} yrs. ago"},"-1":"last yr"},"quarter-short":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr.","other":"in {0} qtrs."},"past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"-1":"last qtr."},"quarter-narrow":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr.","other":"in {0} qtrs."},"past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"-1":"last qtr."},"month-short":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo.","other":"in {0} mos."},"past":{"one":"{0} mo. ago","other":"{0} mos. ago"},"-1":"last mo"},"month-narrow":{"0":"this mo","1":"next mo","future":{"one":"in {0} mo.","other":"in {0} mos."},"past":{"one":"{0} mo. ago","other":"{0} mos. ago"},"-1":"last mo"},"week-short":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk.","other":"in {0} wks."},"past":{"one":"{0} wk. ago","other":"{0} wks. ago"},"-1":"last wk"},"week-narrow":{"0":"this wk","1":"next wk","future":{"one":"in {0} wk.","other":"in {0} wks."},"past":{"one":"{0} wk. ago","other":"{0} wks. ago"},"-1":"last wk"},"hour-short":{"0":"this hour","future":{"one":"in {0} hr.","other":"in {0} hrs."},"past":{"one":"{0} hr. ago","other":"{0} hrs. ago"}},"hour-narrow":{"0":"this hour","future":{"one":"in {0} hr.","other":"in {0} hrs."},"past":{"one":"{0} hr. ago","other":"{0} hrs. ago"}},"minute-short":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} mins."},"past":{"one":"{0} min. ago","other":"{0} mins. ago"}},"minute-narrow":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} mins."},"past":{"one":"{0} min. ago","other":"{0} mins. ago"}},"second-short":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} secs."},"past":{"one":"{0} sec. ago","other":"{0} secs. ago"}},"second-narrow":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} secs."},"past":{"one":"{0} sec. ago","other":"{0} secs. ago"}}},"en-SG":{"quarter-short":{"0":"this qtr","1":"next qtr","future":{"one":"in {0} qtr","other":"in {0} qtrs"},"past":{"one":"{0} qtr ago","other":"{0} qtrs ago"},"-1":"last qtr"},"quarter-narrow":{"0":"this qtr","1":"next qtr","future":{"one":"in {0} qtr","other":"in {0} qtr"},"past":{"one":"{0} qtr ago","other":"{0} qtr ago"},"-1":"last qtr"},"month-short":{"0":"this mth","1":"next mth","future":{"one":"in {0} mth","other":"in {0} mth"},"past":{"one":"{0} mth ago","other":"{0} mth ago"},"-1":"last mth"}},"en":{"nu":["latn"],"year":{"0":"this year","1":"next year","future":{"one":"in {0} year","other":"in {0} years"},"past":{"one":"{0} year ago","other":"{0} years ago"},"-1":"last year"},"year-short":{"0":"this yr.","1":"next yr.","future":{"one":"in {0} yr.","other":"in {0} yr."},"past":{"one":"{0} yr. ago","other":"{0} yr. ago"},"-1":"last yr."},"year-narrow":{"0":"this yr.","1":"next yr.","future":{"one":"in {0} yr.","other":"in {0} yr."},"past":{"one":"{0} yr. ago","other":"{0} yr. ago"},"-1":"last yr."},"quarter":{"0":"this quarter","1":"next quarter","future":{"one":"in {0} quarter","other":"in {0} quarters"},"past":{"one":"{0} quarter ago","other":"{0} quarters ago"},"-1":"last quarter"},"quarter-short":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr.","other":"in {0} qtrs."},"past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"-1":"last qtr."},"quarter-narrow":{"0":"this qtr.","1":"next qtr.","future":{"one":"in {0} qtr.","other":"in {0} qtrs."},"past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"-1":"last qtr."},"month":{"0":"this month","1":"next month","future":{"one":"in {0} month","other":"in {0} months"},"past":{"one":"{0} month ago","other":"{0} months ago"},"-1":"last month"},"month-short":{"0":"this mo.","1":"next mo.","future":{"one":"in {0} mo.","other":"in {0} mo."},"past":{"one":"{0} mo. ago","other":"{0} mo. ago"},"-1":"last mo."},"month-narrow":{"0":"this mo.","1":"next mo.","future":{"one":"in {0} mo.","other":"in {0} mo."},"past":{"one":"{0} mo. ago","other":"{0} mo. ago"},"-1":"last mo."},"week":{"0":"this week","1":"next week","future":{"one":"in {0} week","other":"in {0} weeks"},"past":{"one":"{0} week ago","other":"{0} weeks ago"},"-1":"last week"},"week-short":{"0":"this wk.","1":"next wk.","future":{"one":"in {0} wk.","other":"in {0} wk."},"past":{"one":"{0} wk. ago","other":"{0} wk. ago"},"-1":"last wk."},"week-narrow":{"0":"this wk.","1":"next wk.","future":{"one":"in {0} wk.","other":"in {0} wk."},"past":{"one":"{0} wk. ago","other":"{0} wk. ago"},"-1":"last wk."},"day":{"0":"today","1":"tomorrow","future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"},"-1":"yesterday"},"day-short":{"0":"today","1":"tomorrow","future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"},"-1":"yesterday"},"day-narrow":{"0":"today","1":"tomorrow","future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"},"-1":"yesterday"},"hour":{"0":"this hour","future":{"one":"in {0} hour","other":"in {0} hours"},"past":{"one":"{0} hour ago","other":"{0} hours ago"}},"hour-short":{"0":"this hour","future":{"one":"in {0} hr.","other":"in {0} hr."},"past":{"one":"{0} hr. ago","other":"{0} hr. ago"}},"hour-narrow":{"0":"this hour","future":{"one":"in {0} hr.","other":"in {0} hr."},"past":{"one":"{0} hr. ago","other":"{0} hr. ago"}},"minute":{"0":"this minute","future":{"one":"in {0} minute","other":"in {0} minutes"},"past":{"one":"{0} minute ago","other":"{0} minutes ago"}},"minute-short":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} min."},"past":{"one":"{0} min. ago","other":"{0} min. ago"}},"minute-narrow":{"0":"this minute","future":{"one":"in {0} min.","other":"in {0} min."},"past":{"one":"{0} min. ago","other":"{0} min. ago"}},"second":{"0":"now","future":{"one":"in {0} second","other":"in {0} seconds"},"past":{"one":"{0} second ago","other":"{0} seconds ago"}},"second-short":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} sec."},"past":{"one":"{0} sec. ago","other":"{0} sec. ago"}},"second-narrow":{"0":"now","future":{"one":"in {0} sec.","other":"in {0} sec."},"past":{"one":"{0} sec. ago","other":"{0} sec. ago"}}}},"availableLocales":["en-001","en-150","en-AE","en-AG","en-AI","en-AS","en-AT","en-AU","en-BB","en-BE","en-BI","en-BM","en-BS","en-BW","en-BZ","en-CA","en-CC","en-CH","en-CK","en-CM","en-CX","en-CY","en-DE","en-DG","en-DK","en-DM","en-ER","en-FI","en-FJ","en-FK","en-FM","en-GB","en-GD","en-GG","en-GH","en-GI","en-GM","en-GU","en-GY","en-HK","en-IE","en-IL","en-IM","en-IN","en-IO","en-JE","en-JM","en-KE","en-KI","en-KN","en-KY","en-LC","en-LR","en-LS","en-MG","en-MH","en-MO","en-MP","en-MS","en-MT","en-MU","en-MW","en-MY","en-NA","en-NF","en-NG","en-NL","en-NR","en-NU","en-NZ","en-PG","en-PH","en-PK","en-PN","en-PR","en-PW","en-RW","en-SB","en-SC","en-SD","en-SE","en-SG","en-SH","en-SI","en-SL","en-SS","en-SX","en-SZ","en-TC","en-TK","en-TO","en-TT","en-TV","en-TZ","en-UG","en-UM","en-US-POSIX","en-US","en-VC","en-VG","en-VI","en-VU","en-WS","en-ZA","en-ZM","en-ZW","en"],"aliases":{},"parentLocales":{"en-150":"en-001","en-AG":"en-001","en-AI":"en-001","en-AU":"en-001","en-BB":"en-001","en-BM":"en-001","en-BS":"en-001","en-BW":"en-001","en-BZ":"en-001","en-CA":"en-001","en-CC":"en-001","en-CK":"en-001","en-CM":"en-001","en-CX":"en-001","en-CY":"en-001","en-DG":"en-001","en-DM":"en-001","en-ER":"en-001","en-FJ":"en-001","en-FK":"en-001","en-FM":"en-001","en-GB":"en-001","en-GD":"en-001","en-GG":"en-001","en-GH":"en-001","en-GI":"en-001","en-GM":"en-001","en-GY":"en-001","en-HK":"en-001","en-IE":"en-001","en-IL":"en-001","en-IM":"en-001","en-IN":"en-001","en-IO":"en-001","en-JE":"en-001","en-JM":"en-001","en-KE":"en-001","en-KI":"en-001","en-KN":"en-001","en-KY":"en-001","en-LC":"en-001","en-LR":"en-001","en-LS":"en-001","en-MG":"en-001","en-MO":"en-001","en-MS":"en-001","en-MT":"en-001","en-MU":"en-001","en-MW":"en-001","en-MY":"en-001","en-NA":"en-001","en-NF":"en-001","en-NG":"en-001","en-NR":"en-001","en-NU":"en-001","en-NZ":"en-001","en-PG":"en-001","en-PH":"en-001","en-PK":"en-001","en-PN":"en-001","en-PW":"en-001","en-RW":"en-001","en-SB":"en-001","en-SC":"en-001","en-SD":"en-001","en-SG":"en-001","en-SH":"en-001","en-SL":"en-001","en-SS":"en-001","en-SX":"en-001","en-SZ":"en-001","en-TC":"en-001","en-TK":"en-001","en-TO":"en-001","en-TT":"en-001","en-TV":"en-001","en-TZ":"en-001","en-UG":"en-001","en-VC":"en-001","en-VG":"en-001","en-VU":"en-001","en-WS":"en-001","en-ZA":"en-001","en-ZM":"en-001","en-ZW":"en-001","en-AT":"en-150","en-BE":"en-150","en-CH":"en-150","en-DE":"en-150","en-DK":"en-150","en-FI":"en-150","en-NL":"en-150","en-SE":"en-150","en-SI":"en-150"}}')},7110:function(n){"use strict";n.exports=JSON.parse('{"data":{"es-419":{"week-short":{"0":"esta sem.","1":"próx. sem.","future":{"one":"dentro de {0} sem.","other":"dentro de {0} sem."},"past":{"one":"hace {0} sem.","other":"hace {0} sem."},"-1":"sem. pas."},"week-narrow":{"0":"esta sem.","1":"próx. sem.","future":{"one":"dentro de {0} sem.","other":"dentro de {0} sem."},"past":{"one":"hace {0} sem.","other":"hace {0} sem."},"-1":"sem. pas."}},"es-AR":{"day-short":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} días","other":"dentro de {0} días"},"past":{"one":"hace {0} días","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"day-narrow":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} días","other":"dentro de {0} días"},"past":{"one":"hace {0} días","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"second-short":{"0":"ahora","future":{"one":"dentro de {0} seg.","other":"dentro de {0} seg."},"past":{"one":"hace {0} seg.","other":"hace {0} seg."}},"second-narrow":{"0":"ahora","future":{"one":"dentro de {0} seg.","other":"dentro de {0} seg."},"past":{"one":"hace {0} seg.","other":"hace {0} seg."}}},"es-MX":{"year":{"0":"este año","1":"el año próximo","future":{"one":"dentro de {0} año","other":"dentro de {0} años"},"past":{"one":"hace {0} año","other":"hace {0} años"},"-1":"el año pasado"},"year-short":{"0":"este año","1":"el próximo año","future":{"one":"en {0} a","other":"en {0} a"},"past":{"one":"hace {0} a","other":"hace {0} a"},"-1":"el año pasado"},"year-narrow":{"0":"este año","1":"el próximo año","future":{"one":"en {0} a","other":"en {0} a"},"past":{"one":"-{0} a","other":"-{0} a"},"-1":"el año pasado"},"quarter":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"en {0} trimestre","other":"dentro de {0} trimetres"},"past":{"one":"hace {0} trimestre","other":"hace {0} trimestres"},"-1":"el trimestre pasado"},"quarter-short":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"en {0} trim.","other":"en {0} trim"},"past":{"one":"hace {0} trim.","other":"hace {0} trim."},"-1":"el trimestre pasado"},"quarter-narrow":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"en {0} trim.","other":"en {0} trim."},"past":{"one":"-{0} T","other":"-{0} T"},"-1":"el trimestre pasado"},"month":{"0":"este mes","1":"el mes próximo","future":{"one":"en {0} mes","other":"en {0} meses"},"past":{"one":"hace {0} mes","other":"hace {0} meses"},"-1":"el mes pasado"},"month-short":{"0":"este mes","1":"el próximo mes","future":{"one":"en {0} m","other":"en {0} m"},"past":{"one":"hace {0} m","other":"hace {0} m"},"-1":"el mes pasado"},"month-narrow":{"0":"este mes","1":"el próximo mes","future":{"one":"+{0} m","other":"+{0} m"},"past":{"one":"-{0} m","other":"-{0} m"},"-1":"el mes pasado"},"week":{"0":"esta semana","1":"la semana próxima","future":{"one":"dentro de {0} semana","other":"dentro de {0} semanas"},"past":{"one":"hace {0} semana","other":"hace {0} semanas"},"-1":"la semana pasada"},"week-short":{"0":"esta sem.","1":"próx. sem.","future":{"one":"en {0} sem.","other":"en {0} sem."},"past":{"one":"hace {0} sem.","other":"hace {0} sem."},"-1":"sem. pas."},"day-short":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"en {0} día","other":"en {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"day-narrow":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"+{0} día","other":"en {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"hour-short":{"0":"esta hora","future":{"one":"en {0} h","other":"en {0} n"},"past":{"one":"hace {0} h","other":"hace {0} h"}},"minute-short":{"0":"este minuto","future":{"one":"en {0} min","other":"en {0} min"},"past":{"one":"hace {0} min","other":"hace {0} min"}},"minute-narrow":{"0":"este minuto","future":{"one":"en {0} min","other":"en {0} min"},"past":{"one":"hace {0} min","other":"hace {0} min"}},"second-short":{"0":"ahora","future":{"one":"en {0} s","other":"en {0} s"},"past":{"one":"hace {0} s","other":"hace {0} s"}},"second-narrow":{"0":"ahora","future":{"one":"+{0} s","other":"+{0} s"},"past":{"one":"hace {0} s","other":"hace {0} s"}}},"es-PY":{"second-short":{"0":"ahora","future":{"one":"dentro de {0} seg.","other":"dentro de {0} seg."},"past":{"one":"hace {0} seg.","other":"hace {0} seg."}},"second-narrow":{"0":"ahora","future":{"one":"dentro de {0} seg.","other":"dentro de {0} seg."},"past":{"one":"hace {0} seg.","other":"hace {0} seg."}}},"es-SV":{"day":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} día","other":"dentro de {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"antier","-1":"ayer"}},"es-US":{"year":{"0":"este año","1":"el año próximo","future":{"one":"dentro de {0} año","other":"dentro de {0} años"},"past":{"one":"hace {0} año","other":"hace {0} años"},"-1":"el año pasado"},"quarter":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"dentro de {0} trimetre","other":"dentro de {0} trimetres"},"past":{"one":"hace {0} trimestre","other":"hace {0} trimestres"},"-1":"el trimestre pasado"},"month":{"0":"este mes","1":"el mes próximo","future":{"one":"dentro de {0} mes","other":"dentro de {0} meses"},"past":{"one":"hace {0} mes","other":"hace {0} meses"},"-1":"el mes pasado"},"week":{"0":"esta semana","1":"la semana próxima","future":{"one":"dentro de {0} semana","other":"dentro de {0} semanas"},"past":{"one":"hace {0} semana","other":"hace {0} semanas"},"-1":"la semana pasada"}},"es":{"nu":["latn"],"year":{"0":"este año","1":"el próximo año","future":{"one":"dentro de {0} año","other":"dentro de {0} años"},"past":{"one":"hace {0} año","other":"hace {0} años"},"-1":"el año pasado"},"year-short":{"0":"este año","1":"el próximo año","future":{"one":"dentro de {0} a","other":"dentro de {0} a"},"past":{"one":"hace {0} a","other":"hace {0} a"},"-1":"el año pasado"},"year-narrow":{"0":"este año","1":"el próximo año","future":{"one":"dentro de {0} a","other":"dentro de {0} a"},"past":{"one":"hace {0} a","other":"hace {0} a"},"-1":"el año pasado"},"quarter":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"dentro de {0} trimestre","other":"dentro de {0} trimestres"},"past":{"one":"hace {0} trimestre","other":"hace {0} trimestres"},"-1":"el trimestre pasado"},"quarter-short":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"dentro de {0} trim.","other":"dentro de {0} trim."},"past":{"one":"hace {0} trim.","other":"hace {0} trim."},"-1":"el trimestre pasado"},"quarter-narrow":{"0":"este trimestre","1":"el próximo trimestre","future":{"one":"dentro de {0} trim.","other":"dentro de {0} trim."},"past":{"one":"hace {0} trim.","other":"hace {0} trim."},"-1":"el trimestre pasado"},"month":{"0":"este mes","1":"el próximo mes","future":{"one":"dentro de {0} mes","other":"dentro de {0} meses"},"past":{"one":"hace {0} mes","other":"hace {0} meses"},"-1":"el mes pasado"},"month-short":{"0":"este mes","1":"el próximo mes","future":{"one":"dentro de {0} m","other":"dentro de {0} m"},"past":{"one":"hace {0} m","other":"hace {0} m"},"-1":"el mes pasado"},"month-narrow":{"0":"este mes","1":"el próximo mes","future":{"one":"dentro de {0} m","other":"dentro de {0} m"},"past":{"one":"hace {0} m","other":"hace {0} m"},"-1":"el mes pasado"},"week":{"0":"esta semana","1":"la próxima semana","future":{"one":"dentro de {0} semana","other":"dentro de {0} semanas"},"past":{"one":"hace {0} semana","other":"hace {0} semanas"},"-1":"la semana pasada"},"week-short":{"0":"esta sem.","1":"próx. sem.","future":{"one":"dentro de {0} sem.","other":"dentro de {0} sem."},"past":{"one":"hace {0} sem.","other":"hace {0} sem."},"-1":"sem. ant."},"week-narrow":{"0":"esta sem.","1":"próx. sem.","future":{"one":"dentro de {0} sem.","other":"dentro de {0} sem."},"past":{"one":"hace {0} sem.","other":"hace {0} sem."},"-1":"sem. ant."},"day":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} día","other":"dentro de {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"day-short":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} día","other":"dentro de {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"day-narrow":{"0":"hoy","1":"mañana","2":"pasado mañana","future":{"one":"dentro de {0} día","other":"dentro de {0} días"},"past":{"one":"hace {0} día","other":"hace {0} días"},"-2":"anteayer","-1":"ayer"},"hour":{"0":"esta hora","future":{"one":"dentro de {0} hora","other":"dentro de {0} horas"},"past":{"one":"hace {0} hora","other":"hace {0} horas"}},"hour-short":{"0":"esta hora","future":{"one":"dentro de {0} h","other":"dentro de {0} h"},"past":{"one":"hace {0} h","other":"hace {0} h"}},"hour-narrow":{"0":"esta hora","future":{"one":"dentro de {0} h","other":"dentro de {0} h"},"past":{"one":"hace {0} h","other":"hace {0} h"}},"minute":{"0":"este minuto","future":{"one":"dentro de {0} minuto","other":"dentro de {0} minutos"},"past":{"one":"hace {0} minuto","other":"hace {0} minutos"}},"minute-short":{"0":"este minuto","future":{"one":"dentro de {0} min","other":"dentro de {0} min"},"past":{"one":"hace {0} min","other":"hace {0} min"}},"minute-narrow":{"0":"este minuto","future":{"one":"dentro de {0} min","other":"dentro de {0} min"},"past":{"one":"hace {0} min","other":"hace {0} min"}},"second":{"0":"ahora","future":{"one":"dentro de {0} segundo","other":"dentro de {0} segundos"},"past":{"one":"hace {0} segundo","other":"hace {0} segundos"}},"second-short":{"0":"ahora","future":{"one":"dentro de {0} s","other":"dentro de {0} s"},"past":{"one":"hace {0} s","other":"hace {0} s"}},"second-narrow":{"0":"ahora","future":{"one":"dentro de {0} s","other":"dentro de {0} s"},"past":{"one":"hace {0} s","other":"hace {0} s"}}}},"availableLocales":["es-419","es-AR","es-BO","es-BR","es-BZ","es-CL","es-CO","es-CR","es-CU","es-DO","es-EA","es-EC","es-GQ","es-GT","es-HN","es-IC","es-MX","es-NI","es-PA","es-PE","es-PH","es-PR","es-PY","es-SV","es-US","es-UY","es-VE","es"],"aliases":{},"parentLocales":{"es-AR":"es-419","es-BO":"es-419","es-BR":"es-419","es-BZ":"es-419","es-CL":"es-419","es-CO":"es-419","es-CR":"es-419","es-CU":"es-419","es-DO":"es-419","es-EC":"es-419","es-GT":"es-419","es-HN":"es-419","es-MX":"es-419","es-NI":"es-419","es-PA":"es-419","es-PE":"es-419","es-PR":"es-419","es-PY":"es-419","es-SV":"es-419","es-US":"es-419","es-UY":"es-419","es-VE":"es-419"}}')},8779:function(n){"use strict";n.exports=JSON.parse('{"data":{"ses":{"nu":["latn"],"year":{"0":"this year","1":"next year","future":{"other":"+{0} y"},"past":{"other":"-{0} y"},"-1":"last year"},"year-short":{"0":"this year","1":"next year","future":{"other":"+{0} y"},"past":{"other":"-{0} y"},"-1":"last year"},"year-narrow":{"0":"this year","1":"next year","future":{"other":"+{0} y"},"past":{"other":"-{0} y"},"-1":"last year"},"quarter":{"0":"this quarter","1":"next quarter","future":{"other":"+{0} Q"},"past":{"other":"-{0} Q"},"-1":"last quarter"},"quarter-short":{"0":"this quarter","1":"next quarter","future":{"other":"+{0} Q"},"past":{"other":"-{0} Q"},"-1":"last quarter"},"quarter-narrow":{"0":"this quarter","1":"next quarter","future":{"other":"+{0} Q"},"past":{"other":"-{0} Q"},"-1":"last quarter"},"month":{"0":"this month","1":"next month","future":{"other":"+{0} m"},"past":{"other":"-{0} m"},"-1":"last month"},"month-short":{"0":"this month","1":"next month","future":{"other":"+{0} m"},"past":{"other":"-{0} m"},"-1":"last month"},"month-narrow":{"0":"this month","1":"next month","future":{"other":"+{0} m"},"past":{"other":"-{0} m"},"-1":"last month"},"week":{"0":"this week","1":"next week","future":{"other":"+{0} w"},"past":{"other":"-{0} w"},"-1":"last week"},"week-short":{"0":"this week","1":"next week","future":{"other":"+{0} w"},"past":{"other":"-{0} w"},"-1":"last week"},"week-narrow":{"0":"this week","1":"next week","future":{"other":"+{0} w"},"past":{"other":"-{0} w"},"-1":"last week"},"day":{"0":"Hõo","1":"Suba","future":{"other":"+{0} d"},"past":{"other":"-{0} d"},"-1":"Bi"},"day-short":{"0":"Hõo","1":"Suba","future":{"other":"+{0} d"},"past":{"other":"-{0} d"},"-1":"Bi"},"day-narrow":{"0":"Hõo","1":"Suba","future":{"other":"+{0} d"},"past":{"other":"-{0} d"},"-1":"Bi"},"hour":{"0":"this hour","future":{"other":"+{0} h"},"past":{"other":"-{0} h"}},"hour-short":{"0":"this hour","future":{"other":"+{0} h"},"past":{"other":"-{0} h"}},"hour-narrow":{"0":"this hour","future":{"other":"+{0} h"},"past":{"other":"-{0} h"}},"minute":{"0":"this minute","future":{"other":"+{0} min"},"past":{"other":"-{0} min"}},"minute-short":{"0":"this minute","future":{"other":"+{0} min"},"past":{"other":"-{0} min"}},"minute-narrow":{"0":"this minute","future":{"other":"+{0} min"},"past":{"other":"-{0} min"}},"second":{"0":"now","future":{"other":"+{0} s"},"past":{"other":"-{0} s"}},"second-short":{"0":"now","future":{"other":"+{0} s"},"past":{"other":"-{0} s"}},"second-narrow":{"0":"now","future":{"other":"+{0} s"},"past":{"other":"-{0} s"}}}},"availableLocales":["ses"],"aliases":{},"parentLocales":{}}')}},function(n){var I=function(I){return n(n.s=I)};n.O(0,[532,774,349],(function(){return I(2497),I(9917)}));n.O()}]);